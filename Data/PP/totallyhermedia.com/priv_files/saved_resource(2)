/**
 * BxSlider v4.1.1 - Fully loaded, responsive content slider
 * http://bxslider.com
 *
 * Copyright 2013, Steven Wanderski - http://stevenwanderski.com - http://bxcreative.com
 * Written while drinking Belgian ales and listening to jazz
 *
 * Released under the MIT license - http://opensource.org/licenses/MIT
 */

;(function($){

    var plugin = {};

    var defaults = {

        // GENERAL
        mode: 'horizontal',
        slideSelector: '',
        infiniteLoop: true,
        hideControlOnEnd: false,
        speed: 500,
        easing: null,
        slideMargin: 0,
        startSlide: 0,
        randomStart: false,
        captions: false,
        ticker: false,
        tickerHover: false,
        adaptiveHeight: false,
        adaptiveHeightSpeed: 500,
        video: false,
        useCSS: true,
        preloadImages: 'visible',
        responsive: true,

        // TOUCH
        touchEnabled: true,
        swipeThreshold: 50,
        oneToOneTouch: true,
        preventDefaultSwipeX: true,
        preventDefaultSwipeY: false,

        // PAGER
        pager: true,
        pagerType: 'full',
        pagerShortSeparator: ' / ',
        pagerSelector: null,
        buildPager: null,
        pagerCustom: null,

        // CONTROLS
        controls: true,
        nextText: 'Next',
        prevText: 'Prev',
        nextSelector: null,
        prevSelector: null,
        autoControls: false,
        startText: 'Start',
        stopText: 'Stop',
        autoControlsCombine: false,
        autoControlsSelector: null,

        // AUTO
        auto: false,
        pause: 4000,
        autoStart: true,
        autoDirection: 'next',
        autoHover: false,
        autoDelay: 0,

        // CAROUSEL
        minSlides: 1,
        maxSlides: 1,
        moveSlides: 0,
        slideWidth: 0,

        // CALLBACKS
        onSliderLoad: function() {},
        onSlideBefore: function() {},
        onSlideAfter: function() {},
        onSlideNext: function() {},
        onSlidePrev: function() {}
    }

    $.fn.bxSlider = function(options){

        if(this.length == 0) return this;

        // support mutltiple elements
        if(this.length > 1){
            this.each(function(){$(this).bxSlider(options)});
            return this;
        }

        // create a namespace to be used throughout the plugin
        var slider = {};
        // set a reference to our slider element
        var el = this;
        plugin.el = this;

        /**
         * Makes slideshow responsive
         */
        // first get the original window dimens (thanks alot IE)
        var windowWidth = $(window).width();
        var windowHeight = $(window).height();



        /**
         * ===================================================================================
         * = PRIVATE FUNCTIONS
         * ===================================================================================
         */

        /**
         * Initializes namespace settings to be used throughout plugin
         */
        var init = function(){
            // merge user-supplied options with the defaults
            slider.settings = $.extend({}, defaults, options);
            // parse slideWidth setting
            slider.settings.slideWidth = parseInt(slider.settings.slideWidth);
            // store the original children
            slider.children = el.children(slider.settings.slideSelector);
            // check if actual number of slides is less than minSlides / maxSlides
            if(slider.children.length < slider.settings.minSlides) slider.settings.minSlides = slider.children.length;
            if(slider.children.length < slider.settings.maxSlides) slider.settings.maxSlides = slider.children.length;
            // if random start, set the startSlide setting to random number
            if(slider.settings.randomStart) slider.settings.startSlide = Math.floor(Math.random() * slider.children.length);
            // store active slide information
            slider.active = { index: slider.settings.startSlide }
            // store if the slider is in carousel mode (displaying / moving multiple slides)
            slider.carousel = slider.settings.minSlides > 1 || slider.settings.maxSlides > 1;
            // if carousel, force preloadImages = 'all'
            if(slider.carousel) slider.settings.preloadImages = 'all';
            // calculate the min / max width thresholds based on min / max number of slides
            // used to setup and update carousel slides dimensions
            slider.minThreshold = (slider.settings.minSlides * slider.settings.slideWidth) + ((slider.settings.minSlides - 1) * slider.settings.slideMargin);
            slider.maxThreshold = (slider.settings.maxSlides * slider.settings.slideWidth) + ((slider.settings.maxSlides - 1) * slider.settings.slideMargin);
            // store the current state of the slider (if currently animating, working is true)
            slider.working = false;
            // initialize the controls object
            slider.controls = {};
            // initialize an auto interval
            slider.interval = null;
            // determine which property to use for transitions
            slider.animProp = slider.settings.mode == 'vertical' ? 'top' : 'left';
            // determine if hardware acceleration can be used
            slider.usingCSS = slider.settings.useCSS && slider.settings.mode != 'fade' && (function(){
                // create our test div element
                var div = document.createElement('div');
                // css transition properties
                var props = ['WebkitPerspective', 'MozPerspective', 'OPerspective', 'msPerspective'];
                // test for each property
                for(var i in props){
                    if(div.style[props[i]] !== undefined){
                        slider.cssPrefix = props[i].replace('Perspective', '').toLowerCase();
                        slider.animProp = '-' + slider.cssPrefix + '-transform';
                        return true;
                    }
                }
                return false;
            }());
            // if vertical mode always make maxSlides and minSlides equal
            if(slider.settings.mode == 'vertical') slider.settings.maxSlides = slider.settings.minSlides;
            // save original style data
            el.data("origStyle", el.attr("style"));
            el.children(slider.settings.slideSelector).each(function() {
              $(this).data("origStyle", $(this).attr("style"));
            });
            // perform all DOM / CSS modifications
            setup();
        }

        /**
         * Performs all DOM and CSS modifications
         */
        var setup = function(){
            // wrap el in a wrapper
            el.wrap('<div class="bx-wrapper"><div class="bx-viewport"></div></div>');
            // store a namspace reference to .bx-viewport
            slider.viewport = el.parent();
            // add a loading div to display while images are loading
            slider.loader = $('<div class="bx-loading" />');
            slider.viewport.prepend(slider.loader);
            // set el to a massive width, to hold any needed slides
            // also strip any margin and padding from el
            el.css({
                width: slider.settings.mode == 'horizontal' ? (slider.children.length * 100 + 215) + '%' : 'auto',
                position: 'relative'
            });
            // if using CSS, add the easing property
            if(slider.usingCSS && slider.settings.easing){
                el.css('-' + slider.cssPrefix + '-transition-timing-function', slider.settings.easing);
            // if not using CSS and no easing value was supplied, use the default JS animation easing (swing)
            }else if(!slider.settings.easing){
                slider.settings.easing = 'swing';
            }
            var slidesShowing = getNumberSlidesShowing();
            // make modifications to the viewport (.bx-viewport)
            slider.viewport.css({
                width: '100%',
                overflow: 'hidden',
                position: 'relative'
            });
            slider.viewport.parent().css({
                maxWidth: getViewportMaxWidth()
            });
            // make modification to the wrapper (.bx-wrapper)
            if(!slider.settings.pager) {
                slider.viewport.parent().css({
                margin: '0 auto 0px'
                });
            }
            // apply css to all slider children
            slider.children.css({
                'float': slider.settings.mode == 'horizontal' ? 'left' : 'none',
                listStyle: 'none',
                position: 'relative'
            });
            // apply the calculated width after the float is applied to prevent scrollbar interference
            slider.children.css('width', getSlideWidth());
            // if slideMargin is supplied, add the css
            if(slider.settings.mode == 'horizontal' && slider.settings.slideMargin > 0) slider.children.css('marginRight', slider.settings.slideMargin);
            if(slider.settings.mode == 'vertical' && slider.settings.slideMargin > 0) slider.children.css('marginBottom', slider.settings.slideMargin);
            // if "fade" mode, add positioning and z-index CSS
            if(slider.settings.mode == 'fade'){
                slider.children.css({
                    position: 'absolute',
                    zIndex: 0,
                    display: 'none'
                });
                // prepare the z-index on the showing element
                slider.children.eq(slider.settings.startSlide).css({zIndex: 50, display: 'block'});
            }
            // create an element to contain all slider controls (pager, start / stop, etc)
            slider.controls.el = $('<div class="bx-controls" />');
            // if captions are requested, add them
            if(slider.settings.captions) appendCaptions();
            // check if startSlide is last slide
            slider.active.last = slider.settings.startSlide == getPagerQty() - 1;
            // if video is true, set up the fitVids plugin
            if(slider.settings.video) el.fitVids();
            // set the default preload selector (visible)
            var preloadSelector = slider.children.eq(slider.settings.startSlide);
            if (slider.settings.preloadImages == "all") preloadSelector = slider.children;
            // only check for control addition if not in "ticker" mode
            if(!slider.settings.ticker){
                // if pager is requested, add it
                if(slider.settings.pager) appendPager();
                // if controls are requested, add them
                if(slider.settings.controls) appendControls();
                // if auto is true, and auto controls are requested, add them
                if(slider.settings.auto && slider.settings.autoControls) appendControlsAuto();
                // if any control option is requested, add the controls wrapper
                if(slider.settings.controls || slider.settings.autoControls || slider.settings.pager) slider.viewport.after(slider.controls.el);
            // if ticker mode, do not allow a pager
            }else{
                slider.settings.pager = false;
            }
            // preload all images, then perform final DOM / CSS modifications that depend on images being loaded
            loadElements(preloadSelector, start);
        }

        var loadElements = function(selector, callback){
            var total = selector.find('img, iframe').length;
            if (total == 0){
                callback();
                return;
            }
            var count = 0;
            selector.find('img, iframe').each(function(){
                $(this).one('load', function() {
                  if(++count == total) callback();
                }).each(function() {
                  if(this.complete) $(this).load();
                });
            });
        }

        /**
         * Start the slider
         */
        var start = function(){
            // if infinite loop, prepare additional slides
            if(slider.settings.infiniteLoop && slider.settings.mode != 'fade' && !slider.settings.ticker){
                var slice = slider.settings.mode == 'vertical' ? slider.settings.minSlides : slider.settings.maxSlides;
                var sliceAppend = slider.children.slice(0, slice).clone().addClass('bx-clone');
                var slicePrepend = slider.children.slice(-slice).clone().addClass('bx-clone');
                el.append(sliceAppend).prepend(slicePrepend);
            }
            // remove the loading DOM element
            slider.loader.remove();
            // set the left / top position of "el"
            setSlidePosition();
            // if "vertical" mode, always use adaptiveHeight to prevent odd behavior
            if (slider.settings.mode == 'vertical') slider.settings.adaptiveHeight = true;
            // set the viewport height
            slider.viewport.height(getViewportHeight());
            // make sure everything is positioned just right (same as a window resize)
            el.redrawSlider();
            // onSliderLoad callback
            slider.settings.onSliderLoad(slider.active.index);
            // slider has been fully initialized
            slider.initialized = true;
            // bind the resize call to the window
            if (slider.settings.responsive) $(window).bind('resize', resizeWindow);
            // if auto is true, start the show
            if (slider.settings.auto && slider.settings.autoStart) initAuto();
            // if ticker is true, start the ticker
            if (slider.settings.ticker) initTicker();
            // if pager is requested, make the appropriate pager link active
            if (slider.settings.pager) updatePagerActive(slider.settings.startSlide);
            // check for any updates to the controls (like hideControlOnEnd updates)
            if (slider.settings.controls) updateDirectionControls();
            // if touchEnabled is true, setup the touch events
            if (slider.settings.touchEnabled && !slider.settings.ticker) initTouch();
        }

        /**
         * Returns the calculated height of the viewport, used to determine either adaptiveHeight or the maxHeight value
         */
        var getViewportHeight = function(){
            var height = 0;
            // first determine which children (slides) should be used in our height calculation
            var children = $();
            // if mode is not "vertical" and adaptiveHeight is false, include all children
            if(slider.settings.mode != 'vertical' && !slider.settings.adaptiveHeight){
                children = slider.children;
            }else{
                // if not carousel, return the single active child
                if(!slider.carousel){
                    children = slider.children.eq(slider.active.index);
                // if carousel, return a slice of children
                }else{
                    // get the individual slide index
                    var currentIndex = slider.settings.moveSlides == 1 ? slider.active.index : slider.active.index * getMoveBy();
                    // add the current slide to the children
                    children = slider.children.eq(currentIndex);
                    // cycle through the remaining "showing" slides
                    for (i = 1; i <= slider.settings.maxSlides - 1; i++){
                        // if looped back to the start
                        if(currentIndex + i >= slider.children.length){
                            children = children.add(slider.children.eq(i - 1));
                        }else{
                            children = children.add(slider.children.eq(currentIndex + i));
                        }
                    }
                }
            }
            // if "vertical" mode, calculate the sum of the heights of the children
            if(slider.settings.mode == 'vertical'){
                children.each(function(index) {
                  height += $(this).outerHeight();
                });
                // add user-supplied margins
                if(slider.settings.slideMargin > 0){
                    height += slider.settings.slideMargin * (slider.settings.minSlides - 1);
                }
            // if not "vertical" mode, calculate the max height of the children
            }else{
                height = Math.max.apply(Math, children.map(function(){
                    return $(this).outerHeight(false);
                }).get());
            }
            return height;
        }

        /**
         * Returns the calculated width to be used for the outer wrapper / viewport
         */
        var getViewportMaxWidth = function(){
            var width = '100%';
            if(slider.settings.slideWidth > 0){
                if(slider.settings.mode == 'horizontal'){
                    width = (slider.settings.maxSlides * slider.settings.slideWidth) + ((slider.settings.maxSlides - 1) * slider.settings.slideMargin);
                }else{
                    width = slider.settings.slideWidth;
                }
            }
            return width;
        }

        /**
         * Returns the calculated width to be applied to each slide
         */
        var getSlideWidth = function(){
            // start with any user-supplied slide width
            var newElWidth = slider.settings.slideWidth;
            // get the current viewport width
            var wrapWidth = slider.viewport.width();
            // if slide width was not supplied, or is larger than the viewport use the viewport width
            if(slider.settings.slideWidth == 0 ||
                (slider.settings.slideWidth > wrapWidth && !slider.carousel) ||
                slider.settings.mode == 'vertical'){
                newElWidth = wrapWidth;
            // if carousel, use the thresholds to determine the width
            }else if(slider.settings.maxSlides > 1 && slider.settings.mode == 'horizontal'){
                if(wrapWidth > slider.maxThreshold){
                    // newElWidth = (wrapWidth - (slider.settings.slideMargin * (slider.settings.maxSlides - 1))) / slider.settings.maxSlides;
                }else if(wrapWidth < slider.minThreshold){
                    newElWidth = (wrapWidth - (slider.settings.slideMargin * (slider.settings.minSlides - 1))) / slider.settings.minSlides;
                }
            }
            return newElWidth;
        }

        /**
         * Returns the number of slides currently visible in the viewport (includes partially visible slides)
         */
        var getNumberSlidesShowing = function(){
            var slidesShowing = 1;
            if(slider.settings.mode == 'horizontal' && slider.settings.slideWidth > 0){
                // if viewport is smaller than minThreshold, return minSlides
                if(slider.viewport.width() < slider.minThreshold){
                    slidesShowing = slider.settings.minSlides;
                // if viewport is larger than minThreshold, return maxSlides
                }else if(slider.viewport.width() > slider.maxThreshold){
                    slidesShowing = slider.settings.maxSlides;
                // if viewport is between min / max thresholds, divide viewport width by first child width
                }else{
                    var childWidth = slider.children.first().width();
                    slidesShowing = Math.floor(slider.viewport.width() / childWidth);
                }
            // if "vertical" mode, slides showing will always be minSlides
            }else if(slider.settings.mode == 'vertical'){
                slidesShowing = slider.settings.minSlides;
            }
            return slidesShowing;
        }

        /**
         * Returns the number of pages (one full viewport of slides is one "page")
         */
        var getPagerQty = function(){
            var pagerQty = 0;
            // if moveSlides is specified by the user
            if(slider.settings.moveSlides > 0){
                if(slider.settings.infiniteLoop){
                    pagerQty = slider.children.length / getMoveBy();
                }else{
                    // use a while loop to determine pages
                    var breakPoint = 0;
                    var counter = 0
                    // when breakpoint goes above children length, counter is the number of pages
                    while (breakPoint < slider.children.length){
                        ++pagerQty;
                        breakPoint = counter + getNumberSlidesShowing();
                        counter += slider.settings.moveSlides <= getNumberSlidesShowing() ? slider.settings.moveSlides : getNumberSlidesShowing();
                    }
                }
            // if moveSlides is 0 (auto) divide children length by sides showing, then round up
            }else{
                pagerQty = Math.ceil(slider.children.length / getNumberSlidesShowing());
            }
            return pagerQty;
        }

        /**
         * Returns the number of indivual slides by which to shift the slider
         */
        var getMoveBy = function(){
            // if moveSlides was set by the user and moveSlides is less than number of slides showing
            if(slider.settings.moveSlides > 0 && slider.settings.moveSlides <= getNumberSlidesShowing()){
                return slider.settings.moveSlides;
            }
            // if moveSlides is 0 (auto)
            return getNumberSlidesShowing();
        }

        /**
         * Sets the slider's (el) left or top position
         */
        var setSlidePosition = function(){
            // if last slide, not infinite loop, and number of children is larger than specified maxSlides
            if(slider.children.length > slider.settings.maxSlides && slider.active.last && !slider.settings.infiniteLoop){
                if (slider.settings.mode == 'horizontal'){
                    // get the last child's position
                    var lastChild = slider.children.last();
                    var position = lastChild.position();
                    // set the left position
                    setPositionProperty(-(position.left - (slider.viewport.width() - lastChild.width())), 'reset', 0);
                }else if(slider.settings.mode == 'vertical'){
                    // get the last showing index's position
                    var lastShowingIndex = slider.children.length - slider.settings.minSlides;
                    var position = slider.children.eq(lastShowingIndex).position();
                    // set the top position
                    setPositionProperty(-position.top, 'reset', 0);
                }
            // if not last slide
            }else{
                // get the position of the first showing slide
                var position = slider.children.eq(slider.active.index * getMoveBy()).position();
                // check for last slide
                if (slider.active.index == getPagerQty() - 1) slider.active.last = true;
                // set the repective position
                if (position != undefined){
                    if (slider.settings.mode == 'horizontal') setPositionProperty(-position.left, 'reset', 0);
                    else if (slider.settings.mode == 'vertical') setPositionProperty(-position.top, 'reset', 0);
                }
            }
        }

        /**
         * Sets the el's animating property position (which in turn will sometimes animate el).
         * If using CSS, sets the transform property. If not using CSS, sets the top / left property.
         *
         * @param value (int)
         *  - the animating property's value
         *
         * @param type (string) 'slider', 'reset', 'ticker'
         *  - the type of instance for which the function is being
         *
         * @param duration (int)
         *  - the amount of time (in ms) the transition should occupy
         *
         * @param params (array) optional
         *  - an optional parameter containing any variables that need to be passed in
         */
        var setPositionProperty = function(value, type, duration, params){
            // use CSS transform
            if(slider.usingCSS){
                // determine the translate3d value
                var propValue = slider.settings.mode == 'vertical' ? 'translate3d(0, ' + value + 'px, 0)' : 'translate3d(' + value + 'px, 0, 0)';
                // add the CSS transition-duration
                el.css('-' + slider.cssPrefix + '-transition-duration', duration / 1000 + 's');
                if(type == 'slide'){
                    // set the property value
                    el.css(slider.animProp, propValue);
                    // bind a callback method - executes when CSS transition completes
                    el.bind('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd', function(){
                        // unbind the callback
                        el.unbind('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd');
                        updateAfterSlideTransition();
                    });

                    // this is needed when the "transitionend" event doesn't fire
                    // https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Using_CSS_transitions
                    setTimeout(function () {
                        updateAfterSlideTransition();
                    }, duration);
                }else if(type == 'reset'){
                    el.css(slider.animProp, propValue);
                }else if(type == 'ticker'){
                    // make the transition use 'linear'
                    el.css('-' + slider.cssPrefix + '-transition-timing-function', 'linear');
                    el.css(slider.animProp, propValue);
                    // bind a callback method - executes when CSS transition completes
                    el.bind('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd', function(){
                        // unbind the callback
                        el.unbind('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd');
                        // reset the position
                        setPositionProperty(params['resetValue'], 'reset', 0);
                        // start the loop again
                        tickerLoop();
                    });
                }
            // use JS animate
            }else{
                var animateObj = {};
                animateObj[slider.animProp] = value;
                if(type == 'slide'){
                    el.animate(animateObj, duration, slider.settings.easing, function(){
                        updateAfterSlideTransition();
                    });
                }else if(type == 'reset'){
                    el.css(slider.animProp, value)
                }else if(type == 'ticker'){
                    el.animate(animateObj, speed, 'linear', function(){
                        setPositionProperty(params['resetValue'], 'reset', 0);
                        // run the recursive loop after animation
                        tickerLoop();
                    });
                }
            }
        }

        /**
         * Populates the pager with proper amount of pages
         */
        var populatePager = function(){
            var pagerHtml = '';
            var pagerQty = getPagerQty();
            // loop through each pager item
            for(var i=0; i < pagerQty; i++){
                var linkContent = '';
                // if a buildPager function is supplied, use it to get pager link value, else use index + 1
                if(slider.settings.buildPager && $.isFunction(slider.settings.buildPager)){
                    linkContent = slider.settings.buildPager(i);
                    slider.pagerEl.addClass('bx-custom-pager');
                }else{
                    linkContent = i + 1;
                    slider.pagerEl.addClass('bx-default-pager');
                }
                // var linkContent = slider.settings.buildPager && $.isFunction(slider.settings.buildPager) ? slider.settings.buildPager(i) : i + 1;
                // add the markup to the string
                pagerHtml += '<div class="bx-pager-item"><a href="" data-slide-index="' + i + '" class="bx-pager-link">' + linkContent + '</a></div>';
            };
            // populate the pager element with pager links
            slider.pagerEl.html(pagerHtml);
        }

        /**
         * Appends the pager to the controls element
         */
        var appendPager = function(){
            if(!slider.settings.pagerCustom){
                // create the pager DOM element
                slider.pagerEl = $('<div class="bx-pager" />');
                // if a pager selector was supplied, populate it with the pager
                if(slider.settings.pagerSelector){
                    $(slider.settings.pagerSelector).html(slider.pagerEl);
                // if no pager selector was supplied, add it after the wrapper
                }else{
                    slider.controls.el.addClass('bx-has-pager').append(slider.pagerEl);
                }
                // populate the pager
                populatePager();
            }else{
                slider.pagerEl = $(slider.settings.pagerCustom);
            }
            // assign the pager click binding
            slider.pagerEl.delegate('a', 'click', clickPagerBind);
        }

        /**
         * Appends prev / next controls to the controls element
         */
        var appendControls = function(){
            slider.controls.next = $('<a class="bx-next" href="">' + slider.settings.nextText + '</a>');
            slider.controls.prev = $('<a class="bx-prev" href="">' + slider.settings.prevText + '</a>');
            // bind click actions to the controls
            slider.controls.next.bind('click', clickNextBind);
            slider.controls.prev.bind('click', clickPrevBind);
            // if nextSlector was supplied, populate it
            if(slider.settings.nextSelector){
                $(slider.settings.nextSelector).append(slider.controls.next);
            }
            // if prevSlector was supplied, populate it
            if(slider.settings.prevSelector){
                $(slider.settings.prevSelector).append(slider.controls.prev);
            }
            // if no custom selectors were supplied
            if(!slider.settings.nextSelector && !slider.settings.prevSelector){
                // add the controls to the DOM
                slider.controls.directionEl = $('<div class="bx-controls-direction" />');
                // add the control elements to the directionEl
                slider.controls.directionEl.append(slider.controls.prev).append(slider.controls.next);
                // slider.viewport.append(slider.controls.directionEl);
                slider.controls.el.addClass('bx-has-controls-direction').append(slider.controls.directionEl);
            }
        }

        /**
         * Appends start / stop auto controls to the controls element
         */
        var appendControlsAuto = function(){
            slider.controls.start = $('<div class="bx-controls-auto-item"><a class="bx-start" href="">' + slider.settings.startText + '</a></div>');
            slider.controls.stop = $('<div class="bx-controls-auto-item"><a class="bx-stop" href="">' + slider.settings.stopText + '</a></div>');
            // add the controls to the DOM
            slider.controls.autoEl = $('<div class="bx-controls-auto" />');
            // bind click actions to the controls
            slider.controls.autoEl.delegate('.bx-start', 'click', clickStartBind);
            slider.controls.autoEl.delegate('.bx-stop', 'click', clickStopBind);
            // if autoControlsCombine, insert only the "start" control
            if(slider.settings.autoControlsCombine){
                slider.controls.autoEl.append(slider.controls.start);
            // if autoControlsCombine is false, insert both controls
            }else{
                slider.controls.autoEl.append(slider.controls.start).append(slider.controls.stop);
            }
            // if auto controls selector was supplied, populate it with the controls
            if(slider.settings.autoControlsSelector){
                $(slider.settings.autoControlsSelector).html(slider.controls.autoEl);
            // if auto controls selector was not supplied, add it after the wrapper
            }else{
                slider.controls.el.addClass('bx-has-controls-auto').append(slider.controls.autoEl);
            }
            // update the auto controls
            updateAutoControls(slider.settings.autoStart ? 'stop' : 'start');
        }

        /**
         * Appends image captions to the DOM
         */
        var appendCaptions = function(){
            // cycle through each child
            slider.children.each(function(index){
                // get the image title attribute
                var title = $(this).find('img:first').attr('title');
                // append the caption
                if (title != undefined && ('' + title).length) {
                    $(this).append('<div class="bx-caption"><span>' + title + '</span></div>');
                }
            });
        }

        /**
         * Click next binding
         *
         * @param e (event)
         *  - DOM event object
         */
        var clickNextBind = function(e){
            // if auto show is running, stop it
            if (slider.settings.auto) el.stopAuto();
            el.goToNextSlide();
            e.preventDefault();
        }

        /**
         * Click prev binding
         *
         * @param e (event)
         *  - DOM event object
         */
        var clickPrevBind = function(e){
            // if auto show is running, stop it
            if (slider.settings.auto) el.stopAuto();
            el.goToPrevSlide();
            e.preventDefault();
        }

        /**
         * Click start binding
         *
         * @param e (event)
         *  - DOM event object
         */
        var clickStartBind = function(e){
            el.startAuto();
            e.preventDefault();
        }

        /**
         * Click stop binding
         *
         * @param e (event)
         *  - DOM event object
         */
        var clickStopBind = function(e){
            el.stopAuto();
            e.preventDefault();
        }

        /**
         * Click pager binding
         *
         * @param e (event)
         *  - DOM event object
         */
        var clickPagerBind = function(e){
            // if auto show is running, stop it
            if (slider.settings.auto) el.stopAuto();
            var pagerLink = $(e.currentTarget);
            var pagerIndex = parseInt(pagerLink.attr('data-slide-index'));
            // if clicked pager link is not active, continue with the goToSlide call
            if(pagerIndex != slider.active.index) el.goToSlide(pagerIndex);
            e.preventDefault();
        }

        /**
         * Updates the pager links with an active class
         *
         * @param slideIndex (int)
         *  - index of slide to make active
         */
        var updatePagerActive = function(slideIndex){
            // if "short" pager type
            var len = slider.children.length; // nb of children
            if(slider.settings.pagerType == 'short'){
                if(slider.settings.maxSlides > 1) {
                    len = Math.ceil(slider.children.length/slider.settings.maxSlides);
                }
                slider.pagerEl.html( (slideIndex + 1) + slider.settings.pagerShortSeparator + len);
                return;
            }
            // remove all pager active classes
            slider.pagerEl.find('a').removeClass('active');
            // apply the active class for all pagers
            slider.pagerEl.each(function(i, el) { $(el).find('a').eq(slideIndex).addClass('active'); });
        }

        /**
         * Performs needed actions after a slide transition
         */
        var updateAfterSlideTransition = function(){
            // if infinte loop is true
            if(slider.settings.infiniteLoop){
                var position = '';
                // first slide
                if(slider.active.index == 0){
                    // set the new position
                    position = slider.children.eq(0).position();
                // carousel, last slide
                }else if(slider.active.index == getPagerQty() - 1 && slider.carousel){
                    position = slider.children.eq((getPagerQty() - 1) * getMoveBy()).position();
                // last slide
                }else if(slider.active.index == slider.children.length - 1){
                    position = slider.children.eq(slider.children.length - 1).position();
                }
                if (slider.settings.mode == 'horizontal') { setPositionProperty(-position.left, 'reset', 0);; }
                else if (slider.settings.mode == 'vertical') { setPositionProperty(-position.top, 'reset', 0);; }
            }
            // declare that the transition is complete
            slider.working = false;
            // onSlideAfter callback
            slider.settings.onSlideAfter(slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index);
        }

        /**
         * Updates the auto controls state (either active, or combined switch)
         *
         * @param state (string) "start", "stop"
         *  - the new state of the auto show
         */
        var updateAutoControls = function(state){
            // if autoControlsCombine is true, replace the current control with the new state
            if(slider.settings.autoControlsCombine){
                slider.controls.autoEl.html(slider.controls[state]);
            // if autoControlsCombine is false, apply the "active" class to the appropriate control
            }else{
                slider.controls.autoEl.find('a').removeClass('active');
                slider.controls.autoEl.find('a:not(.bx-' + state + ')').addClass('active');
            }
        }

        /**
         * Updates the direction controls (checks if either should be hidden)
         */
        var updateDirectionControls = function(){
            if(getPagerQty() == 1){
                slider.controls.prev.addClass('disabled');
                slider.controls.next.addClass('disabled');
            }else if(!slider.settings.infiniteLoop && slider.settings.hideControlOnEnd){
                // if first slide
                if (slider.active.index == 0){
                    slider.controls.prev.addClass('disabled');
                    slider.controls.next.removeClass('disabled');
                // if last slide
                }else if(slider.active.index == getPagerQty() - 1){
                    slider.controls.next.addClass('disabled');
                    slider.controls.prev.removeClass('disabled');
                // if any slide in the middle
                }else{
                    slider.controls.prev.removeClass('disabled');
                    slider.controls.next.removeClass('disabled');
                }
            }
        }

        /**
         * Initialzes the auto process
         */
        var initAuto = function(){
            // if autoDelay was supplied, launch the auto show using a setTimeout() call
            if(slider.settings.autoDelay > 0){
                var timeout = setTimeout(el.startAuto, slider.settings.autoDelay);
            // if autoDelay was not supplied, start the auto show normally
            }else{
                el.startAuto();
            }
            // if autoHover is requested
            if(slider.settings.autoHover){
                // on el hover
                el.hover(function(){
                    // if the auto show is currently playing (has an active interval)
                    if(slider.interval){
                        // stop the auto show and pass true agument which will prevent control update
                        el.stopAuto(true);
                        // create a new autoPaused value which will be used by the relative "mouseout" event
                        slider.autoPaused = true;
                    }
                }, function(){
                    // if the autoPaused value was created be the prior "mouseover" event
                    if(slider.autoPaused){
                        // start the auto show and pass true agument which will prevent control update
                        el.startAuto(true);
                        // reset the autoPaused value
                        slider.autoPaused = null;
                    }
                });
            }
        }

        /**
         * Initialzes the ticker process
         */
        var initTicker = function(){
            var startPosition = 0;
            // if autoDirection is "next", append a clone of the entire slider
            if(slider.settings.autoDirection == 'next'){
                el.append(slider.children.clone().addClass('bx-clone'));
            // if autoDirection is "prev", prepend a clone of the entire slider, and set the left position
            }else{
                el.prepend(slider.children.clone().addClass('bx-clone'));
                var position = slider.children.first().position();
                startPosition = slider.settings.mode == 'horizontal' ? -position.left : -position.top;
            }
            setPositionProperty(startPosition, 'reset', 0);
            // do not allow controls in ticker mode
            slider.settings.pager = false;
            slider.settings.controls = false;
            slider.settings.autoControls = false;
            // if autoHover is requested
            if(slider.settings.tickerHover && !slider.usingCSS){
                // on el hover
                slider.viewport.hover(function(){
                    el.stop();
                }, function(){
                    // calculate the total width of children (used to calculate the speed ratio)
                    var totalDimens = 0;
                    slider.children.each(function(index){
                      totalDimens += slider.settings.mode == 'horizontal' ? $(this).outerWidth(true) : $(this).outerHeight(true);
                    });
                    // calculate the speed ratio (used to determine the new speed to finish the paused animation)
                    var ratio = slider.settings.speed / totalDimens;
                    // determine which property to use
                    var property = slider.settings.mode == 'horizontal' ? 'left' : 'top';
                    // calculate the new speed
                    var newSpeed = ratio * (totalDimens - (Math.abs(parseInt(el.css(property)))));
                    tickerLoop(newSpeed);
                });
            }
            // start the ticker loop
            tickerLoop();
        }

        /**
         * Runs a continuous loop, news ticker-style
         */
        var tickerLoop = function(resumeSpeed){
            speed = resumeSpeed ? resumeSpeed : slider.settings.speed;
            var position = {left: 0, top: 0};
            var reset = {left: 0, top: 0};
            // if "next" animate left position to last child, then reset left to 0
            if(slider.settings.autoDirection == 'next'){
                position = el.find('.bx-clone').first().position();
            // if "prev" animate left position to 0, then reset left to first non-clone child
            }else{
                reset = slider.children.first().position();
            }
            var animateProperty = slider.settings.mode == 'horizontal' ? -position.left : -position.top;
            var resetValue = slider.settings.mode == 'horizontal' ? -reset.left : -reset.top;
            var params = {resetValue: resetValue};
            setPositionProperty(animateProperty, 'ticker', speed, params);
        }

        /**
         * Initializes touch events
         */
        var initTouch = function(){
            // initialize object to contain all touch values
            slider.touch = {
                start: {x: 0, y: 0},
                end: {x: 0, y: 0}
            }
            slider.viewport.bind('touchstart', onTouchStart);
        }

        /**
         * Event handler for "touchstart"
         *
         * @param e (event)
         *  - DOM event object
         */
        var onTouchStart = function(e){
            if(slider.working){
                e.preventDefault();
            }else{
                // record the original position when touch starts
                slider.touch.originalPos = el.position();
                var orig = e.originalEvent;
                // record the starting touch x, y coordinates
                slider.touch.start.x = orig.changedTouches[0].pageX;
                slider.touch.start.y = orig.changedTouches[0].pageY;
                // bind a "touchmove" event to the viewport
                slider.viewport.bind('touchmove', onTouchMove);
                // bind a "touchend" event to the viewport
                slider.viewport.bind('touchend', onTouchEnd);
            }
        }

        /**
         * Event handler for "touchmove"
         *
         * @param e (event)
         *  - DOM event object
         */
        var onTouchMove = function(e){
            var orig = e.originalEvent;
            // if scrolling on y axis, do not prevent default
            var xMovement = Math.abs(orig.changedTouches[0].pageX - slider.touch.start.x);
            var yMovement = Math.abs(orig.changedTouches[0].pageY - slider.touch.start.y);
            // x axis swipe
            if((xMovement * 3) > yMovement && slider.settings.preventDefaultSwipeX){
                e.preventDefault();
            // y axis swipe
            }else if((yMovement * 3) > xMovement && slider.settings.preventDefaultSwipeY){
                e.preventDefault();
            }
            if(slider.settings.mode != 'fade' && slider.settings.oneToOneTouch){
                var value = 0;
                // if horizontal, drag along x axis
                if(slider.settings.mode == 'horizontal'){
                    var change = orig.changedTouches[0].pageX - slider.touch.start.x;
                    value = slider.touch.originalPos.left + change;
                // if vertical, drag along y axis
                }else{
                    var change = orig.changedTouches[0].pageY - slider.touch.start.y;
                    value = slider.touch.originalPos.top + change;
                }
                setPositionProperty(value, 'reset', 0);
            }
        }

        /**
         * Event handler for "touchend"
         *
         * @param e (event)
         *  - DOM event object
         */
        var onTouchEnd = function(e){
            slider.viewport.unbind('touchmove', onTouchMove);
            var orig = e.originalEvent;
            var value = 0;
            // record end x, y positions
            slider.touch.end.x = orig.changedTouches[0].pageX;
            slider.touch.end.y = orig.changedTouches[0].pageY;
            // if fade mode, check if absolute x distance clears the threshold
            if(slider.settings.mode == 'fade'){
                var distance = Math.abs(slider.touch.start.x - slider.touch.end.x);
                if(distance >= slider.settings.swipeThreshold){
                    slider.touch.start.x > slider.touch.end.x ? el.goToNextSlide() : el.goToPrevSlide();
                    el.stopAuto();
                }
            // not fade mode
            }else{
                var distance = 0;
                // calculate distance and el's animate property
                if(slider.settings.mode == 'horizontal'){
                    distance = slider.touch.end.x - slider.touch.start.x;
                    value = slider.touch.originalPos.left;
                }else{
                    distance = slider.touch.end.y - slider.touch.start.y;
                    value = slider.touch.originalPos.top;
                }
                // if not infinite loop and first / last slide, do not attempt a slide transition
                if(!slider.settings.infiniteLoop && ((slider.active.index == 0 && distance > 0) || (slider.active.last && distance < 0))){
                    setPositionProperty(value, 'reset', 200);
                }else{
                    // check if distance clears threshold
                    if(Math.abs(distance) >= slider.settings.swipeThreshold){
                        distance < 0 ? el.goToNextSlide() : el.goToPrevSlide();
                        el.stopAuto();
                    }else{
                        // el.animate(property, 200);
                        setPositionProperty(value, 'reset', 200);
                    }
                }
            }
            slider.viewport.unbind('touchend', onTouchEnd);
        }

        /**
         * Window resize event callback
         */
        var resizeWindow = function(e){
            // get the new window dimens (again, thank you IE)
            var windowWidthNew = $(window).width();
            var windowHeightNew = $(window).height();
            // make sure that it is a true window resize
            // *we must check this because our dinosaur friend IE fires a window resize event when certain DOM elements
            // are resized. Can you just die already?*
            if(windowWidth != windowWidthNew || windowHeight != windowHeightNew){
                // set the new window dimens
                windowWidth = windowWidthNew;
                windowHeight = windowHeightNew;
                // update all dynamic elements
                el.redrawSlider();
            }
        }

        /**
         * ===================================================================================
         * = PUBLIC FUNCTIONS
         * ===================================================================================
         */

        /**
         * Performs slide transition to the specified slide
         *
         * @param slideIndex (int)
         *  - the destination slide's index (zero-based)
         *
         * @param direction (string)
         *  - INTERNAL USE ONLY - the direction of travel ("prev" / "next")
         */
        el.goToSlide = function(slideIndex, direction){
            // if plugin is currently in motion, ignore request
            if(slider.working || slider.active.index == slideIndex) return;
            // declare that plugin is in motion
            slider.working = true;
            // store the old index
            slider.oldIndex = slider.active.index;
            // if slideIndex is less than zero, set active index to last child (this happens during infinite loop)
            if(slideIndex < 0){
                slider.active.index = getPagerQty() - 1;
            // if slideIndex is greater than children length, set active index to 0 (this happens during infinite loop)
            }else if(slideIndex >= getPagerQty()){
                slider.active.index = 0;
            // set active index to requested slide
            }else{
                slider.active.index = slideIndex;
            }
            // onSlideBefore, onSlideNext, onSlidePrev callbacks
            slider.settings.onSlideBefore(slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index);
            if(direction == 'next'){
                slider.settings.onSlideNext(slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index);
            }else if(direction == 'prev'){
                slider.settings.onSlidePrev(slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index);
            }
            // check if last slide
            slider.active.last = slider.active.index >= getPagerQty() - 1;
            // update the pager with active class
            if(slider.settings.pager) updatePagerActive(slider.active.index);
            // // check for direction control update
            if(slider.settings.controls) updateDirectionControls();
            // if slider is set to mode: "fade"
            if(slider.settings.mode == 'fade'){
                // if adaptiveHeight is true and next height is different from current height, animate to the new height
                if(slider.settings.adaptiveHeight && slider.viewport.height() != getViewportHeight()){
                    slider.viewport.animate({height: getViewportHeight()}, slider.settings.adaptiveHeightSpeed);
                }
                // fade out the visible child and reset its z-index value
                slider.children.filter(':visible').fadeOut(slider.settings.speed).css({zIndex: 0});
                // fade in the newly requested slide
                slider.children.eq(slider.active.index).css('zIndex', 51).fadeIn(slider.settings.speed, function(){
                    $(this).css('zIndex', 50);
                    updateAfterSlideTransition();
                });
            // slider mode is not "fade"
            }else{
                // if adaptiveHeight is true and next height is different from current height, animate to the new height
                if(slider.settings.adaptiveHeight && slider.viewport.height() != getViewportHeight()){
                    slider.viewport.animate({height: getViewportHeight()}, slider.settings.adaptiveHeightSpeed);
                }
                var moveBy = 0;
                var position = {left: 0, top: 0};
                // if carousel and not infinite loop
                if(!slider.settings.infiniteLoop && slider.carousel && slider.active.last){
                    if(slider.settings.mode == 'horizontal'){
                        // get the last child position
                        var lastChild = slider.children.eq(slider.children.length - 1);
                        position = lastChild.position();
                        // calculate the position of the last slide
                        moveBy = slider.viewport.width() - lastChild.outerWidth();
                    }else{
                        // get last showing index position
                        var lastShowingIndex = slider.children.length - slider.settings.minSlides;
                        position = slider.children.eq(lastShowingIndex).position();
                    }
                    // horizontal carousel, going previous while on first slide (infiniteLoop mode)
                }else if(slider.carousel && slider.active.last && direction == 'prev'){
                    // get the last child position
                    var eq = slider.settings.moveSlides == 1 ? slider.settings.maxSlides - getMoveBy() : ((getPagerQty() - 1) * getMoveBy()) - (slider.children.length - slider.settings.maxSlides);
                    var lastChild = el.children('.bx-clone').eq(eq);
                    position = lastChild.position();
                // if infinite loop and "Next" is clicked on the last slide
                }else if(direction == 'next' && slider.active.index == 0){
                    // get the last clone position
                    position = el.find('> .bx-clone').eq(slider.settings.maxSlides).position();
                    slider.active.last = false;
                // normal non-zero requests
                }else if(slideIndex >= 0){
                    var requestEl = slideIndex * getMoveBy();
                    position = slider.children.eq(requestEl).position();
                }

                /* If the position doesn't exist
                 * (e.g. if you destroy the slider on a next click),
                 * it doesn't throw an error.
                 */
                if ("undefined" !== typeof(position)) {
                    var value = slider.settings.mode == 'horizontal' ? -(position.left - moveBy) : -position.top;
                    // plugin values to be animated
                    setPositionProperty(value, 'slide', slider.settings.speed);
                }
            }
        }

        /**
         * Transitions to the next slide in the show
         */
        el.goToNextSlide = function(){
            // if infiniteLoop is false and last page is showing, disregard call
            if (!slider.settings.infiniteLoop && slider.active.last) return;
            var pagerIndex = parseInt(slider.active.index) + 1;
            el.goToSlide(pagerIndex, 'next');
        }

        /**
         * Transitions to the prev slide in the show
         */
        el.goToPrevSlide = function(){
            // if infiniteLoop is false and last page is showing, disregard call
            if (!slider.settings.infiniteLoop && slider.active.index == 0) return;
            var pagerIndex = parseInt(slider.active.index) - 1;
            el.goToSlide(pagerIndex, 'prev');
        }

        /**
         * Starts the auto show
         *
         * @param preventControlUpdate (boolean)
         *  - if true, auto controls state will not be updated
         */
        el.startAuto = function(preventControlUpdate){
            // if an interval already exists, disregard call
            if(slider.interval) return;
            // create an interval
            slider.interval = setInterval(function(){
                slider.settings.autoDirection == 'next' ? el.goToNextSlide() : el.goToPrevSlide();
            }, slider.settings.pause);
            // if auto controls are displayed and preventControlUpdate is not true
            if (slider.settings.autoControls && preventControlUpdate != true) updateAutoControls('stop');
        }

        /**
         * Stops the auto show
         *
         * @param preventControlUpdate (boolean)
         *  - if true, auto controls state will not be updated
         */
        el.stopAuto = function(preventControlUpdate){
            // if no interval exists, disregard call
            if(!slider.interval) return;
            // clear the interval
            clearInterval(slider.interval);
            slider.interval = null;
            // if auto controls are displayed and preventControlUpdate is not true
            if (slider.settings.autoControls && preventControlUpdate != true) updateAutoControls('start');
        }

        /**
         * Returns current slide index (zero-based)
         */
        el.getCurrentSlide = function(){
            return slider.active.index;
        }

        /**
         * Returns number of slides in show
         */
        el.getSlideCount = function(){
            return slider.children.length;
        }

        /**
         * Update all dynamic slider elements
         */
        el.redrawSlider = function(){
            // resize all children in ratio to new screen size
            slider.children.add(el.find('.bx-clone')).outerWidth(getSlideWidth());
            // adjust the height
            slider.viewport.css('height', getViewportHeight());
            // update the slide position
            if(!slider.settings.ticker) setSlidePosition();
            // if active.last was true before the screen resize, we want
            // to keep it last no matter what screen size we end on
            if (slider.active.last) slider.active.index = getPagerQty() - 1;
            // if the active index (page) no longer exists due to the resize, simply set the index as last
            if (slider.active.index >= getPagerQty()) slider.active.last = true;
            // if a pager is being displayed and a custom pager is not being used, update it
            if(slider.settings.pager && !slider.settings.pagerCustom){
                populatePager();
                updatePagerActive(slider.active.index);
            }
        }

        /**
         * Destroy the current instance of the slider (revert everything back to original state)
         */
        el.destroySlider = function(){
            // don't do anything if slider has already been destroyed
            if(!slider.initialized) return;
            slider.initialized = false;
            $('.bx-clone', this).remove();
            slider.children.each(function() {
                $(this).data("origStyle") != undefined ? $(this).attr("style", $(this).data("origStyle")) : $(this).removeAttr('style');
            });
            $(this).data("origStyle") != undefined ? this.attr("style", $(this).data("origStyle")) : $(this).removeAttr('style');
            $(this).unwrap().unwrap();
            if(slider.controls.el) slider.controls.el.remove();
            if(slider.controls.next) slider.controls.next.remove();
            if(slider.controls.prev) slider.controls.prev.remove();
            if(slider.pagerEl) slider.pagerEl.remove();
            $('.bx-caption', this).remove();
            if(slider.controls.autoEl) slider.controls.autoEl.remove();
            clearInterval(slider.interval);
            if(slider.settings.responsive) $(window).unbind('resize', resizeWindow);
        }

        /**
         * Reload the slider (revert all DOM changes, and re-initialize)
         */
        el.reloadSlider = function(settings){
            if (settings != undefined) options = settings;
            el.destroySlider();
            init();
        }

        init();

        // returns the current jQuery object
        return this;
    }

})(jQuery);
;(function(win){var $=win.jQuery,PB=win.PB||{};function PBSlider($elem,options){var _defaultOptions={controls:false,pager:false,speed:250,autoHover:true,adaptiveHeight:false},_pluginOptions=$.extend(_defaultOptions,$elem.data(),options),_libraryInstance=$elem.bxSlider(_pluginOptions);this.next=function(){_libraryInstance.goToNextSlide();};this.prev=function(){_libraryInstance.goToPrevSlide();};this.goTo=function(index){_libraryInstance.goToSlide(index);};this.stop=function(){_libraryInstance.stopAuto();};this.play=function(){_libraryInstance.startAuto();};this.getCurrentSlide=function(){return _libraryInstance.getCurrentSlide();};this.getSlideCount=function(){return _libraryInstance.getSlideCount();};this.destroySlider=function(){return _libraryInstance.destroySlider();};}
PB.PBSlider=PBSlider;win.PB=PB;}(window));
;(function(win){'use strict';var $=win.jQuery,PB=win.PB,THM=win.THM,PBSlider=PB.PBSlider;function initslideshow(){var $=jQuery,PB=win.PB,PBSlider=win.PB.PBSlider,$showcaseSlideshow=$('.js-pb-slider-wrapper'),$thumbs=$('.js-pb-thumbs-item'),currSlide=0,showcaseSliderInstance;var showcaseSliderDefaultOptions={auto:5000,pause:4000,speed:500,mode:'fade',onSlideAfter:function(){currSlide=showcaseSliderInstance.getCurrentSlide();$thumbs.removeClass('is-selected');$thumbs.eq(currSlide).addClass('is-selected');}};showcaseSliderInstance=new PBSlider($showcaseSlideshow,showcaseSliderDefaultOptions);$thumbs.eq(0).addClass('is-selected');$thumbs.on('click',function(){$thumbs.removeClass('is-selected');$thumbs.eq(currSlide).addClass('is-selected');showcaseSliderInstance.goTo($(this).index());});}
function initCoverpanel(){var $coverpanel,sliderInstance;$.each($('.js-coverpanel'),function(){$coverpanel=$(this);sliderInstance=new PBSlider($coverpanel,{auto:true,pause:$coverpanel.data('interval')||3000,speed:$coverpanel.data('transition')||250,pager:true,pagerCustom:'.coverpanel-bullets',mode:'fade'});});}
function removeStrategyLinks(){$(".nav-tabs a").click(function(event){event.preventDefault();});}
var CraveJs={domain:location.hostname,currentPage:[],BuildPage:function(){var url=this.currentPage;if(!url||!url.length){var _urlParts=this.currentPage=location.href.replace(this.domain+'/','').replace(this.domain,'').replace('http://','').replace(location.hash,'').split('/');if(_urlParts.length){url=_urlParts;}
if(!url){url=['home'];}}
switch(url[0]){case'careers':this.BuildPageCareers();break;case'contact':this.BuildPageContact();break;case'publishers':this.BuildPagePublishers();break;case'':case'home':this.BuildPageHome();break;case'showcase':this.BuildPageShowcase();break;default:this.BuildDefaultPage();break;}
this.initDropdown();},initDropdown:function(){var dd=$(".dropdown");var selected=dd.find('.selected');var options=dd.find('.options');var _timeout=null;var _interval=null;options.toggle();var _toggle=function(){_timeout=3;clearInterval(_interval);_interval=setInterval(function(){_timeout--;if(_timeout===0){clearInterval(_interval);options.toggle();}},100);};selected.css('cursor','pointer');selected.bind('click',function(){options.toggle();});dd.bind('mouseover',function(){clearInterval(_interval);});dd.bind('mouseout',function(){if(options.is(":visible")){_toggle();}});},BuildDefaultPage:function(){},BuildPageHome:function(){var _this=this;_this.InitCreativeStrategy();},BuildPageCareers:function(){jQuery('.demo_reel_trigger').click(function(){jQuery('.demo_reel_container').show().css('position','relative');jQuery(this).hide();});},BuildPageContact:function(){jQuery('table').attr('border','0');},BuildPagePublishers:function(){var _this=this;var subpage='';if(this.currentPage&&this.currentPage.length>1){subpage=this.currentPage[1];}
return _this;},BuildPageShowcase:function(){var _this=this;var subpage='';if(this.currentPage&&this.currentPage.length>1){subpage=this.currentPage[1];}
if(subpage==='item'){return this.BuildPageShowcaseItem();}
return _this;},BuildPageShowcaseItem:function(){var _this=this;var gallerySlides=jQuery('.gallery-carousel li');if(gallerySlides&&gallerySlides.length&&gallerySlides.length){this.InitSlider('.gallery-carousel',{fx:'fade',speed:'fast',timeout:5000,pager:'.gallery-carousel-nav',pagerAnchorBuilder:function(idx,slide){return'.gallery-carousel-nav li:eq('+idx+') > *';}});}
return _this;},InitPageShiv:function(){var _this=this;var currentPage=location.href.replace(_this.domain+'/','').replace(_this.domain,'').replace('http://','').replace(location.hash,'').split('/');_this.currentPage=currentPage.length?currentPage:['home'];},InitSlider:function(selector,args){jQuery(selector).cycle(args);},InitCreativeStrategy:function(){jQuery('.crave-strategy .nav.nav-tabs li').click(function(e){if(!jQuery(this).hasClass('active')){e.preventDefault();jQuery('.crave-strategy .nav.nav-tabs li').removeClass('active');var targetClass=this.className;jQuery(this).addClass('active');jQuery('.crave-strategy .tab-content .tab-pane.active').fadeOut('fast').removeClass('active');jQuery('.crave-strategy .tab-content .tab-pane#'+targetClass).fadeIn('fast').addClass('active');}});jQuery('.strategies').freeslide({slides:'.strategies .strategy',afterSlide:function(activeSlide,allSlides){var content=jQuery(activeSlide).find('.description').html();jQuery('.tab-pane.active#dflt .creative-summary').html(content);for(var a=0;a<allSlides.length;a++){var elem=allSlides[a];var index=parseInt(jQuery(elem).attr('data-freeslide-pos'),10);var strategyType=jQuery(elem).attr('data-strategy');var className='first';switch(index){case 2:className='second';break;case 3:className='third';break;case 4:className='fourth';break;case 5:className='fifth';break;case 6:className='sixth';break;}
jQuery(elem).attr('class','strategy'+strategyType+' '+className);}}});},};$(function(){CraveJs.InitPageShiv();CraveJs.BuildPage();initCoverpanel();initslideshow();removeStrategyLinks();});}(window));
;/* Copyright (c) 2011 Brandon Aaron (http://brandonaaron.net)
 * Licensed under the MIT License (LICENSE.txt).
 *
 * Thanks to: http://adomas.org/javascript-mouse-wheel/ for some pointers.
 * Thanks to: Mathias Bank(http://www.mathias-bank.de) for a scope bug fix.
 * Thanks to: Seamus Leahy for adding deltaX and deltaY
 *
 * Version: 3.0.6
 * 
 * Requires: 1.2.2+
 */
(function($){var types=['DOMMouseScroll','mousewheel'];if($.event.fixHooks){for(var i=types.length;i;){$.event.fixHooks[types[--i]]=$.event.mouseHooks;}}
$.event.special.mousewheel={setup:function(){if(this.addEventListener){for(var i=types.length;i;){this.addEventListener(types[--i],handler,false);}}else{this.onmousewheel=handler;}},teardown:function(){if(this.removeEventListener){for(var i=types.length;i;){this.removeEventListener(types[--i],handler,false);}}else{this.onmousewheel=null;}}};$.fn.extend({mousewheel:function(fn){return fn?this.bind("mousewheel",fn):this.trigger("mousewheel");},unmousewheel:function(fn){return this.unbind("mousewheel",fn);}});function handler(event){var orgEvent=event||window.event,args=[].slice.call(arguments,1),delta=0,returnValue=true,deltaX=0,deltaY=0;event=$.event.fix(orgEvent);event.type="mousewheel";if(orgEvent.wheelDelta){delta=orgEvent.wheelDelta/120;}
if(orgEvent.detail){delta=-orgEvent.detail/3;}
deltaY=delta;if(orgEvent.axis!==undefined&&orgEvent.axis===orgEvent.HORIZONTAL_AXIS){deltaY=0;deltaX=-1*delta;}
if(orgEvent.wheelDeltaY!==undefined){deltaY=orgEvent.wheelDeltaY/120;}
if(orgEvent.wheelDeltaX!==undefined){deltaX=-1*orgEvent.wheelDeltaX/120;}
args.unshift(event,delta,deltaX,deltaY);return($.event.dispatch||$.event.handle).apply(this,args);}})(jQuery);
;/*
 * jScrollPane - v2.0.0beta12 - 2012-09-27
 * http://jscrollpane.kelvinluck.com/
 *
 * Copyright (c) 2010 Kelvin Luck
 * Dual licensed under the MIT or GPL licenses.
 */
(function(b,a,c){b.fn.jScrollPane=function(e){function d(D,O){var ay,Q=this,Y,aj,v,al,T,Z,y,q,az,aE,au,i,I,h,j,aa,U,ap,X,t,A,aq,af,am,G,l,at,ax,x,av,aH,f,L,ai=true,P=true,aG=false,k=false,ao=D.clone(false,false).empty(),ac=b.fn.mwheelIntent?"mwheelIntent.jsp":"mousewheel.jsp";aH=D.css("paddingTop")+" "+D.css("paddingRight")+" "+D.css("paddingBottom")+" "+D.css("paddingLeft");f=(parseInt(D.css("paddingLeft"),10)||0)+(parseInt(D.css("paddingRight"),10)||0);function ar(aQ){var aL,aN,aM,aJ,aI,aP,aO=false,aK=false;ay=aQ;if(Y===c){aI=D.scrollTop();aP=D.scrollLeft();D.css({overflow:"hidden",padding:0});aj=D.innerWidth()+f;v=D.innerHeight();D.width(aj);Y=b('<div class="jspPane" />').css("padding",aH).append(D.children());al=b('<div class="jspContainer" />').css({width:aj+"px",height:v+"px"}).append(Y).appendTo(D)}else{D.css("width","");aO=ay.stickToBottom&&K();aK=ay.stickToRight&&B();aJ=D.innerWidth()+f!=aj||D.outerHeight()!=v;if(aJ){aj=D.innerWidth()+f;v=D.innerHeight();al.css({width:aj+"px",height:v+"px"})}if(!aJ&&L==T&&Y.outerHeight()==Z){D.width(aj);return}L=T;Y.css("width","");D.width(aj);al.find(">.jspVerticalBar,>.jspHorizontalBar").remove().end()}Y.css("overflow","auto");if(aQ.contentWidth){T=aQ.contentWidth}else{T=Y[0].scrollWidth}Z=Y[0].scrollHeight;Y.css("overflow","");y=T/aj;q=Z/v;az=q>1;aE=y>1;if(!(aE||az)){D.removeClass("jspScrollable");Y.css({top:0,width:al.width()-f});n();E();R();w()}else{D.addClass("jspScrollable");aL=ay.maintainPosition&&(I||aa);if(aL){aN=aC();aM=aA()}aF();z();F();if(aL){N(aK?(T-aj):aN,false);M(aO?(Z-v):aM,false)}J();ag();an();if(ay.enableKeyboardNavigation){S()}if(ay.clickOnTrack){p()}C();if(ay.hijackInternalLinks){m()}}if(ay.autoReinitialise&&!av){av=setInterval(function(){ar(ay)},ay.autoReinitialiseDelay)}else{if(!ay.autoReinitialise&&av){clearInterval(av)}}aI&&D.scrollTop(0)&&M(aI,false);aP&&D.scrollLeft(0)&&N(aP,false);D.trigger("jsp-initialised",[aE||az])}function aF(){if(az){al.append(b('<div class="jspVerticalBar" />').append(b('<div class="jspCap jspCapTop" />'),b('<div class="jspTrack" />').append(b('<div class="jspDrag" />').append(b('<div class="jspDragTop" />'),b('<div class="jspDragBottom" />'))),b('<div class="jspCap jspCapBottom" />')));U=al.find(">.jspVerticalBar");ap=U.find(">.jspTrack");au=ap.find(">.jspDrag");if(ay.showArrows){aq=b('<a class="jspArrow jspArrowUp" />').bind("mousedown.jsp",aD(0,-1)).bind("click.jsp",aB);af=b('<a class="jspArrow jspArrowDown" />').bind("mousedown.jsp",aD(0,1)).bind("click.jsp",aB);if(ay.arrowScrollOnHover){aq.bind("mouseover.jsp",aD(0,-1,aq));af.bind("mouseover.jsp",aD(0,1,af))}ak(ap,ay.verticalArrowPositions,aq,af)}t=v;al.find(">.jspVerticalBar>.jspCap:visible,>.jspVerticalBar>.jspArrow").each(function(){t-=b(this).outerHeight()});au.hover(function(){au.addClass("jspHover")},function(){au.removeClass("jspHover")}).bind("mousedown.jsp",function(aI){b("html").bind("dragstart.jsp selectstart.jsp",aB);au.addClass("jspActive");var s=aI.pageY-au.position().top;b("html").bind("mousemove.jsp",function(aJ){V(aJ.pageY-s,false)}).bind("mouseup.jsp mouseleave.jsp",aw);return false});o()}}function o(){ap.height(t+"px");I=0;X=ay.verticalGutter+ap.outerWidth();Y.width(aj-X-f);try{if(U.position().left===0){Y.css("margin-left",X+"px")}}catch(s){}}function z(){if(aE){al.append(b('<div class="jspHorizontalBar" />').append(b('<div class="jspCap jspCapLeft" />'),b('<div class="jspTrack" />').append(b('<div class="jspDrag" />').append(b('<div class="jspDragLeft" />'),b('<div class="jspDragRight" />'))),b('<div class="jspCap jspCapRight" />')));am=al.find(">.jspHorizontalBar");G=am.find(">.jspTrack");h=G.find(">.jspDrag");if(ay.showArrows){ax=b('<a class="jspArrow jspArrowLeft" />').bind("mousedown.jsp",aD(-1,0)).bind("click.jsp",aB);x=b('<a class="jspArrow jspArrowRight" />').bind("mousedown.jsp",aD(1,0)).bind("click.jsp",aB);
if(ay.arrowScrollOnHover){ax.bind("mouseover.jsp",aD(-1,0,ax));x.bind("mouseover.jsp",aD(1,0,x))}ak(G,ay.horizontalArrowPositions,ax,x)}h.hover(function(){h.addClass("jspHover")},function(){h.removeClass("jspHover")}).bind("mousedown.jsp",function(aI){b("html").bind("dragstart.jsp selectstart.jsp",aB);h.addClass("jspActive");var s=aI.pageX-h.position().left;b("html").bind("mousemove.jsp",function(aJ){W(aJ.pageX-s,false)}).bind("mouseup.jsp mouseleave.jsp",aw);return false});l=al.innerWidth();ah()}}function ah(){al.find(">.jspHorizontalBar>.jspCap:visible,>.jspHorizontalBar>.jspArrow").each(function(){l-=b(this).outerWidth()});G.width(l+"px");aa=0}function F(){if(aE&&az){var aI=G.outerHeight(),s=ap.outerWidth();t-=aI;b(am).find(">.jspCap:visible,>.jspArrow").each(function(){l+=b(this).outerWidth()});l-=s;v-=s;aj-=aI;G.parent().append(b('<div class="jspCorner" />').css("width",aI+"px"));o();ah()}if(aE){Y.width((al.outerWidth()-f)+"px")}Z=Y.outerHeight();q=Z/v;if(aE){at=Math.ceil(1/y*l);if(at>ay.horizontalDragMaxWidth){at=ay.horizontalDragMaxWidth}else{if(at<ay.horizontalDragMinWidth){at=ay.horizontalDragMinWidth}}h.width(at+"px");j=l-at;ae(aa)}if(az){A=Math.ceil(1/q*t);if(A>ay.verticalDragMaxHeight){A=ay.verticalDragMaxHeight}else{if(A<ay.verticalDragMinHeight){A=ay.verticalDragMinHeight}}au.height(A+"px");i=t-A;ad(I)}}function ak(aJ,aL,aI,s){var aN="before",aK="after",aM;if(aL=="os"){aL=/Mac/.test(navigator.platform)?"after":"split"}if(aL==aN){aK=aL}else{if(aL==aK){aN=aL;aM=aI;aI=s;s=aM}}aJ[aN](aI)[aK](s)}function aD(aI,s,aJ){return function(){H(aI,s,this,aJ);this.blur();return false}}function H(aL,aK,aO,aN){aO=b(aO).addClass("jspActive");var aM,aJ,aI=true,s=function(){if(aL!==0){Q.scrollByX(aL*ay.arrowButtonSpeed)}if(aK!==0){Q.scrollByY(aK*ay.arrowButtonSpeed)}aJ=setTimeout(s,aI?ay.initialDelay:ay.arrowRepeatFreq);aI=false};s();aM=aN?"mouseout.jsp":"mouseup.jsp";aN=aN||b("html");aN.bind(aM,function(){aO.removeClass("jspActive");aJ&&clearTimeout(aJ);aJ=null;aN.unbind(aM)})}function p(){w();if(az){ap.bind("mousedown.jsp",function(aN){if(aN.originalTarget===c||aN.originalTarget==aN.currentTarget){var aL=b(this),aO=aL.offset(),aM=aN.pageY-aO.top-I,aJ,aI=true,s=function(){var aR=aL.offset(),aS=aN.pageY-aR.top-A/2,aP=v*ay.scrollPagePercent,aQ=i*aP/(Z-v);if(aM<0){if(I-aQ>aS){Q.scrollByY(-aP)}else{V(aS)}}else{if(aM>0){if(I+aQ<aS){Q.scrollByY(aP)}else{V(aS)}}else{aK();return}}aJ=setTimeout(s,aI?ay.initialDelay:ay.trackClickRepeatFreq);aI=false},aK=function(){aJ&&clearTimeout(aJ);aJ=null;b(document).unbind("mouseup.jsp",aK)};s();b(document).bind("mouseup.jsp",aK);return false}})}if(aE){G.bind("mousedown.jsp",function(aN){if(aN.originalTarget===c||aN.originalTarget==aN.currentTarget){var aL=b(this),aO=aL.offset(),aM=aN.pageX-aO.left-aa,aJ,aI=true,s=function(){var aR=aL.offset(),aS=aN.pageX-aR.left-at/2,aP=aj*ay.scrollPagePercent,aQ=j*aP/(T-aj);if(aM<0){if(aa-aQ>aS){Q.scrollByX(-aP)}else{W(aS)}}else{if(aM>0){if(aa+aQ<aS){Q.scrollByX(aP)}else{W(aS)}}else{aK();return}}aJ=setTimeout(s,aI?ay.initialDelay:ay.trackClickRepeatFreq);aI=false},aK=function(){aJ&&clearTimeout(aJ);aJ=null;b(document).unbind("mouseup.jsp",aK)};s();b(document).bind("mouseup.jsp",aK);return false}})}}function w(){if(G){G.unbind("mousedown.jsp")}if(ap){ap.unbind("mousedown.jsp")}}function aw(){b("html").unbind("dragstart.jsp selectstart.jsp mousemove.jsp mouseup.jsp mouseleave.jsp");if(au){au.removeClass("jspActive")}if(h){h.removeClass("jspActive")}}function V(s,aI){if(!az){return}if(s<0){s=0}else{if(s>i){s=i}}if(aI===c){aI=ay.animateScroll}if(aI){Q.animate(au,"top",s,ad)}else{au.css("top",s);ad(s)}}function ad(aI){if(aI===c){aI=au.position().top}al.scrollTop(0);I=aI;var aL=I===0,aJ=I==i,aK=aI/i,s=-aK*(Z-v);if(ai!=aL||aG!=aJ){ai=aL;aG=aJ;D.trigger("jsp-arrow-change",[ai,aG,P,k])}u(aL,aJ);Y.css("top",s);D.trigger("jsp-scroll-y",[-s,aL,aJ]).trigger("scroll")}function W(aI,s){if(!aE){return}if(aI<0){aI=0}else{if(aI>j){aI=j}}if(s===c){s=ay.animateScroll}if(s){Q.animate(h,"left",aI,ae)
}else{h.css("left",aI);ae(aI)}}function ae(aI){if(aI===c){aI=h.position().left}al.scrollTop(0);aa=aI;var aL=aa===0,aK=aa==j,aJ=aI/j,s=-aJ*(T-aj);if(P!=aL||k!=aK){P=aL;k=aK;D.trigger("jsp-arrow-change",[ai,aG,P,k])}r(aL,aK);Y.css("left",s);D.trigger("jsp-scroll-x",[-s,aL,aK]).trigger("scroll")}function u(aI,s){if(ay.showArrows){aq[aI?"addClass":"removeClass"]("jspDisabled");af[s?"addClass":"removeClass"]("jspDisabled")}}function r(aI,s){if(ay.showArrows){ax[aI?"addClass":"removeClass"]("jspDisabled");x[s?"addClass":"removeClass"]("jspDisabled")}}function M(s,aI){var aJ=s/(Z-v);V(aJ*i,aI)}function N(aI,s){var aJ=aI/(T-aj);W(aJ*j,s)}function ab(aV,aQ,aJ){var aN,aK,aL,s=0,aU=0,aI,aP,aO,aS,aR,aT;try{aN=b(aV)}catch(aM){return}aK=aN.outerHeight();aL=aN.outerWidth();al.scrollTop(0);al.scrollLeft(0);while(!aN.is(".jspPane")){s+=aN.position().top;aU+=aN.position().left;aN=aN.offsetParent();if(/^body|html$/i.test(aN[0].nodeName)){return}}aI=aA();aO=aI+v;if(s<aI||aQ){aR=s-ay.verticalGutter}else{if(s+aK>aO){aR=s-v+aK+ay.verticalGutter}}if(aR){M(aR,aJ)}aP=aC();aS=aP+aj;if(aU<aP||aQ){aT=aU-ay.horizontalGutter}else{if(aU+aL>aS){aT=aU-aj+aL+ay.horizontalGutter}}if(aT){N(aT,aJ)}}function aC(){return -Y.position().left}function aA(){return -Y.position().top}function K(){var s=Z-v;return(s>20)&&(s-aA()<10)}function B(){var s=T-aj;return(s>20)&&(s-aC()<10)}function ag(){al.unbind(ac).bind(ac,function(aL,aM,aK,aI){var aJ=aa,s=I;Q.scrollBy(aK*ay.mouseWheelSpeed,-aI*ay.mouseWheelSpeed,false);return aJ==aa&&s==I})}function n(){al.unbind(ac)}function aB(){return false}function J(){Y.find(":input,a").unbind("focus.jsp").bind("focus.jsp",function(s){ab(s.target,false)})}function E(){Y.find(":input,a").unbind("focus.jsp")}function S(){var s,aI,aK=[];aE&&aK.push(am[0]);az&&aK.push(U[0]);Y.focus(function(){D.focus()});D.attr("tabindex",0).unbind("keydown.jsp keypress.jsp").bind("keydown.jsp",function(aN){if(aN.target!==this&&!(aK.length&&b(aN.target).closest(aK).length)){return}var aM=aa,aL=I;switch(aN.keyCode){case 40:case 38:case 34:case 32:case 33:case 39:case 37:s=aN.keyCode;aJ();break;case 35:M(Z-v);s=null;break;case 36:M(0);s=null;break}aI=aN.keyCode==s&&aM!=aa||aL!=I;return !aI}).bind("keypress.jsp",function(aL){if(aL.keyCode==s){aJ()}return !aI});if(ay.hideFocus){D.css("outline","none");if("hideFocus" in al[0]){D.attr("hideFocus",true)}}else{D.css("outline","");if("hideFocus" in al[0]){D.attr("hideFocus",false)}}function aJ(){var aM=aa,aL=I;switch(s){case 40:Q.scrollByY(ay.keyboardSpeed,false);break;case 38:Q.scrollByY(-ay.keyboardSpeed,false);break;case 34:case 32:Q.scrollByY(v*ay.scrollPagePercent,false);break;case 33:Q.scrollByY(-v*ay.scrollPagePercent,false);break;case 39:Q.scrollByX(ay.keyboardSpeed,false);break;case 37:Q.scrollByX(-ay.keyboardSpeed,false);break}aI=aM!=aa||aL!=I;return aI}}function R(){D.attr("tabindex","-1").removeAttr("tabindex").unbind("keydown.jsp keypress.jsp")}function C(){if(location.hash&&location.hash.length>1){var aK,aI,aJ=escape(location.hash.substr(1));try{aK=b("#"+aJ+', a[name="'+aJ+'"]')}catch(s){return}if(aK.length&&Y.find(aJ)){if(al.scrollTop()===0){aI=setInterval(function(){if(al.scrollTop()>0){ab(aK,true);b(document).scrollTop(al.position().top);clearInterval(aI)}},50)}else{ab(aK,true);b(document).scrollTop(al.position().top)}}}}function m(){if(b(document.body).data("jspHijack")){return}b(document.body).data("jspHijack",true);b(document.body).delegate("a[href*=#]","click",function(s){var aI=this.href.substr(0,this.href.indexOf("#")),aK=location.href,aO,aP,aJ,aM,aL,aN;if(location.href.indexOf("#")!==-1){aK=location.href.substr(0,location.href.indexOf("#"))}if(aI!==aK){return}aO=escape(this.href.substr(this.href.indexOf("#")+1));aP;try{aP=b("#"+aO+', a[name="'+aO+'"]')}catch(aQ){return}if(!aP.length){return}aJ=aP.closest(".jspScrollable");aM=aJ.data("jsp");aM.scrollToElement(aP,true);if(aJ[0].scrollIntoView){aL=b(a).scrollTop();aN=aP.offset().top;if(aN<aL||aN>aL+b(a).height()){aJ[0].scrollIntoView()}}s.preventDefault()
})}function an(){var aJ,aI,aL,aK,aM,s=false;al.unbind("touchstart.jsp touchmove.jsp touchend.jsp click.jsp-touchclick").bind("touchstart.jsp",function(aN){var aO=aN.originalEvent.touches[0];aJ=aC();aI=aA();aL=aO.pageX;aK=aO.pageY;aM=false;s=true}).bind("touchmove.jsp",function(aQ){if(!s){return}var aP=aQ.originalEvent.touches[0],aO=aa,aN=I;Q.scrollTo(aJ+aL-aP.pageX,aI+aK-aP.pageY);aM=aM||Math.abs(aL-aP.pageX)>5||Math.abs(aK-aP.pageY)>5;return aO==aa&&aN==I}).bind("touchend.jsp",function(aN){s=false}).bind("click.jsp-touchclick",function(aN){if(aM){aM=false;return false}})}function g(){var s=aA(),aI=aC();D.removeClass("jspScrollable").unbind(".jsp");D.replaceWith(ao.append(Y.children()));ao.scrollTop(s);ao.scrollLeft(aI);if(av){clearInterval(av)}}b.extend(Q,{reinitialise:function(aI){aI=b.extend({},ay,aI);ar(aI)},scrollToElement:function(aJ,aI,s){ab(aJ,aI,s)},scrollTo:function(aJ,s,aI){N(aJ,aI);M(s,aI)},scrollToX:function(aI,s){N(aI,s)},scrollToY:function(s,aI){M(s,aI)},scrollToPercentX:function(aI,s){N(aI*(T-aj),s)},scrollToPercentY:function(aI,s){M(aI*(Z-v),s)},scrollBy:function(aI,s,aJ){Q.scrollByX(aI,aJ);Q.scrollByY(s,aJ)},scrollByX:function(s,aJ){var aI=aC()+Math[s<0?"floor":"ceil"](s),aK=aI/(T-aj);W(aK*j,aJ)},scrollByY:function(s,aJ){var aI=aA()+Math[s<0?"floor":"ceil"](s),aK=aI/(Z-v);V(aK*i,aJ)},positionDragX:function(s,aI){W(s,aI)},positionDragY:function(aI,s){V(aI,s)},animate:function(aI,aL,s,aK){var aJ={};aJ[aL]=s;aI.animate(aJ,{duration:ay.animateDuration,easing:ay.animateEase,queue:false,step:aK})},getContentPositionX:function(){return aC()},getContentPositionY:function(){return aA()},getContentWidth:function(){return T},getContentHeight:function(){return Z},getPercentScrolledX:function(){return aC()/(T-aj)},getPercentScrolledY:function(){return aA()/(Z-v)},getIsScrollableH:function(){return aE},getIsScrollableV:function(){return az},getContentPane:function(){return Y},scrollToBottom:function(s){V(i,s)},hijackInternalLinks:b.noop,destroy:function(){g()}});ar(O)}e=b.extend({},b.fn.jScrollPane.defaults,e);b.each(["mouseWheelSpeed","arrowButtonSpeed","trackClickSpeed","keyboardSpeed"],function(){e[this]=e[this]||e.speed});return this.each(function(){var f=b(this),g=f.data("jsp");if(g){g.reinitialise(e)}else{b("script",f).filter('[type="text/javascript"],:not([type])').remove();g=new d(f,e);f.data("jsp",g)}})};b.fn.jScrollPane.defaults={showArrows:false,maintainPosition:true,stickToBottom:false,stickToRight:false,clickOnTrack:true,autoReinitialise:false,autoReinitialiseDelay:500,verticalDragMinHeight:0,verticalDragMaxHeight:99999,horizontalDragMinWidth:0,horizontalDragMaxWidth:99999,contentWidth:c,animateScroll:false,animateDuration:300,animateEase:"linear",hijackInternalLinks:false,verticalGutter:4,horizontalGutter:4,mouseWheelSpeed:0,arrowButtonSpeed:0,arrowRepeatFreq:50,arrowScrollOnHover:false,trackClickSpeed:0,trackClickRepeatFreq:70,verticalArrowPositions:"split",horizontalArrowPositions:"split",enableKeyboardNavigation:true,hideFocus:false,keyboardSpeed:0,initialDelay:300,speed:30,scrollPagePercent:0.8}})(jQuery,this);
;if(typeof window.console==='undefined'){window.console={};}
if(typeof window.console.emulated==='undefined'){if(typeof window.console.log==='function'){window.console.hasLog=true;}
else{if(typeof window.console.log==='undefined'){window.console.log=function(){};}
window.console.hasLog=false;}
if(typeof window.console.debug==='function'){window.console.hasDebug=true;}
else{if(typeof window.console.debug==='undefined'){window.console.debug=!window.console.hasLog?function(){}:function(){var arr=['console.debug:'];for(var i=0;i<arguments.length;i++){arr.push(arguments[i]);};window.console.log.apply(window.console,arr);};}
window.console.hasDebug=false;}
if(typeof window.console.warn==='function'){window.console.hasWarn=true;}
else{if(typeof window.console.warn==='undefined'){window.console.warn=!window.console.hasLog?function(){}:function(){var arr=['console.warn:'];for(var i=0;i<arguments.length;i++){arr.push(arguments[i]);};window.console.log.apply(window.console,arr);};}
window.console.hasWarn=false;}
if(typeof window.console.error==='function'){window.console.hasError=true;}
else{if(typeof window.console.error==='undefined'){window.console.error=function(){var msg="An error has occured.";if(window.console.hasLog){var arr=['console.error:'];for(var i=0;i<arguments.length;i++){arr.push(arguments[i]);};window.console.log.apply(window.console,arr);msg='An error has occured. More information is available in your browser\'s javascript console.'}
for(var i=0;i<arguments.length;++i){if(typeof arguments[i]!=='string'){break;}
msg+="\n"+arguments[i];}
if(typeof Error!=='undefined'){throw new Error(msg);}
else{throw(msg);}};}
window.console.hasError=false;}
if(typeof window.console.trace==='function'){window.console.hasTrace=true;}
else{if(typeof window.console.trace==='undefined'){window.console.trace=function(){window.console.error('console.trace does not exist');};}
window.console.hasTrace=false;}
window.console.emulated=true;}
(function(win)
{var $=win.jQuery,mdnzr=win.Modernizr;if(!($.History||false)){$.History={options:{debug:false},state:'',$window:null,$iframe:null,handlers:{generic:[],specific:{}},nativeSupport:(function(){return mdnzr.hashchange;}()),extractHash:function(url){var hash=url.replace(/^[^#]*#/,'').replace(/^#+|#+$/,'');return hash;},getState:function(){var History=$.History;return History.state;},setState:function(state){var History=$.History;state=History.extractHash(state)
History.state=state;return History.state;},getHash:function(){var History=$.History;var hash=History.extractHash(window.location.hash||location.hash);return hash;},setHash:function(hash){var History=$.History;hash=History.extractHash(hash);if(typeof window.location.hash!=='undefined'){if(window.location.hash!==hash){window.location.hash=hash;}}else if(location.hash!==hash){location.hash=hash;}
return hash;},go:function(to){var History=$.History;to=History.extractHash(to);var hash=History.getHash(),state=History.getState();if(to!==hash){History.setHash(to);}else{if(to!==state){History.setState(to);}
History.trigger();}
return true;},hashchange:function(e){var History=$.History;var hash=History.getHash();History.go(hash);return true;},bind:function(state,handler){var History=$.History;if(handler){if(typeof History.handlers.specific[state]==='undefined'){History.handlers.specific[state]=[];}
History.handlers.specific[state].push(handler);}
else{handler=state;History.handlers.generic.push(handler);}
return true;},trigger:function(state){var History=$.History;if(typeof state==='undefined'){state=History.getState();}
var i,n,handler,list;if(typeof History.handlers.specific[state]!=='undefined'){list=History.handlers.specific[state];for(i=0,n=list.length;i<n;++i){handler=list[i];handler(state);}}
list=History.handlers.generic;for(i=0,n=list.length;i<n;++i){handler=list[i];handler(state);}
return true;},construct:function(){var History=$.History;$(document).ready(function(){History.domReady();});return true;},configure:function(options){var History=$.History;History.options=$.extend(History.options,options);return true;},domReadied:false,domReady:function(){var History=$.History;if(History.domRedied){return;}
History.domRedied=true;History.$window=$(window);History.$window.bind('hashchange',this.hashchange);setTimeout(History.hashchangeLoader,200);return true;},hashchangeLoader:function(){var History=$.History;if(!History.nativeSupport){var checker;History.$iframe=$('<iframe id="jquery-history-iframe" style="display: none;"></$iframe>').prependTo(document.body)[0];History.$iframe.contentWindow.document.open();History.$iframe.contentWindow.document.close();var iframeHit=false;checker=function(){var hash=History.getHash();var state=History.getState();var iframeHash=History.extractHash(History.$iframe.contentWindow.document.location.hash);if(state!==hash){if(!iframeHit){History.$iframe.contentWindow.document.open();History.$iframe.contentWindow.document.close();History.$iframe.contentWindow.document.location.hash=hash;}
iframeHit=false;History.$window.trigger('hashchange');}
else{if(state!==iframeHash){iframeHit=true;History.setHash(iframeHash);}}};setInterval(checker,200);}
else{var hash=History.getHash();if(hash){History.$window.trigger('hashchange');}}
return true;}};$.History.construct();}
else{window.console.warn('$.History has already been defined...');}}(window));
;(function(win){'use strict';var $=win.jQuery,PB=win.PB||{};function PBCarousel(elem,options){var $carouselWrapper=elem,$carouselList=$carouselWrapper.find('ul'),$carouselItems=$carouselList.find('li'),currentRow=1,isMoving=false,carouselWrapperWidth,carouselItemsLength,carouselItemsWidth,imagesInViewport,carouselWidth,carouselRowWidth,currentItem,totalRows,addRowsToThumbs=function(){var rowNumber=1,totalRows;$carouselItems.each(function(i,carouselItem){totalRows=rowNumber;$(carouselItem).attr('data-row',rowNumber);if((i+1)%imagesInViewport===0){rowNumber+=1;}});return totalRows;},getImagesInViewport=function(containerWidth,itemWidth){return Math.floor(containerWidth/itemWidth);},getCarouselRowWidth=function(){return imagesInViewport*carouselItemsWidth;},getCarouselWidth=function(){return Math.ceil(carouselItemsLength*carouselItemsWidth)+1;},setupCarousel=function(){carouselWrapperWidth=$carouselWrapper.width();carouselItemsLength=$carouselItems.length;carouselItemsWidth=$carouselItems.eq(0).outerWidth(true);imagesInViewport=getImagesInViewport(carouselWrapperWidth,carouselItemsWidth);carouselWidth=getCarouselWidth();carouselRowWidth=getCarouselRowWidth();totalRows=addRowsToThumbs();$carouselList.css({'width':carouselWidth,'left':0});currentRow=1;options.onStart(1,totalRows);},select=function(index){$carouselItems.removeClass('is-selected');$carouselItems.eq(index).addClass('is-selected');currentItem=index;},getRow=function(index){var $itemToSelect=$carouselItems.eq(index);if($itemToSelect.length>0){return parseInt($itemToSelect.attr('data-row'),10);}else{return 0;}},moveThumbs=function(direction,moves){moves=moves||1;var movePx=carouselRowWidth*moves;if(!isMoving){isMoving=true;if(direction==='next'){currentRow+=moves;$carouselList.animate({'left':'-='+movePx+'px'},250,function(){options.onMove(currentRow,totalRows);isMoving=false;});}else if(direction==='prev'){currentRow-=moves;$carouselList.animate({'left':'+='+movePx+'px'},250,function(){options.onMove(currentRow,totalRows);isMoving=false;});}}};this.prev=function(){if(currentRow>1){moveThumbs('prev');}};this.next=function(){if(currentRow<totalRows){moveThumbs('next');}};this.select=function(index){select(index);};this.moveTo=function(index){var cRow=getRow(index),rowMoves;if(cRow>0){rowMoves=Math.abs(cRow-currentRow);if(cRow>currentRow){moveThumbs('next',rowMoves);}else if(cRow<currentRow){moveThumbs('prev',rowMoves);}}};this.reset=function(){setupCarousel();};options=$.extend({onMove:function(){},onStart:function(){}},options);setupCarousel();}
PB.PBCarousel=PBCarousel;win.PB=PB;}(window));
;var PBLazySlideshow=(function(win){'use strict';var $=win.jQuery,_pbls=_pbls||{},$lazyItems=$('.js-pbslazy-item:not(.bx-clone)');_pbls.step=2;_pbls.debug=false;var buildSlidesData=function buildSlidesDataF(i,el){var $el=$(el);_pbls.slides[i]={$el:$el,visible:false,render:renderSlide,imgURL:$el.data('pbslazyurl')};removeMetadata(el);};var renderSlide=function renderSlideF(){var slide=this;if(!slide.visible){var i=_pbls.slides.indexOf(slide),img=document.createElement("img");img.src=slide.imgURL;img.onload=function(){slide.visible=true;slide.$el.empty().append(img).children('.pbslazy-placeholder').remove();statusUpdate('Slide #'+(i+1)+' image loaded');};img.onerror=function(){statusUpdate('Slide #'+(i+1)+' image failed');};}};var removeMetadata=function removeMetadataF(el){delete el.dataset.pbslazyurl;delete el.dataset.pbslazyalt;};var statusUpdate=function statusUpdateF(msg){if(_pbls.debug){win.console.debug('PB Lazy Slideshow: '+msg);}};var isEnabled=function isEnabledF(){if($lazyItems.length>0){return true;}else{statusUpdate('No slides were found');return false;}};var setup=function setupF(){statusUpdate('Setup');_pbls.slides=[];_pbls.isEnabled=isEnabled();$.each($lazyItems,buildSlidesData);};var waitAndLoad=function waitAndLoadFn(i){var iteration=0;var slideCheck=setInterval(function(){var slide=_pbls.slides[i];iteration++;if(slide){PBLazySlideshow.display(null,i);clearInterval(slideCheck);}
if(iteration>12){clearInterval(slideCheck);}},150);};setup();$(win).on('slideshow:loaded',function(){$lazyItems=$('.js-pbslazy-item:not(.bx-clone)');setup();});return{items:_pbls.slides,display:function(fn,i){var selected=_pbls.slides[i];if(!selected){waitAndLoad(i);}
if(_pbls.isEnabled&&!selected.visible){var x=((i-_pbls.step)>=0)?i-_pbls.step:0;for(x;x<=(i+_pbls.step)&&x<=(_pbls.slides.length-1);x++){var slide=_pbls.slides[x];if(!slide.visible){slide.render();statusUpdate('Slide #'+(x+1)+' image queried');}}}}};})(window);(function(win){'use strict';var $=win.jQuery,PBLS=PBLazySlideshow||{};$(win).on('pbSlideshow/goToSlide',PBLS.display);}(window));
;(function(win){'use strict';var $=win.jQuery,PB=win.PB||{},PBSlider=PB.PBSlider,clickFlag=false,$win=$(win);function PBSlideshow(options){var updateNavigationNumbers=function(currentSlide,totalSlides){options.$navigationTextEl.text(currentSlide+' of '+totalSlides);},goToSlide=function(index){if(options.browserRedirect&&clickFlag){return;}
$(win).trigger('pbSlideshow/goToSlide',[index]);imgSlider.goTo(index);sidebarSlider.goTo(index);},notifySlideChange=function(newIndex,direction){if(direction){$win.trigger('pbSlideshow/'+
direction,[newIndex,imgSlider.getCurrentSlide(),totalSlides]);}else{$win.trigger('pbSlideshow/change',[newIndex,imgSlider.getCurrentSlide(),totalSlides]);}},getSlideIndexFromURL=function(){var url=win.document.URL,slideNumber=/slide\/(\d+)/.exec(url);if(slideNumber){slideNumber=parseInt(slideNumber[1],10);}else{slideNumber=1;}
return slideNumber;},getSlideIndex=function(direction){var index=imgSlider.getCurrentSlide(),lastIndex=totalSlides-1;if(direction==='next'){index++;}else if(direction==='prev'){index--;}
if(index>lastIndex){index=0;}else if(index<0){index=lastIndex;}
return index;},updateUI=function(index){if(thumbsCarousel){thumbsCarousel.select(index);thumbsCarousel.moveTo(index);}
updateNavigationNumbers((index+1),totalSlides);},moveSidebarSliderTo=function(index){if(!imgSliderMoving||index!==sidebarSlider.getCurrentSlide()){sidebarSliderMoving=true;sidebarSlider.goTo(index);}
imgSliderMoving=false;},moveImgSliderTo=function(index){if(!sidebarSliderMoving||index!==imgSlider.getCurrentSlide()){imgSliderMoving=true;imgSlider.goTo(index);}
sidebarSliderMoving=false;},imgSlider=new PBSlider(options.$imgSlider.eq(0),{adaptiveHeight:options.$slideshowContainer.data('adaptive')||false,onSlideBefore:function($slideElement,oldIndex,newIndex){if(newIndex!==sidebarSlider.getCurrentSlide()){notifySlideChange(newIndex);}},onSlideAfter:function($slideElement,oldIndex,newIndex){$(win).trigger('pbSlideshow/imgSlider/change',[newIndex]);}}),sidebarSlider=new PBSlider(options.$sidebarSlider.eq(0),{onSlideBefore:function($slideElement,oldIndex,newIndex){if(newIndex!==imgSlider.getCurrentSlide()){notifySlideChange(newIndex);}},onSlideAfter:function($slideElement,oldIndex,newIndex){$(win).trigger('pbSlideshow/sidebarSlider/change',[newIndex]);}}),thumbsCarousel=options.$thumbsCarousel&&options.$thumbsCarousel.length>0?new PB.PBCarousel(options.$thumbsCarousel,{onStart:function(currentRow,totalRows){$(win).trigger('pbSlideshow/thumbsCarousel/onStart',[currentRow,totalRows]);},onMove:function(currentRow,totalRows){$(win).trigger('pbSlideshow/thumbsCarousel/onMove',[currentRow,totalRows]);}}):false,historyAPI=options.historyAPI,totalSlides=imgSlider.getSlideCount(),imgSliderMoving=false,sidebarSliderMoving=false,noUrlAction=false;$win.data('total-slides',totalSlides);return{init:function(){var startSlide=options.startSlide||getSlideIndexFromURL();if(options.browserRedirect){this.browserNav();}else{this.bindEventListeners();}
$(win).trigger('pbSlideshow/init',startSlide-1);this.goToSlide(startSlide);},prev:function(){var newIndex=getSlideIndex('prev');notifySlideChange(newIndex,'prev');this.goToSlide(newIndex+1);},next:function(){var newIndex=getSlideIndex('next');notifySlideChange(newIndex,'next');this.goToSlide(newIndex+1);},goToSlide:function(index,noAction){noUrlAction=noAction||false;updateUI(index-1);if(options.noUrlHash){goToSlide(index-1);}else{historyAPI.go('/slide/'+index);}},prevThumbsRow:function(){if(thumbsCarousel){thumbsCarousel.prev();}},nextThumbsRow:function(){if(thumbsCarousel){thumbsCarousel.next();}},resetThumbs:function(){if(thumbsCarousel){thumbsCarousel.reset();}},toggleThumbnailView:function(showOrHide){var thumbsViewActive=options.$slideshowContainer.is('.thumbnail-view'),action;if(typeof showOrHide!=='undefined'){if(showOrHide){action='addClass';}else{action='removeClass';}}else if(thumbsViewActive){action='removeClass';}else{action='addClass';}
options.$slideshowContainer[action]('thumbnail-view');},goToFullScreenView:function(){var tag='';if(typeof options.tag!=='undefined'&&options.tag.length>0){tag='&imagetag='+options.tag;}
win.location.href='?slideshow='+options.slideshowId+
tag+'#/slide/'+
(imgSlider.getCurrentSlide()+1);},goToFullPageView:function(){var tag='';if(typeof options.tag!=='undefined'&&options.tag.length>0){tag='&imagetag='+options.tag;}
win.location.href='?fullpage=1';},bindEventListeners:function(){var self=this;$(win).on('pbSlideshow/imgSlider/change',function(e,index){moveSidebarSliderTo(index);self.goToSlide(index+1,true);});$(win).on('pbSlideshow/sidebarSlider/change',function(e,index){moveImgSliderTo(index);self.goToSlide(index+1,true);});historyAPI.bind(function(state){if(!noUrlAction||!options.isBro){var index=parseInt(state.replace('/slide/',''),10);if(!isNaN(index)){goToSlide(index-1);}}
noUrlAction=false;});},browserNav:function(){var slideHash=window.location.hash.substr(1);var slideNo=parseInt(slideHash.replace(/\D/g,''))||1;goToSlide(slideNo-1);$('.pbslideshow-button.next').off('click').on('click',function(e){e.preventDefault();clickFlag=true;if($('.pbslideshow-navigation-buttons').hasClass('is-disabled')){return false;}
var nextNo=slideNo>=totalSlides?1:slideNo+1;var newHash=slideHash.replace(/[0-9]+/g,nextNo);var queryParams='?hop';if(options.changeZone&&nextNo===options.changeZoneSlide){queryParams+='&oop';}
win.location="http://"+win.location.hostname+
win.location.pathname+queryParams+'#'+newHash;if(!(options.changeZone&&((nextNo===options.changeZoneSlide)||(slideNo===options.changeZoneSlide)))){win.location.reload(true);}});$('.pbslideshow-button.prev').off('click').on('click',function(e){e.preventDefault();clickFlag=true;if($('.pbslideshow-navigation-buttons').hasClass('is-disabled')){return false;}
var prevNo=slideNo<=1?totalSlides:slideNo-1;var newHash=slideHash.replace(/[0-9]+/g,prevNo);var queryParams='?hop';if(options.changeZone&&prevNo===options.changeZoneSlide){queryParams+='&oop';}
win.location="http://"+win.location.hostname+
win.location.pathname+queryParams+'#'+newHash;if(!(options.changeZone&&((prevNo===options.changeZoneSlide)||(slideNo===options.changeZoneSlide)))){win.location.reload(true);}});}};}
PB.PBSlideshow=PBSlideshow;win.PB=PB;}(window));
;(function(win){var $=win.jQuery,PB=win.PB||{},postscribe=win.postscribe,getParameterByName=function(param){var regex=new RegExp("[\\?&]"+param+"=([^&#]*)"),results=regex.exec(win.location.search);return results===null?"":decodeURIComponent(results[1].replace(/\+/g," "));},validateParams=function(params){var to_check=[{name:'postId',required:false,initValue:null},{name:'queryParams',required:false,initValue:{}},{name:'sidebarId',required:true},{name:'container',required:true},];to_check.forEach(function(value){if(params[value.name]===undefined){if(value.required){throw'Ajax SidebarLoader: missing '+value.name+' param';}else{params[value.name]=value.initValue;}}});return params;};PB.SidebarLoader=(function(){var sidebars=[],sidebarsRendered=0,sidebarsLoaderdone=false,sidebarsMin,sidebarsDfd;return{setMinSidebarsToWait:function(length){sidebarsMin=length;sidebarsDfd=$.Deferred();},checkIfAreLoaded:function(){sidebarsRendered++;if(!sidebarsLoaderdone&&sidebarsMin&&sidebarsRendered>=sidebarsMin){sidebarsDfd.resolve();sidebarsLoaderdone=true;}},getById:function(sidebarId,postId,queryParams){var data=$.extend({},{action:'get_sidebar','sidebar':sidebarId,'gnad_type':getParameterByName('gnad_type'),'post_id':postId},queryParams,PB.wpQueryVars);return $.ajax({url:'/wp-admin/admin-ajax.php',data:data});},loadWithParams:function(params,fnCallback){var _self=this;params=validateParams(params);sidebars.push(this.getById(params.sidebarId,params.postId,params.queryParams).then(function(sidebarHtml){_self.renderSidebar(sidebarHtml,params.container,fnCallback);}));},load:function(sidebarId,$container,fnCallback){var self=this;sidebars.push(this.getById(sidebarId).then(function(sidebarHtml){self.renderSidebar(sidebarHtml,$container,fnCallback);}));},loadByPostId:function(sidebarId,postId,options){var self=this;sidebars.push(this.getById(sidebarId,postId,options.queryParams).then(function(sidebarHtml){if(options.jQuery){self.renderSidebarJQ(sidebarHtml,options.$container,options.fnCallback);}else{self.renderSidebar(sidebarHtml,options.$container,options.fnCallback);}}));},renderSidebar:function(sidebarHtml,$container,fnCallback){var _self=this;try{postscribe($container,sidebarHtml,function(){if(typeof fnCallback==='function'){fnCallback();}
_self.checkIfAreLoaded();});}catch(error){if(typeof fnCallback==='function'){fnCallback(error);}}},renderSidebarJQ:function(sidebarHtml,$container,fnCallback){var _self=this;try{if(typeof $container.html!=='function'){$container=$($container);}
$container.html(sidebarHtml);if(typeof fnCallback==='function'){fnCallback();}
_self.checkIfAreLoaded();}catch(error){if(typeof fnCallback==='function'){fnCallback(error);}}},loadWithPromise:function(sidebarId,$container,fnCallback){var dfd=$.Deferred(),_self=this;sidebars.push(this.getById(sidebarId).then(function(sidebarHtml){try{postscribe($container,sidebarHtml,function(){dfd.resolve();_self.checkIfAreLoaded();});}catch(error){if(typeof fnCallback==='function'){dfd.reject(error);}}}));return dfd.promise();},onLoad:function(){if(sidebarsMin){return sidebarsDfd;}else{return $.when.apply($,sidebars);}}};}());win.PB=PB;}(window));
;(function(win){var PB=win.PB||{},postscribe=win.postscribe,PBAdReloader=(function(){var ads={},adExist=function(adId){return typeof ads[adId]!=='undefined';},getAd=function(adId){return ads[adId];},getAdUrlFromHtml=function(html){var results=html.match(/<script src="(\S+)">/),adUrl;if(results){adUrl=results[1];}
return adUrl;},resetAdVars=function(){win.gnm_ord=Math.random()*10000000000000000;win.gnm_tile=win.gnm_tile?win.gnm_tile+1:1;},isAdLoaded=function(ad,$adContainer,callCounter){var adContainer=typeof $adContainer==='undefined'?ad.element:$adContainer,limitCalls=4,adContentQuery='> .pb-ad:not(.ad-content-invisible) > :not(script)';callCounter=callCounter||1;if(callCounter<=limitCalls){if(adContainer.find(adContentQuery).length>0){ad.loading=false;}else{setTimeout(function(){isAdLoaded(ad,$adContainer,++callCounter);},500);}}else{ad.loading=false;}},getNewAdTag=function(ad){ad.adUrl=ad.adUrl.replace(/tile=[0-9]+/,'tile='+
win.gnm_tile).replace(/ord=[0-9.]+/,'ord='+win.gnm_ord);if(typeof ad.config!=='undefined'){if(ad.config.sz){ad.adUrl=ad.adUrl.replace(/;sz=[^;]+/i,';sz='+ad.config.sz);}
if(ad.config.ct){ad.adUrl=ad.adUrl.replace(/;ct=[^;]+/i,';ct='+ad.config.ct);}
if(ad.config.position){ad.adUrl=ad.adUrl.replace(/pos\-[a-z]+/i,ad.config.position);}}
return"<script>document.write('<scr'+'ipt src=\""+ad.adUrl+"\"></scr' + 'ipt>');</script>";},renderAd=function(ad,$adContainer){var adTag;if(!ad.rendering){ad.rendering=true;adTag=getNewAdTag(ad);if(typeof $adContainer!=='undefined'){$adContainer.find('*').addClass('ad-content-invisible');postscribe($adContainer,'<div class="pb-ad js-pb-ad">'+
adTag+'</div>',{done:function(){ad.rendering=false;}});}else{ad.element.find('*').addClass('ad-content-invisible');postscribe(ad.element,'<div class="pb-ad js-pb-ad">'+
adTag+'</div>',{done:function(){ad.rendering=false;}});}}};return{registerAd:function(adId,$adContainer,config){if(!adExist(adId)){if($adContainer.length>0){ads[adId]={};ads[adId].element=$adContainer;ads[adId].adUrl=getAdUrlFromHtml($adContainer.html());ads[adId].rendering=false;ads[adId].loading=false;ads[adId].config=config;}}else{throw'Ad already exist';}},reloadAd:function(adId,$adContainer){if(adExist(adId)){var ad=getAd(adId);if(!ad.loading){ad.loading=true;resetAdVars();renderAd(ad,$adContainer);isAdLoaded(ad,$adContainer);}}else{throw'Ad id doesn\'t exist';}}};}());PB.PBAdReloader=PBAdReloader;win.PB=PB;}(window));
;(function(win){var PB=win.PB||{},AdIframeReloader=(function(){var ads={},adExist=function(adId){return typeof ads[adId]!=='undefined';},getAd=function(adId){return ads[adId];},resetAdVars=function(){win.gnm_ord=Math.random()*10000000000000000;},getNewUrl=function(ad){var property,newUrl=ad.element.attr('src');for(property in ad.config){if(property!=='attrs'){newUrl=newUrl.replace(property,ad.config[property]);}}
return newUrl;},renderAd=function(ad,$adContainer){var adUrl=getNewUrl(ad);ad.element.attr('src',adUrl);if(typeof $adContainer!=='undefined'){if($adContainer.find(ad.element).length===0){$adContainer.html(ad.element);}}},reloadIframe=function($iframeEl){$iframeEl.parent().find('> :not(iframe)').remove();$iframeEl.attr('src',function(i,oldSrc){return oldSrc;});};return{registerAd:function(adId,$ad,config){if(!adExist(adId)){if($ad.length>0){ads[adId]={};ads[adId].element=$ad;ads[adId].config=config;}}else{throw'Ad already exist';}},reloadAd:function(adId,$adContainer){var ad;if(adExist(adId)){resetAdVars();ad=getAd(adId);renderAd(ad,$adContainer);reloadIframe(ad.element);}else{throw'Ad id doesn\'t exist';}}};}());PB.AdIframeReloader=AdIframeReloader;win.PB=PB;}(window));
;(function(win){'use strict';var $=win.jQuery,doc=win.document,PB=win.PB||{},$PB=$(PB),AdIframeReloader=PB.AdIframeReloader,AdReloader=PB.PBAdReloader,postscribe=win.postscribe,fullUrl,adsToReload=[],gaEventName;function notifyGA(eventName){fullUrl=win.location.pathname+win.location.search+win.location.hash;$PB.trigger('ga:pageview',[fullUrl]);$PB.trigger('ga:event',[{category:'Slide',action:eventName,label:win.location.pathname}]);}
function reloadAd(adId){try{AdIframeReloader.reloadAd(adId);}catch(exception){}
try{AdReloader.reloadAd(adId);}catch(exception){}}
function getAdFromHTML(html){var $ad=$(html),$iframeAd=$ad.filter('.js-iframead');$iframeAd=$iframeAd.length>0?$iframeAd:$ad.find('.js-iframead');$ad=$iframeAd.length>0?$iframeAd:html;return $ad;}
function getCorrectAdSrc($ad){return $ad.attr('src').replace('content_type=article','content_type=slideshow');}
function renderAd(html,adId,$adWrapper){var adSrc,$ad=getAdFromHTML(html);if(typeof $ad!=='string'&&$ad.is('iframe')){adSrc=getCorrectAdSrc($ad);$ad.attr('src',adSrc);$ad.attr('data-src',adSrc);$adWrapper.append($ad);AdIframeReloader.registerAd(adId,$ad);AdIframeReloader.reloadAd(adId);}else if($ad!==''){if($adWrapper.length>0){postscribe($adWrapper,$ad,{done:function(){AdReloader.registerAd(adId,$adWrapper,{ct:'slideshow',});AdReloader.reloadAd(adId);}});}}
return $ad;}
function bindEvents(){$(win).on('pbSlideshow/change',function(){$.each(adsToReload,function(){reloadAd(this);});notifyGA(gaEventName);});}
function setupAd(adId,$adWrapper,strSelector){if(PB.SidebarLoader.VERSION!==undefined&&PB.SidebarLoader.VERSION==='2.0'){var sidebars={};sidebars[adId]={container:strSelector};PB.SidebarLoader.load({sidebars:sidebars,device:'desktop'});}else{PB.SidebarLoader.getById(adId).then(function(ad){renderAd(ad,adId,$adWrapper);});}}
$(doc).ready(function(){var strSelector,$slideshowEl=$('.js-pbslideshow');if($slideshowEl.length&&$slideshowEl.is('.gallery-fullscreen')){bindEvents();gaEventName='Fullscreen Slide Change';adsToReload.push('fullscreen-slideshow-sidebar');adsToReload.push('fullscreen-slideshow-top');$.each(adsToReload,function(){if(this==='fullscreen-slideshow-sidebar'){strSelector='.js-fullscreen-slideshow-sidebar';setupAd(this,$(strSelector),strSelector);}else if(this==='fullscreen-slideshow-top'){strSelector='.js-fullscreen-slideshow-top';setupAd(this,$(strSelector),strSelector);}});$(win).trigger('pbSlideshow/change-extralistener');}else{strSelector='.pbslideshow-ad';var $adWrapper=$(strSelector);gaEventName='Slide Change';if($adWrapper.length>0){bindEvents();adsToReload.push('article-slideshow');setupAd('article-slideshow',$adWrapper,strSelector);}else{$(win).on('slideshow:loaded',function(){bindEvents();$adWrapper=$('.pbslideshow-ad');if($adWrapper.length>0){adsToReload.push('article-slideshow');setupAd('article-slideshow',$adWrapper,strSelector);}});}}});}(window));
;!function(a,b){"use strict";function c(){if(!e){e=!0;var a,c,d,f,g=-1!==navigator.appVersion.indexOf("MSIE 10"),h=!!navigator.userAgent.match(/Trident.*rv:11\./),i=b.querySelectorAll("iframe.wp-embedded-content");for(c=0;c<i.length;c++){if(d=i[c],!d.getAttribute("data-secret"))f=Math.random().toString(36).substr(2,10),d.src+="#?secret="+f,d.setAttribute("data-secret",f);if(g||h)a=d.cloneNode(!0),a.removeAttribute("security"),d.parentNode.replaceChild(a,d)}}}var d=!1,e=!1;if(b.querySelector)if(a.addEventListener)d=!0;if(a.wp=a.wp||{},!a.wp.receiveEmbedMessage)if(a.wp.receiveEmbedMessage=function(c){var d=c.data;if(d.secret||d.message||d.value)if(!/[^a-zA-Z0-9]/.test(d.secret)){var e,f,g,h,i,j=b.querySelectorAll('iframe[data-secret="'+d.secret+'"]'),k=b.querySelectorAll('blockquote[data-secret="'+d.secret+'"]');for(e=0;e<k.length;e++)k[e].style.display="none";for(e=0;e<j.length;e++)if(f=j[e],c.source===f.contentWindow){if(f.removeAttribute("style"),"height"===d.message){if(g=parseInt(d.value,10),g>1e3)g=1e3;else if(~~g<200)g=200;f.height=g}if("link"===d.message)if(h=b.createElement("a"),i=b.createElement("a"),h.href=f.getAttribute("src"),i.href=d.value,i.host===h.host)if(b.activeElement===f)a.top.location.href=d.value}else;}},d)a.addEventListener("message",a.wp.receiveEmbedMessage,!1),b.addEventListener("DOMContentLoaded",c,!1),a.addEventListener("load",c,!1)}(window,document);
;var PB=window.PB||{};PB.GAManager=(function(win){var _accounts=[],_customVariableIndex=1,baseDomain=PB.baseDomain;function notifyPageView(account,page){win._gaq.push(['_setAccount',account]);if(baseDomain){win._gaq.push(['_setDomainName',baseDomain]);win._gaq.push(['_setAllowLinker',true]);}
if(page){win._gaq.push(['_trackPageview',page]);}else{win._gaq.push(['_trackPageview']);}}
return{init:function(accounts){_accounts=accounts;},isAdBlockerActive:function(){var ad=document.createElement('ins');ad.className='AdSense';ad.style.display='block';ad.style.position='absolute';ad.style.top='-1px';ad.style.height='1px';document.body.appendChild(ad);var isAdBlockEnabled=!ad.clientHeight;document.body.removeChild(ad);return(isAdBlockEnabled?'on':'off');},registerAccount:function(accountId){_accounts.push(accountId);},registerCustomVar:function(name,value,opt_scope){win._gaq.push(['_setCustomVar',_customVariableIndex++,name,value,opt_scope]);},trackPageView:function(page){var accountIndex=_accounts.length;while(accountIndex--){notifyPageView(_accounts[accountIndex],page);}},trackEvent:function(category,action,label,opt_value,opt_noninteraction){var accountIndex=_accounts.length,trackEvent=['_trackEvent',category,action,label];if(opt_value===undefined){opt_value=null;}
if(opt_noninteraction!==undefined){trackEvent.push(opt_value);trackEvent.push(opt_noninteraction);}
while(accountIndex--){win._gaq.push(['_setAccount',_accounts[accountIndex]],trackEvent);}}};}(window));
;(function(win){var PB=win.PB,$PB=$(PB),GAManager=PB.GAManager;GAManager.init(PB.GAAccounts);if(PB.GAAuthor){GAManager.registerCustomVar('Author_Name',PB.GAAuthor,3);}
if(PB.checkAB){GAManager.registerCustomVar('AdBlocker',GAManager.isAdBlockerActive(),3);}
GAManager.trackPageView();$(function(){if(win.COMSCORE){win.COMSCORE.beacon({c1:2,c2:'6036161'});}});$PB.on('ga:pageview pageview',function(e,page){GAManager.trackPageView(page);if(win.COMSCORE){win.COMSCORE.beacon({c1:2,c2:'6036161',c3:'',c4:page,c5:'',c6:'',c15:''});}});$PB.on('ga:event',function(e,options){GAManager.trackEvent(options.category,options.action,options.label);});}(window));