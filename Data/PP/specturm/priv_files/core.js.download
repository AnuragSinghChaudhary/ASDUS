/*! jQuery Mobile v1.4.5 | Copyright 2010, 2014 jQuery Foundation, Inc. | jquery.org/license */

(function(e,t,n){typeof define=="function"&&define.amd?define(["jquery"],function(r){return n(r,e,t),r.mobile}):n(e.jQuery,e,t)})(this,document,function(e,t,n,r){(function(e,t,n,r){function T(e){while(e&&typeof e.originalEvent!="undefined")e=e.originalEvent;return e}function N(t,n){var i=t.type,s,o,a,l,c,h,p,d,v;t=e.Event(t),t.type=n,s=t.originalEvent,o=e.event.props,i.search(/^(mouse|click)/)>-1&&(o=f);if(s)for(p=o.length,l;p;)l=o[--p],t[l]=s[l];i.search(/mouse(down|up)|click/)>-1&&!t.which&&(t.which=1);if(i.search(/^touch/)!==-1){a=T(s),i=a.touches,c=a.changedTouches,h=i&&i.length?i[0]:c&&c.length?c[0]:r;if(h)for(d=0,v=u.length;d<v;d++)l=u[d],t[l]=h[l]}return t}function C(t){var n={},r,s;while(t){r=e.data(t,i);for(s in r)r[s]&&(n[s]=n.hasVirtualBinding=!0);t=t.parentNode}return n}function k(t,n){var r;while(t){r=e.data(t,i);if(r&&(!n||r[n]))return t;t=t.parentNode}return null}function L(){g=!1}function A(){g=!0}function O(){E=0,v.length=0,m=!1,A()}function M(){L()}function _(){D(),c=setTimeout(function(){c=0,O()},e.vmouse.resetTimerDuration)}function D(){c&&(clearTimeout(c),c=0)}function P(t,n,r){var i;if(r&&r[t]||!r&&k(n.target,t))i=N(n,t),e(n.target).trigger(i);return i}function H(t){var n=e.data(t.target,s),r;!m&&(!E||E!==n)&&(r=P("v"+t.type,t),r&&(r.isDefaultPrevented()&&t.preventDefault(),r.isPropagationStopped()&&t.stopPropagation(),r.isImmediatePropagationStopped()&&t.stopImmediatePropagation()))}function B(t){var n=T(t).touches,r,i,o;n&&n.length===1&&(r=t.target,i=C(r),i.hasVirtualBinding&&(E=w++,e.data(r,s,E),D(),M(),d=!1,o=T(t).touches[0],h=o.pageX,p=o.pageY,P("vmouseover",t,i),P("vmousedown",t,i)))}function j(e){if(g)return;d||P("vmousecancel",e,C(e.target)),d=!0,_()}function F(t){if(g)return;var n=T(t).touches[0],r=d,i=e.vmouse.moveDistanceThreshold,s=C(t.target);d=d||Math.abs(n.pageX-h)>i||Math.abs(n.pageY-p)>i,d&&!r&&P("vmousecancel",t,s),P("vmousemove",t,s),_()}function I(e){if(g)return;A();var t=C(e.target),n,r;P("vmouseup",e,t),d||(n=P("vclick",e,t),n&&n.isDefaultPrevented()&&(r=T(e).changedTouches[0],v.push({touchID:E,x:r.clientX,y:r.clientY}),m=!0)),P("vmouseout",e,t),d=!1,_()}function q(t){var n=e.data(t,i),r;if(n)for(r in n)if(n[r])return!0;return!1}function R(){}function U(t){var n=t.substr(1);return{setup:function(){q(this)||e.data(this,i,{});var r=e.data(this,i);r[t]=!0,l[t]=(l[t]||0)+1,l[t]===1&&b.bind(n,H),e(this).bind(n,R),y&&(l.touchstart=(l.touchstart||0)+1,l.touchstart===1&&b.bind("touchstart",B).bind("touchend",I).bind("touchmove",F).bind("scroll",j))},teardown:function(){--l[t],l[t]||b.unbind(n,H),y&&(--l.touchstart,l.touchstart||b.unbind("touchstart",B).unbind("touchmove",F).unbind("touchend",I).unbind("scroll",j));var r=e(this),s=e.data(this,i);s&&(s[t]=!1),r.unbind(n,R),q(this)||r.removeData(i)}}}var i="virtualMouseBindings",s="virtualTouchID",o="vmouseover vmousedown vmousemove vmouseup vclick vmouseout vmousecancel".split(" "),u="clientX clientY pageX pageY screenX screenY".split(" "),a=e.event.mouseHooks?e.event.mouseHooks.props:[],f=e.event.props.concat(a),l={},c=0,h=0,p=0,d=!1,v=[],m=!1,g=!1,y="addEventListener"in n,b=e(n),w=1,E=0,S,x;e.vmouse={moveDistanceThreshold:10,clickDistanceThreshold:10,resetTimerDuration:1500};for(x=0;x<o.length;x++)e.event.special[o[x]]=U(o[x]);y&&n.addEventListener("click",function(t){var n=v.length,r=t.target,i,o,u,a,f,l;if(n){i=t.clientX,o=t.clientY,S=e.vmouse.clickDistanceThreshold,u=r;while(u){for(a=0;a<n;a++){f=v[a],l=0;if(u===r&&Math.abs(f.x-i)<S&&Math.abs(f.y-o)<S||e.data(u,s)===f.touchID){t.preventDefault(),t.stopPropagation();return}}u=u.parentNode}}},!0)})(e,t,n),function(e){e.mobile={}}(e),function(e,t){var r={touch:"ontouchend"in n};e.mobile.support=e.mobile.support||{},e.extend(e.support,r),e.extend(e.mobile.support,r)}(e),function(e,t,r){function l(t,n,i,s){var o=i.type;i.type=n,s?e.event.trigger(i,r,t):e.event.dispatch.call(t,i),i.type=o}var i=e(n),s=e.mobile.support.touch,o="touchmove scroll",u=s?"touchstart":"mousedown",a=s?"touchend":"mouseup",f=s?"touchmove":"mousemove";e.each("touchstart touchmove touchend tap taphold swipe swipeleft swiperight scrollstart scrollstop".split(" "),function(t,n){e.fn[n]=function(e){return e?this.bind(n,e):this.trigger(n)},e.attrFn&&(e.attrFn[n]=!0)}),e.event.special.scrollstart={enabled:!0,setup:function(){function s(e,n){r=n,l(t,r?"scrollstart":"scrollstop",e)}var t=this,n=e(t),r,i;n.bind(o,function(t){if(!e.event.special.scrollstart.enabled)return;r||s(t,!0),clearTimeout(i),i=setTimeout(function(){s(t,!1)},50)})},teardown:function(){e(this).unbind(o)}},e.event.special.tap={tapholdThreshold:750,emitTapOnTaphold:!0,setup:function(){var t=this,n=e(t),r=!1;n.bind("vmousedown",function(s){function a(){clearTimeout(u)}function f(){a(),n.unbind("vclick",c).unbind("vmouseup",a),i.unbind("vmousecancel",f)}function c(e){f(),!r&&o===e.target?l(t,"tap",e):r&&e.preventDefault()}r=!1;if(s.which&&s.which!==1)return!1;var o=s.target,u;n.bind("vmouseup",a).bind("vclick",c),i.bind("vmousecancel",f),u=setTimeout(function(){e.event.special.tap.emitTapOnTaphold||(r=!0),l(t,"taphold",e.Event("taphold",{target:o}))},e.event.special.tap.tapholdThreshold)})},teardown:function(){e(this).unbind("vmousedown").unbind("vclick").unbind("vmouseup"),i.unbind("vmousecancel")}},e.event.special.swipe={scrollSupressionThreshold:30,durationThreshold:1e3,horizontalDistanceThreshold:30,verticalDistanceThreshold:30,getLocation:function(e){var n=t.pageXOffset,r=t.pageYOffset,i=e.clientX,s=e.clientY;if(e.pageY===0&&Math.floor(s)>Math.floor(e.pageY)||e.pageX===0&&Math.floor(i)>Math.floor(e.pageX))i-=n,s-=r;else if(s<e.pageY-r||i<e.pageX-n)i=e.pageX-n,s=e.pageY-r;return{x:i,y:s}},start:function(t){var n=t.originalEvent.touches?t.originalEvent.touches[0]:t,r=e.event.special.swipe.getLocation(n);return{time:(new Date).getTime(),coords:[r.x,r.y],origin:e(t.target)}},stop:function(t){var n=t.originalEvent.touches?t.originalEvent.touches[0]:t,r=e.event.special.swipe.getLocation(n);return{time:(new Date).getTime(),coords:[r.x,r.y]}},handleSwipe:function(t,n,r,i){if(n.time-t.time<e.event.special.swipe.durationThreshold&&Math.abs(t.coords[0]-n.coords[0])>e.event.special.swipe.horizontalDistanceThreshold&&Math.abs(t.coords[1]-n.coords[1])<e.event.special.swipe.verticalDistanceThreshold){var s=t.coords[0]>n.coords[0]?"swipeleft":"swiperight";return l(r,"swipe",e.Event("swipe",{target:i,swipestart:t,swipestop:n}),!0),l(r,s,e.Event(s,{target:i,swipestart:t,swipestop:n}),!0),!0}return!1},eventInProgress:!1,setup:function(){var t,n=this,r=e(n),s={};t=e.data(this,"mobile-events"),t||(t={length:0},e.data(this,"mobile-events",t)),t.length++,t.swipe=s,s.start=function(t){if(e.event.special.swipe.eventInProgress)return;e.event.special.swipe.eventInProgress=!0;var r,o=e.event.special.swipe.start(t),u=t.target,l=!1;s.move=function(t){if(!o||t.isDefaultPrevented())return;r=e.event.special.swipe.stop(t),l||(l=e.event.special.swipe.handleSwipe(o,r,n,u),l&&(e.event.special.swipe.eventInProgress=!1)),Math.abs(o.coords[0]-r.coords[0])>e.event.special.swipe.scrollSupressionThreshold&&t.preventDefault()},s.stop=function(){l=!0,e.event.special.swipe.eventInProgress=!1,i.off(f,s.move),s.move=null},i.on(f,s.move).one(a,s.stop)},r.on(u,s.start)},teardown:function(){var t,n;t=e.data(this,"mobile-events"),t&&(n=t.swipe,delete t.swipe,t.length--,t.length===0&&e.removeData(this,"mobile-events")),n&&(n.start&&e(this).off(u,n.start),n.move&&i.off(f,n.move),n.stop&&i.off(a,n.stop))}},e.each({scrollstop:"scrollstart",taphold:"tap",swipeleft:"swipe.left",swiperight:"swipe.right"},function(t,n){e.event.special[t]={setup:function(){e(this).bind(n,e.noop)},teardown:function(){e(this).unbind(n)}}})}(e,this)});
// jQuery Mask Plugin v1.6.5
// github.com/igorescobar/jQuery-Mask-Plugin
(function(g){"function"===typeof define&&define.amd?define(["jquery"],g):g(window.jQuery||window.Zepto)})(function(g){var z=function(b,f,d){var l=this,x,y;b=g(b);f="function"===typeof f?f(b.val(),void 0,b,d):f;l.init=function(){d=d||{};l.byPassKeys=[9,16,17,18,36,37,38,39,40,91];l.translation={0:{pattern:/\d/},9:{pattern:/\d/,optional:!0},"#":{pattern:/\d/,recursive:!0},A:{pattern:/[a-zA-Z0-9]/},S:{pattern:/[a-zA-Z]/}};l.translation=g.extend({},l.translation,d.translation);l=g.extend(!0,{},l,d);y=
c.getRegexMask();b.each(function(){!1!==d.maxlength&&b.attr("maxlength",f.length);d.placeholder&&b.attr("placeholder",d.placeholder);b.attr("autocomplete","off");c.destroyEvents();c.events();var a=c.getCaret();c.val(c.getMasked());c.setCaret(a+c.getMaskCharactersBeforeCount(a,!0))})};var c={getCaret:function(){var a;a=0;var e=b.get(0),c=document.selection,e=e.selectionStart;if(c&&!~navigator.appVersion.indexOf("MSIE 10"))a=c.createRange(),a.moveStart("character",b.is("input")?-b.val().length:-b.text().length),
a=a.text.length;else if(e||"0"===e)a=e;return a},setCaret:function(a){if(b.is(":focus")){var e;e=b.get(0);e.setSelectionRange?e.setSelectionRange(a,a):e.createTextRange&&(e=e.createTextRange(),e.collapse(!0),e.moveEnd("character",a),e.moveStart("character",a),e.select())}},events:function(){b.on("keydown.mask",function(){x=c.val()});b.on("keyup.mask",c.behaviour);b.on("paste.mask drop.mask",function(){setTimeout(function(){b.keydown().keyup()},100)});b.on("change.mask",function(){b.data("changeCalled",
!0)});b.on("blur.mask",function(a){a=g(a.target);a.prop("defaultValue")!==a.val()&&(a.prop("defaultValue",a.val()),a.data("changeCalled")||a.trigger("change"));a.data("changeCalled",!1)});b.on("focusout.mask",function(){d.clearIfNotMatch&&!y.test(c.val())&&c.val("")})},getRegexMask:function(){var a=[],e,b,c,d,k;for(k in f)(e=l.translation[f[k]])?(b=e.pattern.toString().replace(/.{1}$|^.{1}/g,""),c=e.optional,(e=e.recursive)?(a.push(f[k]),d={digit:f[k],pattern:b}):a.push(c||e?b+"?":b)):a.push("\\"+
f[k]);a=a.join("");d&&(a=a.replace(RegExp("("+d.digit+"(.*"+d.digit+")?)"),"($1)?").replace(RegExp(d.digit,"g"),d.pattern));return RegExp(a)},destroyEvents:function(){b.off("keydown.mask keyup.mask paste.mask drop.mask change.mask blur.mask focusout.mask").removeData("changeCalled")},val:function(a){var e=b.is("input");return 0<arguments.length?e?b.val(a):b.text(a):e?b.val():b.text()},getMaskCharactersBeforeCount:function(a,e){for(var b=0,c=0,d=f.length;c<d&&c<a;c++)l.translation[f.charAt(c)]||(a=
e?a+1:a,b++);return b},determineCaretPos:function(a,b,d,h){return l.translation[f.charAt(Math.min(a-1,f.length-1))]?Math.min(a+d-b-h,d):c.determineCaretPos(a+1,b,d,h)},behaviour:function(a){a=a||window.event;var b=a.keyCode||a.which;if(-1===g.inArray(b,l.byPassKeys)){var d=c.getCaret(),f=c.val(),n=f.length,k=d<n,p=c.getMasked(),m=p.length,q=c.getMaskCharactersBeforeCount(m-1)-c.getMaskCharactersBeforeCount(n-1);p!==f&&c.val(p);!k||65===b&&a.ctrlKey||(8!==b&&46!==b&&(d=c.determineCaretPos(d,n,m,q)),
c.setCaret(d));return c.callbacks(a)}},getMasked:function(a){var b=[],g=c.val(),h=0,n=f.length,k=0,p=g.length,m=1,q="push",s=-1,r,u;d.reverse?(q="unshift",m=-1,r=0,h=n-1,k=p-1,u=function(){return-1<h&&-1<k}):(r=n-1,u=function(){return h<n&&k<p});for(;u();){var v=f.charAt(h),w=g.charAt(k),t=l.translation[v];if(t)w.match(t.pattern)?(b[q](w),t.recursive&&(-1===s?s=h:h===r&&(h=s-m),r===s&&(h-=m)),h+=m):t.optional&&(h+=m,k-=m),k+=m;else{if(!a)b[q](v);w===v&&(k+=m);h+=m}}a=f.charAt(r);n!==p+1||l.translation[a]||
b.push(a);return b.join("")},callbacks:function(a){var e=c.val(),g=c.val()!==x;if(!0===g&&"function"===typeof d.onChange)d.onChange(e,a,b,d);if(!0===g&&"function"===typeof d.onKeyPress)d.onKeyPress(e,a,b,d);if("function"===typeof d.onComplete&&e.length===f.length)d.onComplete(e,a,b,d)}};l.remove=function(){var a=c.getCaret(),b=c.getMaskCharactersBeforeCount(a);c.destroyEvents();c.val(l.getCleanVal()).removeAttr("maxlength");c.setCaret(a-b)};l.getCleanVal=function(){return c.getMasked(!0)};l.init()};
g.fn.mask=function(b,f){this.unmask();return this.each(function(){g(this).data("mask",new z(this,b,f))})};g.fn.unmask=function(){return this.each(function(){try{g(this).data("mask").remove()}catch(b){}})};g.fn.cleanVal=function(){return g(this).data("mask").getCleanVal()};g("*[data-mask]").each(function(){var b=g(this),f={};"true"===b.attr("data-mask-reverse")&&(f.reverse=!0);"false"===b.attr("data-mask-maxlength")&&(f.maxlength=!1);"true"===b.attr("data-mask-clearifnotmatch")&&(f.clearIfNotMatch=
!0);b.mask(b.attr("data-mask"),f)})});

/*global jQuery */
/*jshint multistr:true browser:true */
/*!
* FitVids 1.0
*
* Copyright 2011, Chris Coyier - http://css-tricks.com + Dave Rupert - http://daverupert.com
* Credit to Thierry Koblentz - http://www.alistapart.com/articles/creating-intrinsic-ratios-for-video/
* Released under the WTFPL license - http://sam.zoy.org/wtfpl/
*
* Date: Thu Sept 01 18:00:00 2011 -0500
*/

(function( $ ){

  "use strict";

  $.fn.fitVids = function( options ) {
    var settings = {
      customSelector: null
    };

    var div = document.createElement('div'),
        ref = document.getElementsByTagName('base')[0] || document.getElementsByTagName('script')[0];

    div.className = 'fit-vids-style';
    div.innerHTML = '&shy;<style>         \
      .fluid-width-video-wrapper {        \
         width: 100%;                     \
         position: relative;              \
         padding: 0;                      \
      }                                   \
                                          \
      .fluid-width-video-wrapper iframe,  \
      .fluid-width-video-wrapper object,  \
      .fluid-width-video-wrapper embed {  \
         position: absolute;              \
         top: 0;                          \
         left: 0;                         \
         width: 100%;                     \
         height: 100%;                    \
      }                                   \
    </style>';

    ref.parentNode.insertBefore(div,ref);

    if ( options ) {
      $.extend( settings, options );
    }

    return this.each(function(){
      var selectors = [
        "iframe[src*='player.vimeo.com']",
        "iframe[src*='www.youtube.com']",
        "iframe[src*='www.kickstarter.com']",
        "object",
        "embed"
      ];

      if (settings.customSelector) {
        selectors.push(settings.customSelector);
      }

      var $allVideos = $(this).find(selectors.join(','));

      $allVideos.each(function(){
        var $this = $(this);
        if (this.tagName.toLowerCase() === 'embed' && $this.parent('object').length || $this.parent('.fluid-width-video-wrapper').length) { return; }
        var height = ( this.tagName.toLowerCase() === 'object' || ($this.attr('height') && !isNaN(parseInt($this.attr('height'), 10))) ) ? parseInt($this.attr('height'), 10) : $this.height(),
            width = !isNaN(parseInt($this.attr('width'), 10)) ? parseInt($this.attr('width'), 10) : $this.width(),
            aspectRatio = height / width;
        if(!$this.attr('id')){
          var videoID = 'fitvid' + Math.floor(Math.random()*999999);
          $this.attr('id', videoID);
        }
        $this.wrap('<div class="fluid-width-video-wrapper"></div>').parent('.fluid-width-video-wrapper').css('padding-top', (aspectRatio * 100)+"%");
        $this.removeAttr('height').removeAttr('width');
      });
    });
  };
})( jQuery );

/*
 * jQuery Easing v1.3 - http://gsgd.co.uk/sandbox/jquery/easing/
 *
 * Uses the built in easing capabilities added In jQuery 1.1
 * to offer multiple easing options
 *
 * TERMS OF USE - jQuery Easing
 * 
 * Open source under the BSD License. 
 * 
 * Copyright © 2008 George McGinley Smith
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, 
 * are permitted provided that the following conditions are met:
 * 
 * Redistributions of source code must retain the above copyright notice, this list of 
 * conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list 
 * of conditions and the following disclaimer in the documentation and/or other materials 
 * provided with the distribution.
 * 
 * Neither the name of the author nor the names of contributors may be used to endorse 
 * or promote products derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED 
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
 * OF THE POSSIBILITY OF SUCH DAMAGE. 
 *
*/

// t: current time, b: begInnIng value, c: change In value, d: duration
jQuery.easing['jswing'] = jQuery.easing['swing'];

jQuery.extend( jQuery.easing,
{
	def: 'easeOutQuad',
	swing: function (x, t, b, c, d) {
		//alert(jQuery.easing.default);
		return jQuery.easing[jQuery.easing.def](x, t, b, c, d);
	},
	easeInQuad: function (x, t, b, c, d) {
		return c*(t/=d)*t + b;
	},
	easeOutQuad: function (x, t, b, c, d) {
		return -c *(t/=d)*(t-2) + b;
	},
	easeInOutQuad: function (x, t, b, c, d) {
		if ((t/=d/2) < 1) return c/2*t*t + b;
		return -c/2 * ((--t)*(t-2) - 1) + b;
	},
	easeInCubic: function (x, t, b, c, d) {
		return c*(t/=d)*t*t + b;
	},
	easeOutCubic: function (x, t, b, c, d) {
		return c*((t=t/d-1)*t*t + 1) + b;
	},
	easeInOutCubic: function (x, t, b, c, d) {
		if ((t/=d/2) < 1) return c/2*t*t*t + b;
		return c/2*((t-=2)*t*t + 2) + b;
	},
	easeInQuart: function (x, t, b, c, d) {
		return c*(t/=d)*t*t*t + b;
	},
	easeOutQuart: function (x, t, b, c, d) {
		return -c * ((t=t/d-1)*t*t*t - 1) + b;
	},
	easeInOutQuart: function (x, t, b, c, d) {
		if ((t/=d/2) < 1) return c/2*t*t*t*t + b;
		return -c/2 * ((t-=2)*t*t*t - 2) + b;
	},
	easeInQuint: function (x, t, b, c, d) {
		return c*(t/=d)*t*t*t*t + b;
	},
	easeOutQuint: function (x, t, b, c, d) {
		return c*((t=t/d-1)*t*t*t*t + 1) + b;
	},
	easeInOutQuint: function (x, t, b, c, d) {
		if ((t/=d/2) < 1) return c/2*t*t*t*t*t + b;
		return c/2*((t-=2)*t*t*t*t + 2) + b;
	},
	easeInSine: function (x, t, b, c, d) {
		return -c * Math.cos(t/d * (Math.PI/2)) + c + b;
	},
	easeOutSine: function (x, t, b, c, d) {
		return c * Math.sin(t/d * (Math.PI/2)) + b;
	},
	easeInOutSine: function (x, t, b, c, d) {
		return -c/2 * (Math.cos(Math.PI*t/d) - 1) + b;
	},
	easeInExpo: function (x, t, b, c, d) {
		return (t==0) ? b : c * Math.pow(2, 10 * (t/d - 1)) + b;
	},
	easeOutExpo: function (x, t, b, c, d) {
		return (t==d) ? b+c : c * (-Math.pow(2, -10 * t/d) + 1) + b;
	},
	easeInOutExpo: function (x, t, b, c, d) {
		if (t==0) return b;
		if (t==d) return b+c;
		if ((t/=d/2) < 1) return c/2 * Math.pow(2, 10 * (t - 1)) + b;
		return c/2 * (-Math.pow(2, -10 * --t) + 2) + b;
	},
	easeInCirc: function (x, t, b, c, d) {
		return -c * (Math.sqrt(1 - (t/=d)*t) - 1) + b;
	},
	easeOutCirc: function (x, t, b, c, d) {
		return c * Math.sqrt(1 - (t=t/d-1)*t) + b;
	},
	easeInOutCirc: function (x, t, b, c, d) {
		if ((t/=d/2) < 1) return -c/2 * (Math.sqrt(1 - t*t) - 1) + b;
		return c/2 * (Math.sqrt(1 - (t-=2)*t) + 1) + b;
	},
	easeInElastic: function (x, t, b, c, d) {
		var s=1.70158;var p=0;var a=c;
		if (t==0) return b;  if ((t/=d)==1) return b+c;  if (!p) p=d*.3;
		if (a < Math.abs(c)) { a=c; var s=p/4; }
		else var s = p/(2*Math.PI) * Math.asin (c/a);
		return -(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )) + b;
	},
	easeOutElastic: function (x, t, b, c, d) {
		var s=1.70158;var p=0;var a=c;
		if (t==0) return b;  if ((t/=d)==1) return b+c;  if (!p) p=d*.3;
		if (a < Math.abs(c)) { a=c; var s=p/4; }
		else var s = p/(2*Math.PI) * Math.asin (c/a);
		return a*Math.pow(2,-10*t) * Math.sin( (t*d-s)*(2*Math.PI)/p ) + c + b;
	},
	easeInOutElastic: function (x, t, b, c, d) {
		var s=1.70158;var p=0;var a=c;
		if (t==0) return b;  if ((t/=d/2)==2) return b+c;  if (!p) p=d*(.3*1.5);
		if (a < Math.abs(c)) { a=c; var s=p/4; }
		else var s = p/(2*Math.PI) * Math.asin (c/a);
		if (t < 1) return -.5*(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )) + b;
		return a*Math.pow(2,-10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )*.5 + c + b;
	},
	easeInBack: function (x, t, b, c, d, s) {
		if (s == undefined) s = 1.70158;
		return c*(t/=d)*t*((s+1)*t - s) + b;
	},
	easeOutBack: function (x, t, b, c, d, s) {
		if (s == undefined) s = 1.70158;
		return c*((t=t/d-1)*t*((s+1)*t + s) + 1) + b;
	},
	easeInOutBack: function (x, t, b, c, d, s) {
		if (s == undefined) s = 1.70158; 
		if ((t/=d/2) < 1) return c/2*(t*t*(((s*=(1.525))+1)*t - s)) + b;
		return c/2*((t-=2)*t*(((s*=(1.525))+1)*t + s) + 2) + b;
	},
	easeInBounce: function (x, t, b, c, d) {
		return c - jQuery.easing.easeOutBounce (x, d-t, 0, c, d) + b;
	},
	easeOutBounce: function (x, t, b, c, d) {
		if ((t/=d) < (1/2.75)) {
			return c*(7.5625*t*t) + b;
		} else if (t < (2/2.75)) {
			return c*(7.5625*(t-=(1.5/2.75))*t + .75) + b;
		} else if (t < (2.5/2.75)) {
			return c*(7.5625*(t-=(2.25/2.75))*t + .9375) + b;
		} else {
			return c*(7.5625*(t-=(2.625/2.75))*t + .984375) + b;
		}
	},
	easeInOutBounce: function (x, t, b, c, d) {
		if (t < d/2) return jQuery.easing.easeInBounce (x, t*2, 0, c, d) * .5 + b;
		return jQuery.easing.easeOutBounce (x, t*2-d, 0, c, d) * .5 + c*.5 + b;
	}
});

/*
 *
 * TERMS OF USE - EASING EQUATIONS
 * 
 * Open source under the BSD License. 
 * 
 * Copyright © 2001 Robert Penner
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, 
 * are permitted provided that the following conditions are met:
 * 
 * Redistributions of source code must retain the above copyright notice, this list of 
 * conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list 
 * of conditions and the following disclaimer in the documentation and/or other materials 
 * provided with the distribution.
 * 
 * Neither the name of the author nor the names of contributors may be used to endorse 
 * or promote products derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED 
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
 * OF THE POSSIBILITY OF SUCH DAMAGE. 
 *
 */
/**
 * BxSlider v4.1.2 - Fully loaded, responsive content slider
 * http://bxslider.com
 *
 * Copyright 2014, Steven Wanderski - http://stevenwanderski.com - http://bxcreative.com
 * Written while drinking Belgian ales and listening to jazz
 *
 * Released under the MIT license - http://opensource.org/licenses/MIT
 */
!function(t){var e={},s={mode:"horizontal",slideSelector:"",infiniteLoop:!0,hideControlOnEnd:!1,speed:500,easing:null,slideMargin:0,startSlide:0,randomStart:!1,captions:!1,ticker:!1,tickerHover:!1,adaptiveHeight:!1,adaptiveHeightSpeed:500,video:!1,useCSS:!0,preloadImages:"visible",responsive:!0,slideZIndex:50,touchEnabled:!0,swipeThreshold:50,oneToOneTouch:!0,preventDefaultSwipeX:!0,preventDefaultSwipeY:!1,pager:!0,pagerType:"full",pagerShortSeparator:" / ",pagerSelector:null,buildPager:null,pagerCustom:null,controls:!0,nextText:"Next",prevText:"Prev",nextSelector:null,prevSelector:null,autoControls:!1,startText:"Start",stopText:"Stop",autoControlsCombine:!1,autoControlsSelector:null,auto:!1,pause:4e3,autoStart:!0,autoDirection:"next",autoHover:!1,autoDelay:0,minSlides:1,maxSlides:1,moveSlides:0,slideWidth:0,onSliderLoad:function(){},onSlideBefore:function(){},onSlideAfter:function(){},onSlideNext:function(){},onSlidePrev:function(){},onSliderResize:function(){}};t.fn.bxSlider=function(n){if(0==this.length)return this;if(this.length>1)return this.each(function(){t(this).bxSlider(n)}),this;var o={},r=this;e.el=this;var a=t(window).width(),l=t(window).height(),d=function(){o.settings=t.extend({},s,n),o.settings.slideWidth=parseInt(o.settings.slideWidth),o.children=r.children(o.settings.slideSelector),o.children.length<o.settings.minSlides&&(o.settings.minSlides=o.children.length),o.children.length<o.settings.maxSlides&&(o.settings.maxSlides=o.children.length),o.settings.randomStart&&(o.settings.startSlide=Math.floor(Math.random()*o.children.length)),o.active={index:o.settings.startSlide},o.carousel=o.settings.minSlides>1||o.settings.maxSlides>1,o.carousel&&(o.settings.preloadImages="all"),o.minThreshold=o.settings.minSlides*o.settings.slideWidth+(o.settings.minSlides-1)*o.settings.slideMargin,o.maxThreshold=o.settings.maxSlides*o.settings.slideWidth+(o.settings.maxSlides-1)*o.settings.slideMargin,o.working=!1,o.controls={},o.interval=null,o.animProp="vertical"==o.settings.mode?"top":"left",o.usingCSS=o.settings.useCSS&&"fade"!=o.settings.mode&&function(){var t=document.createElement("div"),e=["WebkitPerspective","MozPerspective","OPerspective","msPerspective"];for(var i in e)if(void 0!==t.style[e[i]])return o.cssPrefix=e[i].replace("Perspective","").toLowerCase(),o.animProp="-"+o.cssPrefix+"-transform",!0;return!1}(),"vertical"==o.settings.mode&&(o.settings.maxSlides=o.settings.minSlides),r.data("origStyle",r.attr("style")),r.children(o.settings.slideSelector).each(function(){t(this).data("origStyle",t(this).attr("style"))}),c()},c=function(){r.wrap('<div class="bx-wrapper"><div class="bx-viewport"></div></div>'),o.viewport=r.parent(),o.loader=t('<div class="bx-loading" />'),o.viewport.prepend(o.loader),r.css({width:"horizontal"==o.settings.mode?100*o.children.length+215+"%":"auto",position:"relative"}),o.usingCSS&&o.settings.easing?r.css("-"+o.cssPrefix+"-transition-timing-function",o.settings.easing):o.settings.easing||(o.settings.easing="swing"),f(),o.viewport.css({width:"100%",overflow:"hidden",position:"relative"}),o.viewport.parent().css({maxWidth:p()}),o.settings.pager||o.viewport.parent().css({margin:"0 auto 0px"}),o.children.css({"float":"horizontal"==o.settings.mode?"left":"none",listStyle:"none",position:"relative"}),o.children.css("width",u()),"horizontal"==o.settings.mode&&o.settings.slideMargin>0&&o.children.css("marginRight",o.settings.slideMargin),"vertical"==o.settings.mode&&o.settings.slideMargin>0&&o.children.css("marginBottom",o.settings.slideMargin),"fade"==o.settings.mode&&(o.children.css({position:"absolute",zIndex:0,display:"none"}),o.children.eq(o.settings.startSlide).css({zIndex:o.settings.slideZIndex,display:"block"})),o.controls.el=t('<div class="bx-controls" />'),o.settings.captions&&P(),o.active.last=o.settings.startSlide==x()-1,o.settings.video&&r.fitVids();var e=o.children.eq(o.settings.startSlide);"all"==o.settings.preloadImages&&(e=o.children),o.settings.ticker?o.settings.pager=!1:(o.settings.pager&&T(),o.settings.controls&&C(),o.settings.auto&&o.settings.autoControls&&E(),(o.settings.controls||o.settings.autoControls||o.settings.pager)&&o.viewport.after(o.controls.el)),g(e,h)},g=function(e,i){var s=e.find("img, iframe").length;if(0==s)return i(),void 0;var n=0;e.find("img, iframe").each(function(){t(this).one("load",function(){++n==s&&i()}).each(function(){this.complete&&t(this).load()})})},h=function(){if(o.settings.infiniteLoop&&"fade"!=o.settings.mode&&!o.settings.ticker){var e="vertical"==o.settings.mode?o.settings.minSlides:o.settings.maxSlides,i=o.children.slice(0,e).clone().addClass("bx-clone"),s=o.children.slice(-e).clone().addClass("bx-clone");r.append(i).prepend(s)}o.loader.remove(),S(),"vertical"==o.settings.mode&&(o.settings.adaptiveHeight=!0),o.viewport.height(v()),r.redrawSlider(),o.settings.onSliderLoad(o.active.index),o.initialized=!0,o.settings.responsive&&t(window).bind("resize",Z),o.settings.auto&&o.settings.autoStart&&H(),o.settings.ticker&&L(),o.settings.pager&&q(o.settings.startSlide),o.settings.controls&&W(),o.settings.touchEnabled&&!o.settings.ticker&&O()},v=function(){var e=0,s=t();if("vertical"==o.settings.mode||o.settings.adaptiveHeight)if(o.carousel){var n=1==o.settings.moveSlides?o.active.index:o.active.index*m();for(s=o.children.eq(n),i=1;i<=o.settings.maxSlides-1;i++)s=n+i>=o.children.length?s.add(o.children.eq(i-1)):s.add(o.children.eq(n+i))}else s=o.children.eq(o.active.index);else s=o.children;return"vertical"==o.settings.mode?(s.each(function(){e+=t(this).outerHeight()}),o.settings.slideMargin>0&&(e+=o.settings.slideMargin*(o.settings.minSlides-1))):e=Math.max.apply(Math,s.map(function(){return t(this).outerHeight(!1)}).get()),e},p=function(){var t="100%";return o.settings.slideWidth>0&&(t="horizontal"==o.settings.mode?o.settings.maxSlides*o.settings.slideWidth+(o.settings.maxSlides-1)*o.settings.slideMargin:o.settings.slideWidth),t},u=function(){var t=o.settings.slideWidth,e=o.viewport.width();return 0==o.settings.slideWidth||o.settings.slideWidth>e&&!o.carousel||"vertical"==o.settings.mode?t=e:o.settings.maxSlides>1&&"horizontal"==o.settings.mode&&(e>o.maxThreshold||e<o.minThreshold&&(t=(e-o.settings.slideMargin*(o.settings.minSlides-1))/o.settings.minSlides)),t},f=function(){var t=1;if("horizontal"==o.settings.mode&&o.settings.slideWidth>0)if(o.viewport.width()<o.minThreshold)t=o.settings.minSlides;else if(o.viewport.width()>o.maxThreshold)t=o.settings.maxSlides;else{var e=o.children.first().width();t=Math.floor(o.viewport.width()/e)}else"vertical"==o.settings.mode&&(t=o.settings.minSlides);return t},x=function(){var t=0;if(o.settings.moveSlides>0)if(o.settings.infiniteLoop)t=o.children.length/m();else for(var e=0,i=0;e<o.children.length;)++t,e=i+f(),i+=o.settings.moveSlides<=f()?o.settings.moveSlides:f();else t=Math.ceil(o.children.length/f());return t},m=function(){return o.settings.moveSlides>0&&o.settings.moveSlides<=f()?o.settings.moveSlides:f()},S=function(){if(o.children.length>o.settings.maxSlides&&o.active.last&&!o.settings.infiniteLoop){if("horizontal"==o.settings.mode){var t=o.children.last(),e=t.position();b(-(e.left-(o.viewport.width()-t.width())),"reset",0)}else if("vertical"==o.settings.mode){var i=o.children.length-o.settings.minSlides,e=o.children.eq(i).position();b(-e.top,"reset",0)}}else{var e=o.children.eq(o.active.index*m()).position();o.active.index==x()-1&&(o.active.last=!0),void 0!=e&&("horizontal"==o.settings.mode?b(-e.left,"reset",0):"vertical"==o.settings.mode&&b(-e.top,"reset",0))}},b=function(t,e,i,s){if(o.usingCSS){var n="vertical"==o.settings.mode?"translate3d(0, "+t+"px, 0)":"translate3d("+t+"px, 0, 0)";r.css("-"+o.cssPrefix+"-transition-duration",i/1e3+"s"),"slide"==e?(r.css(o.animProp,n),r.bind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",function(){r.unbind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"),D()})):"reset"==e?r.css(o.animProp,n):"ticker"==e&&(r.css("-"+o.cssPrefix+"-transition-timing-function","linear"),r.css(o.animProp,n),r.bind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",function(){r.unbind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"),b(s.resetValue,"reset",0),N()}))}else{var a={};a[o.animProp]=t,"slide"==e?r.animate(a,i,o.settings.easing,function(){D()}):"reset"==e?r.css(o.animProp,t):"ticker"==e&&r.animate(a,speed,"linear",function(){b(s.resetValue,"reset",0),N()})}},w=function(){for(var e="",i=x(),s=0;i>s;s++){var n="";o.settings.buildPager&&t.isFunction(o.settings.buildPager)?(n=o.settings.buildPager(s),o.pagerEl.addClass("bx-custom-pager")):(n=s+1,o.pagerEl.addClass("bx-default-pager")),e+='<div class="bx-pager-item"><a href="" data-slide-index="'+s+'" class="bx-pager-link">'+n+"</a></div>"}o.pagerEl.html(e)},T=function(){o.settings.pagerCustom?o.pagerEl=t(o.settings.pagerCustom):(o.pagerEl=t('<div class="bx-pager" />'),o.settings.pagerSelector?t(o.settings.pagerSelector).html(o.pagerEl):o.controls.el.addClass("bx-has-pager").append(o.pagerEl),w()),o.pagerEl.on("click","a",I)},C=function(){o.controls.next=t('<a class="bx-next" href="">'+o.settings.nextText+"</a>"),o.controls.prev=t('<a class="bx-prev" href="">'+o.settings.prevText+"</a>"),o.controls.next.bind("click",y),o.controls.prev.bind("click",z),o.settings.nextSelector&&t(o.settings.nextSelector).append(o.controls.next),o.settings.prevSelector&&t(o.settings.prevSelector).append(o.controls.prev),o.settings.nextSelector||o.settings.prevSelector||(o.controls.directionEl=t('<div class="bx-controls-direction" />'),o.controls.directionEl.append(o.controls.prev).append(o.controls.next),o.controls.el.addClass("bx-has-controls-direction").append(o.controls.directionEl))},E=function(){o.controls.start=t('<div class="bx-controls-auto-item"><a class="bx-start" href="">'+o.settings.startText+"</a></div>"),o.controls.stop=t('<div class="bx-controls-auto-item"><a class="bx-stop" href="">'+o.settings.stopText+"</a></div>"),o.controls.autoEl=t('<div class="bx-controls-auto" />'),o.controls.autoEl.on("click",".bx-start",k),o.controls.autoEl.on("click",".bx-stop",M),o.settings.autoControlsCombine?o.controls.autoEl.append(o.controls.start):o.controls.autoEl.append(o.controls.start).append(o.controls.stop),o.settings.autoControlsSelector?t(o.settings.autoControlsSelector).html(o.controls.autoEl):o.controls.el.addClass("bx-has-controls-auto").append(o.controls.autoEl),A(o.settings.autoStart?"stop":"start")},P=function(){o.children.each(function(){var e=t(this).find("img:first").attr("title");void 0!=e&&(""+e).length&&t(this).append('<div class="bx-caption"><span>'+e+"</span></div>")})},y=function(t){o.settings.auto&&r.stopAuto(),r.goToNextSlide(),t.preventDefault()},z=function(t){o.settings.auto&&r.stopAuto(),r.goToPrevSlide(),t.preventDefault()},k=function(t){r.startAuto(),t.preventDefault()},M=function(t){r.stopAuto(),t.preventDefault()},I=function(e){o.settings.auto&&r.stopAuto();var i=t(e.currentTarget),s=parseInt(i.attr("data-slide-index"));s!=o.active.index&&r.goToSlide(s),e.preventDefault()},q=function(e){var i=o.children.length;return"short"==o.settings.pagerType?(o.settings.maxSlides>1&&(i=Math.ceil(o.children.length/o.settings.maxSlides)),o.pagerEl.html(e+1+o.settings.pagerShortSeparator+i),void 0):(o.pagerEl.find("a").removeClass("active"),o.pagerEl.each(function(i,s){t(s).find("a").eq(e).addClass("active")}),void 0)},D=function(){if(o.settings.infiniteLoop){var t="";0==o.active.index?t=o.children.eq(0).position():o.active.index==x()-1&&o.carousel?t=o.children.eq((x()-1)*m()).position():o.active.index==o.children.length-1&&(t=o.children.eq(o.children.length-1).position()),t&&("horizontal"==o.settings.mode?b(-t.left,"reset",0):"vertical"==o.settings.mode&&b(-t.top,"reset",0))}o.working=!1,o.settings.onSlideAfter(o.children.eq(o.active.index),o.oldIndex,o.active.index)},A=function(t){o.settings.autoControlsCombine?o.controls.autoEl.html(o.controls[t]):(o.controls.autoEl.find("a").removeClass("active"),o.controls.autoEl.find("a:not(.bx-"+t+")").addClass("active"))},W=function(){1==x()?(o.controls.prev.addClass("disabled"),o.controls.next.addClass("disabled")):!o.settings.infiniteLoop&&o.settings.hideControlOnEnd&&(0==o.active.index?(o.controls.prev.addClass("disabled"),o.controls.next.removeClass("disabled")):o.active.index==x()-1?(o.controls.next.addClass("disabled"),o.controls.prev.removeClass("disabled")):(o.controls.prev.removeClass("disabled"),o.controls.next.removeClass("disabled")))},H=function(){o.settings.autoDelay>0?setTimeout(r.startAuto,o.settings.autoDelay):r.startAuto(),o.settings.autoHover&&r.hover(function(){o.interval&&(r.stopAuto(!0),o.autoPaused=!0)},function(){o.autoPaused&&(r.startAuto(!0),o.autoPaused=null)})},L=function(){var e=0;if("next"==o.settings.autoDirection)r.append(o.children.clone().addClass("bx-clone"));else{r.prepend(o.children.clone().addClass("bx-clone"));var i=o.children.first().position();e="horizontal"==o.settings.mode?-i.left:-i.top}b(e,"reset",0),o.settings.pager=!1,o.settings.controls=!1,o.settings.autoControls=!1,o.settings.tickerHover&&!o.usingCSS&&o.viewport.hover(function(){r.stop()},function(){var e=0;o.children.each(function(){e+="horizontal"==o.settings.mode?t(this).outerWidth(!0):t(this).outerHeight(!0)});var i=o.settings.speed/e,s="horizontal"==o.settings.mode?"left":"top",n=i*(e-Math.abs(parseInt(r.css(s))));N(n)}),N()},N=function(t){speed=t?t:o.settings.speed;var e={left:0,top:0},i={left:0,top:0};"next"==o.settings.autoDirection?e=r.find(".bx-clone").first().position():i=o.children.first().position();var s="horizontal"==o.settings.mode?-e.left:-e.top,n="horizontal"==o.settings.mode?-i.left:-i.top,a={resetValue:n};b(s,"ticker",speed,a)},O=function(){o.touch={start:{x:0,y:0},end:{x:0,y:0}},o.viewport.bind("touchstart",X)},X=function(t){if(o.working)t.preventDefault();else{o.touch.originalPos=r.position();var e=t.originalEvent;o.touch.start.x=e.changedTouches[0].pageX,o.touch.start.y=e.changedTouches[0].pageY,o.viewport.bind("touchmove",Y),o.viewport.bind("touchend",V)}},Y=function(t){var e=t.originalEvent,i=Math.abs(e.changedTouches[0].pageX-o.touch.start.x),s=Math.abs(e.changedTouches[0].pageY-o.touch.start.y);if(3*i>s&&o.settings.preventDefaultSwipeX?t.preventDefault():3*s>i&&o.settings.preventDefaultSwipeY&&t.preventDefault(),"fade"!=o.settings.mode&&o.settings.oneToOneTouch){var n=0;if("horizontal"==o.settings.mode){var r=e.changedTouches[0].pageX-o.touch.start.x;n=o.touch.originalPos.left+r}else{var r=e.changedTouches[0].pageY-o.touch.start.y;n=o.touch.originalPos.top+r}b(n,"reset",0)}},V=function(t){o.viewport.unbind("touchmove",Y);var e=t.originalEvent,i=0;if(o.touch.end.x=e.changedTouches[0].pageX,o.touch.end.y=e.changedTouches[0].pageY,"fade"==o.settings.mode){var s=Math.abs(o.touch.start.x-o.touch.end.x);s>=o.settings.swipeThreshold&&(o.touch.start.x>o.touch.end.x?r.goToNextSlide():r.goToPrevSlide(),r.stopAuto())}else{var s=0;"horizontal"==o.settings.mode?(s=o.touch.end.x-o.touch.start.x,i=o.touch.originalPos.left):(s=o.touch.end.y-o.touch.start.y,i=o.touch.originalPos.top),!o.settings.infiniteLoop&&(0==o.active.index&&s>0||o.active.last&&0>s)?b(i,"reset",200):Math.abs(s)>=o.settings.swipeThreshold?(0>s?r.goToNextSlide():r.goToPrevSlide(),r.stopAuto()):b(i,"reset",200)}o.viewport.unbind("touchend",V)},Z=function(){var e=t(window).width(),i=t(window).height();(a!=e||l!=i)&&(a=e,l=i,r.redrawSlider(),o.settings.onSliderResize.call(r,o.active.index))};return r.goToSlide=function(e,i){if(!o.working&&o.active.index!=e)if(o.working=!0,o.oldIndex=o.active.index,o.active.index=0>e?x()-1:e>=x()?0:e,o.settings.onSlideBefore(o.children.eq(o.active.index),o.oldIndex,o.active.index),"next"==i?o.settings.onSlideNext(o.children.eq(o.active.index),o.oldIndex,o.active.index):"prev"==i&&o.settings.onSlidePrev(o.children.eq(o.active.index),o.oldIndex,o.active.index),o.active.last=o.active.index>=x()-1,o.settings.pager&&q(o.active.index),o.settings.controls&&W(),"fade"==o.settings.mode)o.settings.adaptiveHeight&&o.viewport.height()!=v()&&o.viewport.animate({height:v()},o.settings.adaptiveHeightSpeed),o.children.filter(":visible").fadeOut(o.settings.speed).css({zIndex:0}),o.children.eq(o.active.index).css("zIndex",o.settings.slideZIndex+1).fadeIn(o.settings.speed,function(){t(this).css("zIndex",o.settings.slideZIndex),D()});else{o.settings.adaptiveHeight&&o.viewport.height()!=v()&&o.viewport.animate({height:v()},o.settings.adaptiveHeightSpeed);var s=0,n={left:0,top:0};if(!o.settings.infiniteLoop&&o.carousel&&o.active.last)if("horizontal"==o.settings.mode){var a=o.children.eq(o.children.length-1);n=a.position(),s=o.viewport.width()-a.outerWidth()}else{var l=o.children.length-o.settings.minSlides;n=o.children.eq(l).position()}else if(o.carousel&&o.active.last&&"prev"==i){var d=1==o.settings.moveSlides?o.settings.maxSlides-m():(x()-1)*m()-(o.children.length-o.settings.maxSlides),a=r.children(".bx-clone").eq(d);n=a.position()}else if("next"==i&&0==o.active.index)n=r.find("> .bx-clone").eq(o.settings.maxSlides).position(),o.active.last=!1;else if(e>=0){var c=e*m();n=o.children.eq(c).position()}if("undefined"!=typeof n){var g="horizontal"==o.settings.mode?-(n.left-s):-n.top;b(g,"slide",o.settings.speed)}}},r.goToNextSlide=function(){if(o.settings.infiniteLoop||!o.active.last){var t=parseInt(o.active.index)+1;r.goToSlide(t,"next")}},r.goToPrevSlide=function(){if(o.settings.infiniteLoop||0!=o.active.index){var t=parseInt(o.active.index)-1;r.goToSlide(t,"prev")}},r.startAuto=function(t){o.interval||(o.interval=setInterval(function(){"next"==o.settings.autoDirection?r.goToNextSlide():r.goToPrevSlide()},o.settings.pause),o.settings.autoControls&&1!=t&&A("stop"))},r.stopAuto=function(t){o.interval&&(clearInterval(o.interval),o.interval=null,o.settings.autoControls&&1!=t&&A("start"))},r.getCurrentSlide=function(){return o.active.index},r.getCurrentSlideElement=function(){return o.children.eq(o.active.index)},r.getSlideCount=function(){return o.children.length},r.redrawSlider=function(){o.children.add(r.find(".bx-clone")).outerWidth(u()),o.viewport.css("height",v()),o.settings.ticker||S(),o.active.last&&(o.active.index=x()-1),o.active.index>=x()&&(o.active.last=!0),o.settings.pager&&!o.settings.pagerCustom&&(w(),q(o.active.index))},r.destroySlider=function(){o.initialized&&(o.initialized=!1,t(".bx-clone",this).remove(),o.children.each(function(){void 0!=t(this).data("origStyle")?t(this).attr("style",t(this).data("origStyle")):t(this).removeAttr("style")}),void 0!=t(this).data("origStyle")?this.attr("style",t(this).data("origStyle")):t(this).removeAttr("style"),t(this).unwrap().unwrap(),o.controls.el&&o.controls.el.remove(),o.controls.next&&o.controls.next.remove(),o.controls.prev&&o.controls.prev.remove(),o.pagerEl&&o.settings.controls&&o.pagerEl.remove(),t(".bx-caption",this).remove(),o.controls.autoEl&&o.controls.autoEl.remove(),clearInterval(o.interval),o.settings.responsive&&t(window).unbind("resize",Z))},r.reloadSlider=function(t){void 0!=t&&(n=t),r.destroySlider(),d()},d(),this}}(jQuery);
(function(h){h.deparam=function(i,j){var d={},k={"true":!0,"false":!1,"null":null};h.each(i.replace(/\+/g," ").split("&"),function(i,l){var m;var a=l.split("="),c=decodeURIComponent(a[0]),g=d,f=0,b=c.split("]["),e=b.length-1;/\[/.test(b[0])&&/\]$/.test(b[e])?(b[e]=b[e].replace(/\]$/,""),b=b.shift().split("[").concat(b),e=b.length-1):e=0;if(2===a.length)if(a=decodeURIComponent(a[1]),j&&(a=a&&!isNaN(a)?+a:"undefined"===a?void 0:void 0!==k[a]?k[a]:a),e)for(;f<=e;f++)c=""===b[f]?g.length:b[f],m=g[c]=
f<e?g[c]||(b[f+1]&&isNaN(b[f+1])?{}:[]):a,g=m;else h.isArray(d[c])?d[c].push(a):d[c]=void 0!==d[c]?[d[c],a]:a;else c&&(d[c]=j?void 0:"")});return d}})(jQuery);
/**
Note: The below plugin has been modified:
1. CSS has been moved to jquery.liveaddress.css file
2. checkmark tag (smarty-tag) has been hidden
**/
/**
 LiveAddress International API jQuery Plugin
 by SmartyStreets - smartystreets.com

 (c) 2017 SmartyStreets

 LICENSED UNDER THE GNU GENERAL PUBLIC LICENSE VERSION 3
 (http://opensource.org/licenses/gpl-3.0.html)

 Documentation:      http://smartystreets.com/kb/liveaddress-api/website-forms
 Version:        (See variable below for version)
 Minified:        (See documentation or GitHub repository for minified script file)
 Latest stable version:  (See documentation)
 Bleeding-edge release:  https://github.com/smartystreets/jquery.liveaddress

 Feel free to contribute to this project on GitHub by
 submitting pull requests and reporting issues.
 **/


(function ($, window, document) {
	"use strict"; //  http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/

	/*
	 *	PRIVATE MEMBERS
	 */

	var instance; // Contains public-facing functions and variables
	var ui = new UI; // Internal use only, for UI-related tasks
	var version = "3.4.3"; // Version of this copy of the script

	var defaults = {
		candidates: 3, // Number of suggestions to show if ambiguous
		autocomplete: 10, // Number of autocomplete suggestions; set to 0 or false to disable
		requestUrlInternational: "https://international-street.api.smartystreets.com/verify", // International API endpoint
		requestUrlUS: "https://us-street.api.smartystreets.com/street-address", // US API endpoint
		timeout: 5000, // How long to wait before the request times out (5000 = 5 seconds)
		speed: "medium", // Animation speed
		ambiguousMessage: "Matched multiple addresses.<br>which did you mean?", // Message when address is ambiguous
		invalidMessage: "You entered an unknown address:", // Message when address is invalid
		invalidCountryMessage: "Unknown country", // Message when the country is invalid
		missingSecondaryMessage: "You forgot your apt/suite number or entered an unknown apt/suite number", // Message when address is missing a secondary number
		certifyMessage: "Use as it is",
		missingInputMessage: "You didn't enter enough information",
		changeMessage: "Go back",
		noSuggestionsMessage: "No suggestions",
		fieldSelector: "input[type=text], input:not([type]), textarea, select", // Selector for possible address-related form elements
		submitSelector: "[type=submit], [type=image], [type=button]:last, button:last", // Selector to find a likely submit button or submit image (in a form)
		target: "US"
	};
	var config = {}; // Configuration settings as set by the user or just the defaults
	var forms = []; // List of forms (which hold lists of addresses)
	var defaultSelector = "body"; // Default selector which should be over the whole page (must be compatible with the .find() function; not document)
	var mappedAddressCount = 0; // The number of currently-mapped addresses
	var acceptableFields = [
		"freeform", "address1", "address2", "address3", "address4", "organization", "locality", "administrative_area", "postal_code", "country", "match"
	]; // API input field names

	/*
	 *	ENTRY POINT
	 */

	$.LiveAddress = function (arg) {
		return $(defaultSelector).LiveAddress(arg);
	};

	$.fn.LiveAddress = function (arg) {
		// Make sure the jQuery version is compatible
		var vers = $.fn.jquery.split(".");
		if (vers.length >= 2) {
			if (vers[0] < 1 || (vers[0] == 1 && vers[1] < 5)) {
				console.log("jQuery version " + $.fn.jquery + " found, but LiveAddress requires jQuery version 1.5 or higher. Aborting.");
				return false;
			}
		} else
			return false;

		if (arg.debug)
			console.log("LiveAddress API jQuery Plugin version " + version + " (Debug mode)");

		// Mapping fields requires that the document be fully loaded in order to attach UI elements
		if (document.readyState === "complete")
			window.loaded = true;
		else
			$(window).on("load", function () {
				window.loaded = true;
			});

		// Determine if user passed in an API key or a settings/config object
		if (typeof arg === "string") {
			// Use the default configuration
			config = {
				key: arg
			};
		} else if (typeof arg === "object") {
			// Use the user's configuration on top of the default
			config = arg;
		}

		// Enforce some defaults
		config.candidates = config.candidates || defaults.candidates;
		config.ui = typeof config.ui === "undefined" ? true : config.ui;
		config.autoVerify = config.autoVerify !== true && config.autoVerify !== false ? true : config.autoVerify;
		config.submitVerify = typeof config.submitVerify === "undefined" ? true : config.submitVerify;
		config.timeout = config.timeout || defaults.timeout;
		config.ambiguousMessage = config.ambiguousMessage || defaults.ambiguousMessage;
		config.invalidMessage = config.invalidMessage || defaults.invalidMessage;
		config.invalidCountryMessage = config.invalidCountryMessage || defaults.invalidCountryMessage;
		config.missingSecondaryMessage = config.missingSecondaryMessage || defaults.missingSecondaryMessage;
		config.certifyMessage = config.certifyMessage || defaults.certifyMessage;
		config.missingInputMessage = config.missingInputMessage || defaults.missingInputMessage;
		config.changeMessage = config.changeMessage || defaults.changeMessage;
		config.noSuggestionsMessage = config.noSuggestionsMessage || defaults.noSuggestionsMessage;
		config.fieldSelector = config.fieldSelector || defaults.fieldSelector;
		config.submitSelector = config.submitSelector || defaults.submitSelector;
		config.requestUrlInternational = config.requestUrlInternational || defaults.requestUrlInternational;
		config.requestUrlUS = config.requestUrlUS || defaults.requestUrlUS;
		config.autocomplete = typeof config.autocomplete === "undefined" ? defaults.autocomplete : config.autocomplete;
		config.cityFilter = typeof config.cityFilter === "undefined" ? "" : config.cityFilter;
		config.stateFilter = typeof config.stateFilter === "undefined" ? "" : config.stateFilter;
		config.cityStatePreference = typeof config.cityStatePreference === "undefined" ? "" : config.cityStatePreference;
		config.geolocate = typeof config.geolocate === "undefined" ? true : config.geolocate;
		config.geolocatePrecision = typeof config.geolocatePrecision === "undefined" ? "city" : config.geolocatePrecision;
		config.waitForStreet = typeof config.waitForStreet === "undefined" ? false : config.waitForStreet;
		config.verifySecondary = typeof config.verifySecondary === "undefined" ? false : config.verifySecondary;
		config.geocode = typeof config.geocode === "undefined" ? false : config.geocode;
		config.enforceVerification = typeof config.enforceVerification === "undefined" ? false : config.enforceVerification;
		config.agent = typeof config.agent === "undefined" ? "" : config.agent;

		if (typeof config.autocomplete === "number" && config.autocomplete < 1) {
			config.autocomplete = false;
		}

		if (!config.target || typeof config.target != "string") {
			config.target = defaults.target;
		}
		config.target = config.target.toUpperCase().replace(/\s+/g, "").split("|");

		/*
		 *	EXPOSED (PUBLIC) FUNCTIONS
		 */
		instance = {
			events: {
				FieldsMapped: function (event, data) {
					if (config.debug)
						console.log("EVENT:", "FieldsMapped", "(Fields mapped to their respective addresses)", event, data);

					// We wait until the window is all loaded in case some elements are still loading
					window.loaded ? ui.postMappingOperations() : $(ui.postMappingOperations);
				},

				MapInitialized: function (event, data) {
					if (config.debug)
						console.log("EVENT:", "MapInitialized", "(Mapped fields have been wired up to the window" +
							(config.ui ? ", document, and UI" : " and document") + ")", event, data);
				},

				AutocompleteInvoked: function (event, data) {
					if (config.debug)
						console.log("EVENT:", "AutocompleteInvoked",
							"(A request is about to be sent to the autocomplete service)", event, data);
					ui.requestAutocomplete(event, data);
				},

				AutocompleteReceived: function (event, data) {
					if (config.debug)
						console.log("EVENT:", "AutocompleteReceived",
							"(A response has just been received from the autocomplete service)", event, data);
					ui.showAutocomplete(event, data);
				},

				AutocompleteUsed: function (event, data) {
					if (config.debug)
						console.log("EVENT:", "AutocompleteUsed",
							"(A suggested address was used from the autocomplete service)", event, data);
				},

				AddressChanged: function (event, data) {
					if (config.debug)
						console.log("EVENT:", "AddressChanged", "(Address changed)", event, data);

					// If autoVerify is on, AND there's enough input in the address,
					// AND it hasn't been verified automatically before -OR- it's a freeform address,
					// AND autoVerification isn't suppressed (from an Undo click, even on a freeform address)
					// AND it has a DOM element (it's not just a programmatic Address object)
					// AND the address is "active" for verification
					// AND the autocomplete suggestions aren't visible
					// AND the form, if any, isn't already chewing on an address...
					// THEN verification has been invoked.
					if (config.autoVerify && data.address.enoughInput() && (data.address.verifyCount == 0 ||
						data.address.isFreeform() || data.address.usedAutocomplete) && !data.suppressAutoVerification && data.address.hasDomFields() &&
						data.address.active && !data.address.autocompleteVisible() &&
						(data.address.form && !data.address.form.processing))
						trigger("VerificationInvoked", {
							address: data.address
						});
					data.address.usedAutocomplete = false;
				},

				VerificationInvoked: function (event, data) {
					if (config.debug)
						console.log("EVENT:", "VerificationInvoked", "(Address verification invoked)", event, data);

					// Abort now if an address in the same form is already being processed
					if (!data.address || (data.address && data.address.form && data.address.form.processing)) {
						if (config.debug)
							console.log("NOTICE: VerificationInvoked event handling aborted. Address is missing or an address in the " +
								"same form is already processing.");
						return;
					} else if (data.address.status() == "accepted" && !data.verifyAccepted) {
						if (config.debug)
							console.log("NOTICE: VerificationInvoked raised on an accepted or un-changed address. Nothing to do.");
						return trigger("Completed", data);
					} else if (data.address.form)
						data.address.form.processing = true;

					data.address.verify(data.invoke, data.invokeFn);
				},

				RequestSubmitted: function (event, data) {
					if (config.debug)
						console.log("EVENT:", "RequestSubmitted", "(Request submitted to server)", event, data);

					ui.showLoader(data.address);
				},

				ResponseReceived: function (event, data) {
					if (config.debug)
						console.log("EVENT:", "ResponseReceived",
							"(Response received from server, but has not been inspected)", event, data);

					ui.hideLoader(data.address);

					if (typeof data.invoke === "function")
						data.invoke(data.response); // User-defined callback function; we're all done here.

					if (data.response.isInvalid())
						trigger("AddressWasInvalid", data);
					else if (data.response.isAmbiguous())
						trigger("AddressWasAmbiguous", data);
					else if (config.verifySecondary && data.response.isMissingSecondary())
						trigger("AddressWasMissingSecondary", data);
					else if (data.response.isValid())
						trigger("AddressWasValid", data);
				},

				RequestTimedOut: function (event, data) {
					if (config.debug)
						console.log("EVENT:", "RequestTimedOut", "(Request timed out)", event, data);

					if (data.address.form)
						delete data.address.form.processing; // Tell the potentially duplicate event handlers that we're done.

					// If this was a form submit, don't let a network failure hold them back; just accept it and move on
					if (data.invoke)
						data.address.accept(data, false);

					ui.enableFields(data.address);
					ui.hideLoader(data.address);
				},

				AddressWasValid: function (event, data) {
					if (config.debug)
						console.log("EVENT:", "AddressWasValid", "(Response indicates input address was valid)", event, data);

					var addr = data.address;
					var resp = data.response;

					data.response.chosen = resp.raw[0];
					addr.replaceWith(resp.raw[0], true, event);
					addr.accept(data);
				},

				AddressWasAmbiguous: function (event, data) {
					if (config.debug)
						console.log("EVENT:", "AddressWasAmbiguous", "(Response indiciates input address was ambiguous)", event, data);

					ui.showAmbiguous(data);
				},

				AddressWasInvalid: function (event, data) {
					if (config.debug)
						console.log("EVENT:", "AddressWasInvalid", "(Response indicates input address was invalid)", event, data);

					ui.showInvalid(data);
				},

				CountryWasInvalid: function (event, data) {
					if (config.debug)
						console.log("EVENT:", "CountryWasInvalid", "(Pre-verification check indicates that the country was invalid)", event, data);

					ui.hideLoader(data.address);
					ui.showInvalidCountry(data);
				},

				AddressWasMissingSecondary: function (event, data) {
					if (config.debug)
						console.log("EVENT:", "AddressWasMissingSecondary",
							"(Response indicates input address was missing secondary", event, data);

					ui.showMissingSecondary(data);
				},

				AddressWasMissingInput: function (event, data) {
					if (config.debug)
						console.log("EVENT:", "AddressWasMissingInput", "(Pre-verification check indicates that there was not enough input)", event, data);
					ui.showMissingInput(data);
				},

				AddedSecondary: function (event, data) {
					if (config.debug)
						console.log("EVENT:", "AddedSecondary", "(User entered a secondary number to attempt revalidation)", event, data);
					data.address.verify(data.invoke, data.invokeFn);
				},

				OriginalInputSelected: function (event, data) {
					if (config.debug)
						console.log("EVENT:", "OriginalInputSelected", "(User chose to use original input)", event, data);

					data.address.accept(data, false);
				},

				UsedSuggestedAddress: function (event, data) {
					if (config.debug)
						console.log("EVENT:", "UsedSuggestedAddress", "(User chose to a suggested address)", event, data);

					data.response.chosen = data.chosenCandidate;
					data.address.replaceWith(data.chosenCandidate, true, event);
					data.address.accept(data);
				},

				InvalidAddressRejected: function (event, data) {
					if (config.debug)
						console.log("EVENT:", "InvalidAddressRejected", "(User chose to correct an invalid address)", event, data);

					if (data.address.form)
						delete data.address.form.processing; // We're done with this address and ready for the next, potentially

					trigger("Completed", data);
				},

				AddressAccepted: function (event, data) {
					if (config.debug)
						console.log("EVENT:", "AddressAccepted", "(Address marked accepted)", event, data);

					if (!data)
						data = {};

					if (data.address && data.address.form)
						delete data.address.form.processing; // We're done with this address and ready for the next, potentially

					// If this was the result of a form submit, re-submit the form (whether by clicking the button or raising form submit event)
					if (data.invoke && data.invokeFn)
						submitForm(data.invoke, data.invokeFn);

					trigger("Completed", data);
				},

				Completed: function (event, data) {
					if (config.debug)
						console.log("EVENT:", "Completed", "(All done)", event, data);

					if (data.address) {
						ui.enableFields(data.address);
						if (data.address.form)
							delete data.address.form.processing; // We're done with this address and ready for the next, potentially
					}
				}
			},
			on: function (eventType, userHandler) {
				if (!this.events[eventType] || typeof userHandler !== "function")
					return false;

				var previousHandler = this.events[eventType];
				this.events[eventType] = function (event, data) {
					userHandler(event, data, previousHandler);
				};
			},
			mapFields: function (map) {
				var doMap = function (map) {
					if (typeof map === "object")
						return ui.mapFields(map);
					else if (!map && typeof config.addresses === "object")
						return ui.mapFields(config.addresses);
					else
						return false;
				};
				if ($.isReady)
					doMap(map);
				else
					$(function () {
						doMap(map);
					});
			},
			makeAddress: function (addressData) {
				if (typeof addressData !== "object")
					return instance.getMappedAddressByID(addressData) || new Address({
							address1: addressData
						});
				else
					return new Address(addressData);
			},
			verify: function (input, callback) {
				var addr = instance.makeAddress(input); // Below means, force re-verify even if accepted/unchanged.
				trigger("VerificationInvoked", {
					address: addr,
					verifyAccepted: true,
					invoke: callback
				});
			},
			getMappedAddresses: function () {
				var addr = [];
				for (var i = 0; i < forms.length; i++)
					for (var j = 0; j < forms[i].addresses.length; j++)
						addr.push(forms[i].addresses[j]);
				return addr;
			},
			getMappedAddressByID: function (addressID) {
				for (var i = 0; i < forms.length; i++)
					for (var j = 0; j < forms[i].addresses.length; j++)
						if (forms[i].addresses[j].id() == addressID)
							return forms[i].addresses[j];
			},
			setKey: function (htmlkey) {
				config.key = htmlkey;
			},
			setCityFilter: function (cities) {
				config.cityFilter = cities;
			},
			setStateFilter: function (states) {
				config.stateFilter = states;
			},
			setCityStatePreference: function (pref) {
				config.cityStatePreference = pref;
			},
			activate: function (addressID) {
				var addr = instance.getMappedAddressByID(addressID);
				if (addr) {
					addr.active = true;
					ui.showSmartyUI(addressID);
				}
			},
			deactivate: function (addressID) {
				if (!addressID) {
					return ui.clean();
				}
				var addr = instance.getMappedAddressByID(addressID);
				if (addr) {
					addr.active = false;
					addr.verifyCount = 0;
					addr.unaccept();
					ui.hideSmartyUI(addressID);
				}
			},
			autoVerify: function (setting) {
				if (typeof setting === "undefined")
					return config.autoVerify;
				else if (setting === false)
					config.autoVerify = false;
				else if (setting === true)
					config.autoVerify = true;
				for (var i = 0; i < forms.length; i++) {
					for (var j = 0; j < forms[i].addresses.length; j++) {
						forms[i].addresses[j].verifyCount = 0;
					}
				}
			},
			version: version
		};

		// Turn off old handlers then turn on each handler with an event
		for (var prop in instance.events) {
			if (instance.events.hasOwnProperty(prop)) {
				$(document).off(prop, HandleEvent);
				turnOn(prop);
			}
		}

		// Map the fields
		if (config.target.indexOf("US") >= 0 || config.target.indexOf("INTERNATIONAL") >= 0) {
			instance.mapFields();
		} else if (config.debug) {
			console.log("Proper target not set in configuration. Please use \"US\" or \"INTERNATIONAL\".");
		}

		return instance;
	};

	/*
	 *	PRIVATE FUNCTIONS / OBJECTS
	 */

	/*
	 The UI object auto-maps the fields and controls
	 interaction with the user during the address
	 verification process.
	 */
	function UI() {
		var submitHandler; // Function which is later bound to handle form submits
		var formDataProperty = "smartyForm"; // Indicates whether we've stored the form already
		var autocompleteResponse; // The latest response from the autocomplete server
		var autocplCounter = 0; // A counter so that only the most recent JSONP request is used
		var autocplRequests = []; // The array that holds autocomplete requests in order
		var loaderWidth = 24,
			loaderHeight = 8; // TODO: Update these if the image changes

		this.postMappingOperations = function () {
			// Injects materials into the DOM, binds to form submit events, etc... very important.

			if (config.ui) {

				// For each address on the page, inject the loader and "address verified" markup after the last element
				var addresses = instance.getMappedAddresses();
				for (var i = 0; i < addresses.length; i++) {
					var id = addresses[i].id();
					$("body").append("<div class=\"smarty-ui\"><div title=\"Loading...\" class=\"smarty-dots smarty-addr-" + id + "\"></div></div>");
					var offset = uiTagOffset(addresses[i].corners(true));
					$("body").append("<div class=\"smarty-ui\" style=\"top: " + offset.top + "px; left: " + offset.left +
						"px;\"><a href=\"javascript:\" class=\"smarty-tag smarty-tag-grayed smarty-addr-" + id +
						"\" title=\"Address not verified. Click to verify.\" data-addressid=\"" + id +
						"\"><span class=\"smarty-tag-check\">&#10003;</span><span class=\"smarty-tag-text\">Verify</span></a></div>");

					// Move the UI elements around when browser window is resized
					$(window).on("resize.smarty", {
						addr: addresses[i]
					}, function (e) {
						var addr = e.data.addr;
						var offset = uiTagOffset(addr.corners(true)); // Position of lil' tag
						$(".smarty-tag.smarty-addr-" + addr.id())
							.parent(".smarty-ui")
							.css("top", offset.top + "px")
							.css("left", offset.left + "px");

						var addrOffset = addr.corners(); // Position of any popup windows
						$(".smarty-popup.smarty-addr-" + addr.id())
							.parent(".smarty-ui")
							.css("top", addrOffset.top + "px")
							.css("left", addrOffset.left + "px");

						if (config.autocomplete) { // Position of autocomplete boxes
							var containerUi = $(".smarty-autocomplete.smarty-addr-" + addr.id()).closest(".smarty-ui");
							var domFields = addr.getDomFields();
							var mainInput = "";
							if (domFields.address1) {
								mainInput = "address1";
							} else if (domFields.freeform) {
								mainInput = "freeform";
							}
							if (mainInput !== "") {
								containerUi.css({
									"left": $(domFields[mainInput]).offset().left + "px",
									"top": ($(domFields[mainInput]).offset().top + $(domFields[mainInput]).outerHeight(false)) + "px"
								});
							}
						}
					});
				}

				$("body").on("click", ".smarty-tag-grayed", function (e) {
					// "Verify" clicked -- manually invoke verification
					var addrId = $(this).data("addressid");
					instance.verify(addrId);
				});

				$("body").on("click", ".smarty-undo", function (e) {
					// "Undo" clicked -- replace field values with previous input
					var addrId = $(this).parent().data("addressid");
					var addr = instance.getMappedAddressByID(addrId);
					addr.undo(true);
					// If fields are re-mapped after an address was verified, it loses its "accepted" status even if no values were changed.
					// Thus, in some rare occasions, the undo link and the "verified!" text may not disappear when the user clicks "Undo",
					// The undo functionality still works in those cases, but with no visible changes, the address doesn't fire "AddressChanged"...
				});

				// Prepare autocomplete UI
				if (config.autocomplete && config.key) {
					// For every mapped address, wire up autocomplete
					for (var i = 0; i < forms.length; i++) {
						var f = forms[i];

						for (var j = 0; j < f.addresses.length; j++) {
							var addr = f.addresses[j];
							var domFields = addr.getDomFields();
							var mainInput = "";
							if (domFields.address1) {
								mainInput = "address1";
							} else if (domFields.freeform) {
								mainInput = "freeform";
							}
							if (mainInput !== "") {
								var strField = $(domFields[mainInput]);
								var containerUi = $("<div class=\"smarty-ui\"></div>");
								var autoUi = $("<div class=\"smarty-autocomplete\"></div>");

								autoUi.addClass("smarty-addr-" + addr.id());
								containerUi.data("addrID", addr.id());
								containerUi.append(autoUi);

								containerUi.css({
									"position": "absolute",
									"left": strField.offset().left + "px",
									"top": (strField.offset().top + strField.outerHeight(false)) + "px"
								});

								containerUi.hide().appendTo("body");

								containerUi.on("click", ".smarty-suggestion", {
									addr: addr,
									containerUi: containerUi
								}, function (event) {
									var sugg = autocompleteResponse.suggestions[$(this).data("suggIndex")];
									useAutocompleteSuggestion(event.data.addr, sugg, event.data.containerUi);
								});

								containerUi.on("mouseover", ".smarty-suggestion", function () {
									$(".smarty-active-suggestion").removeClass("smarty-active-suggestion");
									$(this).addClass("smarty-active-suggestion");
								});

								containerUi.on("mouseleave", ".smarty-active-suggestion", function () {
									$(this).removeClass("smarty-active-suggestion");
								});
								strField.attr("autocomplete", "off"); // Tell Firefox to keep quiet

								strField.keydown({
									containerUi: containerUi,
									addr: addr
								}, function (event) {
									var suggContainer = $(".smarty-autocomplete", event.data.containerUi);
									var currentChoice = $(".smarty-active-suggestion:visible", suggContainer).first();
									var choiceSelectionIsNew = false;

									if (event.keyCode == 9) { // Tab key
										if (currentChoice.length > 0) {
											var domFields = event.data.addr.getDomFields();
											if (domFields.zipcode)
												$(domFields.zipcode).focus();
											else
												$(domFields[mainInput]).blur();
											useAutocompleteSuggestion(event.data.addr, autocompleteResponse.suggestions[currentChoice.data("suggIndex")], event.data.containerUi);
											return addr.isFreeform() ? true : suppress(event);
										} else
											ui.hideAutocomplete(event.data.addr.id());
									} else if (event.keyCode == 40) { // Down arrow
										if (!currentChoice.hasClass("smarty-suggestion")) {
											currentChoice = $(".smarty-suggestion", suggContainer).first().mouseover();
											choiceSelectionIsNew = true;
										}

										if (!choiceSelectionIsNew) {
											if (currentChoice.next(".smarty-addr-" + event.data.addr.id() + " .smarty-suggestion").length > 0)
												currentChoice.next(".smarty-suggestion").mouseover();
											else
												currentChoice.removeClass("smarty-active-suggestion");
										}

										moveCursorToEnd(this);
									} else if (event.keyCode == 38) { // Up arrow
										if (!currentChoice.hasClass("smarty-suggestion")) {
											currentChoice = $(".smarty-suggestion", suggContainer).last().mouseover();
											choiceSelectionIsNew = true;
										}

										if (!choiceSelectionIsNew) {
											if (currentChoice.prev(".smarty-addr-" + event.data.addr.id() + " .smarty-suggestion").length > 0)
												currentChoice.prev(".smarty-suggestion").mouseover();
											else
												currentChoice.removeClass("smarty-active-suggestion");
										}

										moveCursorToEnd(this);
									}
								});

								// Flip the on switch!
								strField.keyup({
									form: f,
									addr: addr,
									streetField: strField,
									containerUi: containerUi
								}, doAutocomplete);
							}
						}

						$(document).keyup(function (event) {
							if (event.keyCode == 27) // Esc key
								$(".smarty-autocomplete").closest(".smarty-ui").hide();
						});
					}

					// Try .5 and 1.5 seconds after the DOM loads to re-position UI elements; hack for Firefox.
					setTimeout(function () {
						$(window).trigger("resize.smarty");
					}, 500);
					setTimeout(function () {
						$(window).trigger("resize.smarty");
					}, 1500);
				}

			}

			if (config.submitVerify) {
				// Bind to form submits through form submit and submit button click events
				for (var i = 0; i < forms.length; i++) {
					var f = forms[i];

					submitHandler = function (e) {
						// Don't invoke verification if it's already processing or autocomplete is open and the user was pressing Enter to use a suggestion
						if ((e.data.form && e.data.form.processing) || $(".smarty-active-suggestion:visible").length > 0)
							return suppress(e);

						/*
						 IMPORTANT!
						 Prior to version 2.4.8, the plugin would call syncWithDom() at submit-time
						 in case programmatic changes were made to the address input fields, including
						 browser auto-fills. The sync function would detect those changes and force
						 a re-verification to not let invalid addresses through. Unfortunately, this
						 frequently caused infinite loops (runaway lookups), ultimately preventing
						 form submission, which is unacceptable. As a safety measure to protect our
						 customer's subscriptions, we've removed syncWithDom(). The website owner is
						 responsible for making sure that any changes to address field values raise the
						 "change" event on that element. Example: $("#city").val("New City").change();
						 */

						if (!e.data.form.allActiveAddressesAccepted()) {
							// We could verify all the addresses at once, but that can overwhelm the user.
							// An API request is usually quick, so let's do one at a time: it's much cleaner.
							var unaccepted = e.data.form.activeAddressesNotAccepted();
							if (unaccepted.length > 0)
								trigger("VerificationInvoked", {
									address: unaccepted[0],
									invoke: e.data.invoke,
									invokeFn: e.data.invokeFn
								});
							return suppress(e);
						}
					};

					// Performs the tricky operation of uprooting existing event handlers that we have references to
					// (either by jQuery's data cache or HTML attributes) planting ours, then laying theirs on top
					var bindSubmitHandler = function (domElement, eventName) {
						if (!domElement || !eventName)
							return;

						var oldHandlers = [],
							eventsRef = $._data(domElement, "events");

						// If there are previously-bound-event-handlers (from jQuery), get those.
						if (eventsRef && eventsRef[eventName] && eventsRef[eventName].length > 0) {
							// Get a reference to the old handlers previously bound by jQuery
							oldHandlers = $.extend(true, [], eventsRef[eventName]);
						}

						// Turn them off...
						$(domElement).off(eventName);

						// ... then turn ours on first ...
						$(domElement)[eventName]({
							form: f,
							invoke: domElement,
							invokeFn: eventName
						}, submitHandler);

						// ... then turn on theirs last:
						// First turn on their onclick="..." or onsubmit="..." handles...
						if (typeof domElement["on" + eventName] === "function") {
							var temp = domElement["on" + eventName];
							domElement["on" + eventName] = null;
							$(domElement)[eventName](temp);
						}

						// ... then finish up with their old jQuery handles.
						for (var j = 0; j < oldHandlers.length; j++)
							$(domElement)[eventName](oldHandlers[j].data, oldHandlers[j].handler);
					};

					// Take any existing handlers (bound via jQuery) and re-bind them for AFTER our handler(s).
					var formSubmitElements = $(config.submitSelector, f.dom);

					// Highlight the submit button
					if (config.debug) {
						for (var j = 0; j < formSubmitElements.length; j++) {
							formSubmitElements[j].style.color = "#4BA341";
						}
					}

					// Form submit() events are apparently invoked by CLICKING the submit button (even jQuery does this at its core for binding)
					// (but jQuery, when raising a form submit event with .submit() will NOT necessarily click the submit button)
					formSubmitElements.each(function (idx) {
						bindSubmitHandler(this, "click"); // These get fired first
					});

				}
			}

			trigger("MapInitialized");
		};

		function doAutocomplete(event) {
			var addr = event.data.addr;
			var streetField = event.data.streetField;
			var input = $.trim(event.data.streetField.val());
			var containerUi = event.data.containerUi;
			var suggContainer = $(".smarty-autocomplete", containerUi);

			if (!input) {
				addr.lastStreetInput = input;
				suggContainer.empty();
				ui.hideAutocomplete(addr.id());
			}

			if (event.keyCode == 13) { // Enter/return
				if ($(".smarty-active-suggestion:visible").length > 0)
					useAutocompleteSuggestion(addr, autocompleteResponse.suggestions[$(".smarty-active-suggestion:visible").first().data("suggIndex")], containerUi);
				ui.hideAutocomplete(addr.id());
				streetField.blur();
				return suppress(event);
			}

			if (event.keyCode == 40) { // Down arrow
				moveCursorToEnd(streetField[0]);
				return;
			}

			if (event.keyCode == 38) { // Up arrow
				moveCursorToEnd(streetField[0]);
				return;
			}

			if (!input || input == addr.lastStreetInput || !addr.isDomestic())
				return;

			addr.lastStreetInput = input; // Used so that autocomplete only fires on real changes (i.e. not just whitespace)
			if (addr.isDomestic() && config.target.indexOf("US") >= 0) {
				trigger("AutocompleteInvoked", {
					containerUi: containerUi,
					suggContainer: suggContainer,
					streetField: streetField,
					input: input,
					addr: addr
				});
			}
		}

		this.requestAutocomplete = function (event, data) {
			if (data.input && data.addr.isDomestic() && autocompleteResponse)
				data.containerUi.show();

			var autocplrequest = {
				callback: function (counter, json) {
					var patt = new RegExp("^\\w+\\s\\w+|^[A-Za-z]+$|^[A-Za-z]+\\s\\w*");
					var filtering = patt.test(data.input);
					autocompleteResponse = json;
					data.suggContainer.empty();

					if (!json.suggestions || json.suggestions.length == 0) {
						data.suggContainer.html("<div class=\"smarty-no-suggestions\">" + config.noSuggestionsMessage + "</div>");
						return;
					}

					if (config.waitForStreet && filtering == false) {
						var message = "";
						if (config.stateFilter || config.cityFilter || config.geolocate || config.cityStatePreference) {
							message = "filtered";
						} else {
							message = "address";
						}
						data.suggContainer.html("<div class=\"smarty-no-suggestions\">Type more for " + message + " suggestions</div>")
					} else {
						for (var j = 0; j < json.suggestions.length; j++) {
							var suggAddr = json.suggestions[j].text.replace(/<|>/g, "");
							suggAddr = suggAddr.replace(new RegExp("(" + data.input.replace(/[#-.]|[[-^]|[?|{}]/g, "\\$&") + ")", "ig"), "<b>$1</b>");
							var link = $("<a href=\"javascript:\" class=\"smarty-suggestion\">" + suggAddr + "</a>");
							link.data("suggIndex", j);

							data.suggContainer.append(link);
						}
					}

					data.suggContainer.css({
						"width": Math.max(data.streetField.outerWidth(false), 250) + "px"
					});

					data.containerUi.show();

					// Delete all older callbacks so they don't get executed later because of latency
					autocplRequests.splice(0, counter);
				},
				number: autocplCounter++
			};

			autocplRequests[autocplrequest.number] = autocplrequest;

			$.ajax({
				url: "https://us-autocomplete.api.smartystreets.com/suggest",
				traditional: true,
				dataType: "json",
				data: {
					"auth-id": config.key,
					"auth-token": config.token,
					prefix: data.input,
					city_filter: config.cityFilter,
					state_filter: config.stateFilter,
					prefer: config.cityStatePreference,
					suggestions: config.autocomplete,
					geolocate: config.geolocate,
					geolocate_precision: config.geolocatePrecision,
					agent: ["smartystreets (plugin:website@" + instance.version + ")", config.agent]
				}
			}).done(function (json) {
				trigger("AutocompleteReceived", $.extend(data, {
					json: json,
					autocplrequest: autocplrequest
				}));
			});
		};

		this.showAutocomplete = function (event, data) {
			if (autocplRequests[data.autocplrequest.number])
				autocplRequests[data.autocplrequest.number].callback(data.autocplrequest.number, data.json);
		};

		function useAutocompleteSuggestion(addr, suggestion, containerUi) {
			addr.usedAutocomplete = false;
			var domfields = addr.getDomFields();
			ui.hideAutocomplete(addr.id()); // It's important that the suggestions are hidden before AddressChanged event fires

			if (addr.isFreeform()) {
				$(domfields.freeform).val(suggestion.text).change();
				addr.usedAutocomplete = true;
			} else {
				if (domfields.postal_code) {
					$(domfields.postal_code).val("").change();
				}
				if (domfields.address1)
					$(domfields.address1).val(suggestion.street_line).change();
				// State filled in before city so autoverify is not invoked without finishing using the suggestion
				if (domfields.administrative_area) {
					if (domfields.administrative_area.options) { // Checks for dropdown
						for (var i = 0; i < domfields.administrative_area.options.length; i++) {
							// Checks for abbreviation match and maps full state name to abbreviation
							if (domfields.administrative_area.options[i].text.toUpperCase() === suggestion.state || allStatesByName[domfields.administrative_area.options[i].text.toUpperCase()] === suggestion.state) {
								$(domfields.administrative_area)[0].selectedIndex = i;
								$(domfields.administrative_area).change();
								break;
							}
						}
					} else {
						$(domfields.administrative_area).val(suggestion.state).change();
					}
				}
				if (domfields.locality) {
					$(domfields.locality).val("").change();
					addr.usedAutocomplete = true;
					$(domfields.locality).val(suggestion.city).change();
				}
			}
			if (domfields.country && !domfields.country.options) {
				$(domfields.country).val("USA").change();
			}
			trigger("AutocompleteUsed", {
				address: addr,
				suggestion: suggestion
			});
		}

		// Computes where the little checkmark tag of the UI goes, relative to the boundaries of the last field
		function uiTagOffset(corners) {
			return {
				top: corners.top + corners.height / 2 - 10,
				left: corners.right - 6
			};
		}

		// This function is used to find and properly map elements to their field type
		function filterDomElement(domElement, names, labels) {
			/*
			 Where we look to find a match, in this order:
			 name, id, <label> tags, placeholder, title
			 Our searches first conduct fairly liberal "contains" searches:
			 if the attribute even contains the name or label, we map it.
			 The names and labels we choose to find are very particular.
			 */

			var name = lowercase(domElement.name);
			var id = lowercase(domElement.id);
			var selectorSafeID = id.replace(/[\[|\]|\(|\)|\:|\'|\"|\=|\||\#|\.|\!|\||\@|\^|\&|\*]/g, "\\\\$&");
			var placeholder = lowercase(domElement.placeholder);
			var title = lowercase(domElement.title);

			// First look through name and id attributes of the element, the most common
			for (var i = 0; i < names.length; i++)
				if (name.indexOf(names[i]) > -1 || id.indexOf(names[i]) > -1)
					return true;

			// If we can't find it in name or id, look at labels associated to the element.
			// Webkit automatically associates labels with form elements for us. But for other
			// browsers, we have to find them manually, which this next block does.
			if (!("labels" in domElement)) {
				var lbl = $("label[for=\"" + selectorSafeID + "\"]")[0] || $(domElement).parents("label")[0];
				domElement.labels = !lbl ? [] : [lbl];
			}

			// Iterate through the <label> tags now to search for a match.
			for (var i = 0; i < domElement.labels.length; i++) {
				// This inner loop compares each label value with what we're looking for
				for (var j = 0; j < labels.length; j++)
					if ($(domElement.labels[i]).text().toLowerCase().indexOf(labels[j]) > -1)
						return true;
			}

			// Still not found? Then look in "placeholder" or "title"...
			for (var i = 0; i < labels.length; i++)
				if (placeholder.indexOf(labels[i]) > -1 || title.indexOf(labels[i]) > -1)
					return true;

			// Got all the way to here? Probably not a match then.
			return false;
		}

		// User aborted the verification process (X click or esc keyup)
		function userAborted(uiPopup, e) {
			// Even though there may be more than one bound, and this disables the others,
			// this is for simplicity: and I figure, it won't happen too often.
			// (Otherwise "Completed" events are raised by pressing Esc even if nothing is happening)
			$(document).off("keyup");
			$(uiPopup).slideUp(defaults.speed, function () {
				$(this).parent(".smarty-ui").remove();
			});
			trigger("Completed", e.data);
		}

		// When we're done with a "pop-up" where the user chooses what to do,
		// we need to remove all other events bound on that whole "pop-up"
		// so that it doesn't interfere with any future "pop-ups".
		function turnOffAllClicks(selectors) {
			if (Array.isArray(selectors) || typeof selectors == "object") {
				for (var selector in selectors) {
					if (selectors.hasOwnProperty(selector)) {
						$("body").off("click", selectors[selector]);
					}
				}
			} else if (typeof selectors === "string") {
				$("body").off("click", selectors);
			} else {
				alert("ERROR: Not an array, string, or object passed in to turn off all clicks");
			}
		}

		// Utility function
		function moveCursorToEnd(el) { // Courtesy of http://css-tricks.com/snippets/javascript/move-cursor-to-end-of-input/
			if (typeof el.selectionStart == "number")
				el.selectionStart = el.selectionEnd = el.value.length;
			else if (typeof el.createTextRange != "undefined") {
				el.focus();
				var range = el.createTextRange();
				range.collapse(false);
				range.select();
			}
		}

		// Hides the autocomplete UI
		this.hideAutocomplete = function (addressID) {
			$(".smarty-autocomplete.smarty-addr-" + addressID).closest(".smarty-ui").hide();
		};

		//shows the SmartyUI when activating 1 address
		this.showSmartyUI = function (addressID) {
			var smartyui = $(".deactivated.smarty-addr-" + addressID);
			smartyui.push(smartyui[0].parentElement);
			smartyui.removeClass("deactivated");
			smartyui.addClass("activated");
			smartyui.show();
		};

		//hides the SmartyUI when deactivating 1 address
		this.hideSmartyUI = function (addressID) {
			var smartyui = $(".smarty-addr-" + addressID + ":visible");
			var autocompleteui = $(".smarty-autocomplete.smarty-addr-" + addressID);
			smartyui.addClass("deactivated");
			smartyui.parent().addClass("deactivated");
			autocompleteui.addClass("deactivated");
			smartyui.hide();
			smartyui.parent().hide();
			autocompleteui.hide();
		};

		// If anything was previously mapped, this resets it all for a new mapping.
		this.clean = function () {
			if (forms.length == 0)
				return;

			if (config.debug)
				console.log("Cleaning up old form map data and bindings...");

			// Spare none alive!

			for (var i = 0; i < forms.length; i++) {
				$(forms[i].dom).data(formDataProperty, "");

				// Clean up each form's DOM by resetting the address fields to the way they were
				for (var j = 0; j < forms[i].addresses.length; j++) {
					var doms = forms[i].addresses[j].getDomFields();
					for (var prop in doms) {
						if (doms.hasOwnProperty(prop)) {
							if (config.debug) {
								$(doms[prop]).css("background", "none").attr("placeholder", "");
								var submitButtons = $(config.submitSelector);
								for (var k = 0; k < submitButtons.length; k++) {
									submitButtons[k].style.color = "black";
								}
							}
							$(doms[prop]).off("change", actionsOnChange);
						}
					}
					if (doms.address1)
						$(doms.address1).off("keyup").off("keydown").off("blur");
					else if (doms.freeform)
						$(doms.freeform).off("keyup").off("keydown").off("blur");
				}

				// Unbind our form submit and submit-button click handlers
				$.each(forms, function (idx) {
					$(this.dom).off("submit", submitHandler);
				});
				$(config.submitSelector, forms[i].dom).each(function (idx) {
					$(this).off("click", submitHandler);
				});
			}

			$(".smarty-ui").off("click", ".smarty-suggestion").off("mouseover", ".smarty-suggestion").off("mouseleave", ".smarty-suggestion").remove();
			$("body").off("click", ".smarty-undo");
			$("body").off("click", ".smarty-tag-grayed");
			$(window).off("resize.smarty");
			$(document).off("keyup");

			forms = [];
			mappedAddressCount = 0;

			if (config.debug)
				console.log("Done cleaning up; ready for new mapping.");
		};

		function disableBrowserAutofill(dom) {
			//Does not disable autofill if config.autocomplete is disabled
			if (config.autocomplete > 0) {
				for (var i = 0; i < dom.getElementsByTagName("input").length; i++) {
					dom.getElementsByTagName("input")[i].autocomplete = "smartystreets";
				}
			}
		}

		function addDefaultToStateDropdown(dom) {
			if (dom.getElementsByTagName("option").length > 0) {
				if (arrayContains(stateNames, dom.getElementsByTagName("option")[0].text.toUpperCase()) ||
					arrayContains(stateAbbreviations, dom.getElementsByTagName("option")[0].text.toUpperCase())) {
					var option = document.createElement("OPTION");
					option.innerText = "Pick a state";
					option.selected = true;
					$(dom.getElementsByTagName("select")[0]).prepend(option);
					$(dom).change();
				}
			}
		}

		// ** MANUAL MAPPING ** //
		this.mapFields = function (map) {
			// "map" should be an array of objects mapping field types
			// to a field by selector, all supplied by the user.

			if (config.debug)
				console.log("Manually mapping fields given this data:", map);

			this.clean();
			var formsFound = [];
			map = map instanceof Array ? map : [map];

			for (var addrIdx in map) {
				if (map.hasOwnProperty(addrIdx)) {
					var address = map[addrIdx];

					if (!address.country && config.target.indexOf("US") < 0)
						continue;

					// Convert selectors into actual DOM references

					var match = "";

					for (var fieldType in address) {
						if (address.hasOwnProperty(fieldType)) {
							if (fieldType == "match") {
								match = address[fieldType];
								delete address[fieldType];
							}
							if (fieldType != "id") {
								if (!arrayContains(acceptableFields, fieldType)) { // Make sure the field name is allowed
									if (config.debug)
										console.log("NOTICE: Field named " + fieldType + " is not allowed. Skipping...");
									delete address[fieldType];
									continue;
								}
								var matched = $(address[fieldType]);
								if (matched.length == 0) { // Don't try to map an element that couldn't be matched or found at all
									if (config.debug)
										console.log("NOTICE: No matches found for selector " + address[fieldType] + ". Skipping...");
									delete address[fieldType];
								} else if (matched.parents("form").length == 0) { // We should only map elements inside a <form> tag; otherwise we can't turn on submit handlers later
									if (config.debug)
										console.log("NOTICE: Element with selector \"" + address[fieldType] + "\" is not inside a <form> tag. Skipping...");
									delete address[fieldType];
								} else
									address[fieldType] = matched[0];
							}
						}
					}
					if (config.target.indexOf("INTERNATIONAL") >= 0) {
						if (!((address.country && address.freeform) || (address.country && address.address1 && address.postal_code) || (address.country && address.address1 && address.locality && address.administrative_area))) {
							if (config.debug)
								console.log("NOTICE: Address map (index " + addrIdx + ") was not mapped to a complete street address. Skipping...");
							continue;
						}
					} else {
						if (!((address.freeform) || (address.address1 && address.postal_code) || (address.address1 && address.locality && address.administrative_area))) {
							if (config.debug)
								console.log("NOTICE: Address map (index " + addrIdx + ") was not mapped to a complete street address. Skipping...");
							continue;
						}
					}

					// Acquire the form based on the first member
					var formDom = $(address.address1).parents("form")[0];
					if (!formDom) {
						formDom = $(address.freeform).parents("form")[0];
					}
					var form = new Form(formDom);

					// Persist a reference to the form if it wasn't acquired before
					if (!$(formDom).data(formDataProperty)) {
						// Mark the form as mapped then add it to our list
						$(formDom).data(formDataProperty, 1);
						disableBrowserAutofill(form.dom);
						addDefaultToStateDropdown(form.dom);
						formsFound.push(form);
					} else {
						// Find the form in our list since we already put it there
						for (var i = 0; i < formsFound.length; i++) {
							if (formsFound[i].dom == formDom) {
								form = formsFound[i];
								break;
							}
						}
					}

					// Add this address to the form
					mappedAddressCount++;
					form.addresses.push(new Address(address, form, address.id, match));

					if (config.debug)
						console.log("Finished mapping address with ID: " + form.addresses[form.addresses.length - 1].id());
				}
			}

			forms = formsFound;
			trigger("FieldsMapped");
		};

		this.disableFields = function (address) {
			// Given an address, disables the input fields for the address, also the submit button
			if (!config.ui)
				return;

			var fields = address.getDomFields();
			for (var field in fields) {
				if (fields.hasOwnProperty(field)) {
					$(fields[field]).prop ? $(fields[field]).prop("disabled", true) : $(fields[field]).attr("disabled", "disabled");
				}
			}

			// Disable submit buttons
			if (address.form && address.form.dom) {
				var buttons = $(config.submitSelector, address.form.dom);
				buttons.prop ? buttons.prop("disabled", true) : buttons.attr("disabled", "disabled");
			}
		};

		this.enableFields = function (address) {
			// Given an address, re-enables the input fields for the address
			if (!config.ui)
				return;

			var fields = address.getDomFields();
			for (var field in fields) {
				if (fields.hasOwnProperty(field)) {
					$(fields[field]).prop ? $(fields[field]).prop("disabled", false) : $(fields[field]).removeAttr("disabled");
				}
			}

			// Enable submit buttons
			if (address.form && address.form.dom) {
				var buttons = $(config.submitSelector, address.form.dom);
				buttons.prop ? buttons.prop("disabled", false) : buttons.removeAttr("disabled");
			}
		};

		this.showLoader = function (addr) {
			if (!config.ui || !addr.hasDomFields())
				return;

			// Get position information now instead of earlier in case elements shifted since page load
			var lastFieldCorners = addr.corners(true);
			var loaderUI = $(".smarty-dots.smarty-addr-" + addr.id()).parent();

			loaderUI.css("top", (lastFieldCorners.top + lastFieldCorners.height / 2 - loaderHeight / 2) + "px")
				.css("left", (lastFieldCorners.right - loaderWidth - 10) + "px");
			$(".smarty-dots", loaderUI).show();
		};

		this.hideLoader = function (addr) {
			if (config.ui)
				$(".smarty-dots.smarty-addr-" + addr.id()).hide();
		};

		this.markAsValid = function (addr) {
			if (!config.ui || !addr)
				return;

			var domTag = $(".smarty-tag.smarty-tag-grayed.smarty-addr-" + addr.id());
			domTag.removeClass("smarty-tag-grayed").addClass("smarty-tag-green").attr("title", "Address verified! Click to undo.");
			$(".smarty-tag-text", domTag).text("Verified").hover(function () {
				$(this).text("Undo");
			}, function () {
				$(this).text("Verified");
			}).addClass("smarty-undo");
		};

		this.unmarkAsValid = function (addr) {
			var validSelector = ".smarty-tag.smarty-addr-" + addr.id();
			if (!config.ui || !addr || $(validSelector).length == 0)
				return;

			var domTag = $(".smarty-tag.smarty-tag-green.smarty-addr-" + addr.id());
			domTag.removeClass("smarty-tag-green").addClass("smarty-tag-grayed").attr("title", "Address not verified. Click to verify.");
			$(".smarty-tag-text", domTag).text("Verify").off("mouseenter mouseleave").removeClass("smarty-undo");
		};

		this.showAmbiguous = function (data) {
			if (!config.ui || !data.address.hasDomFields())
				return;

			var addr = data.address;
			var response = data.response;
			var corners = addr.corners();
			corners.width = 294;
			corners.height = response.length * 63 + 164;

			var html = "<div class=\"smarty-ui\" style=\"top: " + corners.top + "px; left: " + corners.left + "px;\">" +
				"<div class=\"smarty-popup smarty-addr-" + addr.id() + "\" style=\"width: " + corners.width + "px; height: " +
				corners.height + "px;\">" +
				"<div class=\"smarty-popup-header smarty-popup-ambiguous-header\">" + config.ambiguousMessage + "</div>" +
				"<div class=\"smarty-popup-typed-address\">" + addr.toString() + "</div>" +
				"<div class=\"smarty-choice-list\">";

			if (addr.isDomestic()) {
				for (var i = 0; i < response.raw.length; i++) {
					var line1 = response.raw[i].delivery_line_1,
						city = response.raw[i].components.city_name,
						st = response.raw[i].components.state_abbreviation,
						zip = response.raw[i].components.zipcode + "-" + response.raw[i].components.plus4_code;
					html += "<a href=\"javascript:\" class=\"smarty-choice\" data-index=\"" + i + "\">" + line1 + "<br>" + city + ", " + st + " " + zip + "</a>";
				}
			} else {
				var numCandidates = config.candidates;
				if (response.raw.length < numCandidates) {
					numCandidates = response.raw.length;
				}
				for (var i = 0; i < numCandidates; i++) {
					var ambigAddr = "";
					if (response.raw[i].address1) {
						ambigAddr += response.raw[i].address1;
					}
					if (response.raw[i].address2) {
						ambigAddr = ambigAddr + "<br>" + response.raw[i].address2;
					}
					if (response.raw[i].address3) {
						ambigAddr = ambigAddr + "<br>" + response.raw[i].address3;
					}
					if (response.raw[i].address4) {
						ambigAddr = ambigAddr + "<br>" + response.raw[i].address4;
					}
					if (response.raw[i].address5) {
						ambigAddr = ambigAddr + "<br>" + response.raw[i].address5;
					}
					if (response.raw[i].address6) {
						ambigAddr = ambigAddr + "<br>" + response.raw[i].address6;
					}
					html += "<a href=\"javascript:\" class=\"smarty-choice\" data-index=\"" + i + "\">" + ambigAddr + "</a>";
				}
			}

			html += "</div><div class=\"smarty-choice-alt\">";
			html += "<a href=\"javascript:\" class=\"smarty-choice smarty-choice-abort smarty-abort\">" + config.changeMessage + "</a>";
			if (!config.enforceVerification) {
				html += "<a href=\"javascript:\" class=\"smarty-choice smarty-choice-override\">" + config.certifyMessage + "</a>";
			}
			html += "</div></div></div>";
			$(html).hide().appendTo("body").show(defaults.speed);

			// Scroll to it if needed
			if ($(document).scrollTop() > corners.top - 100 || $(document).scrollTop() < corners.top - $(window).height() + 100) {
				$("html, body").stop().animate({
					scrollTop: $(".smarty-popup.smarty-addr-" + addr.id()).offset().top - 100
				}, 500);
			}

			data.selectors = {
				goodAddr: ".smarty-popup.smarty-addr-" + addr.id() + " .smarty-choice-list .smarty-choice",
				useOriginal: ".smarty-popup.smarty-addr-" + addr.id() + " .smarty-choice-override",
				abort: ".smarty-popup.smarty-addr-" + addr.id() + " .smarty-abort"
			};

			// User chose a candidate address
			$("body").on("click", data.selectors.goodAddr, data, function (e) {
				$(".smarty-popup.smarty-addr-" + addr.id()).slideUp(defaults.speed, function () {
					$(this).parent(".smarty-ui").remove();
					$(this).remove();
				});

				turnOffAllClicks(e.data.selectors);
				delete e.data.selectors;

				trigger("UsedSuggestedAddress", {
					address: e.data.address,
					response: e.data.response,
					invoke: e.data.invoke,
					invokeFn: e.data.invokeFn,
					chosenCandidate: response.raw[$(this).data("index")]
				});
			});

			// User wants to revert to what they typed (forced accept)
			$("body").on("click", data.selectors.useOriginal, data, function (e) {
				$(this).parents(".smarty-popup").slideUp(defaults.speed, function () {
					$(this).parent(".smarty-ui").remove();
					$(this).remove();
				});

				turnOffAllClicks(e.data.selectors);
				delete e.data.selectors;
				trigger("OriginalInputSelected", e.data);
			});

			// User presses Esc key
			$(document).keyup(data, function (e) {
				if (e.keyCode == 27) { //Esc
					turnOffAllClicks(e.data.selectors);
					delete e.data.selectors;
					userAborted($(".smarty-popup.smarty-addr-" + e.data.address.id()), e);
					suppress(e);
				}
			});

			// User clicks "x" in corner or chooses to try a different address (same effect as Esc key)
			$("body").on("click", data.selectors.abort, data, function (e) {
				turnOffAllClicks(e.data.selectors);
				delete e.data.selectors;
				userAborted($(this).parents(".smarty-popup"), e);
			});
		};

		this.showInvalid = function (data) {
			if (!config.ui || !data.address.hasDomFields())
				return;

			var addr = data.address;
			var response = data.response;
			var corners = addr.corners();
			corners.width = 300;
			corners.height = 170;

			var html = "<div class=\"smarty-ui\" style=\"top: " + corners.top + "px; left: " + corners.left + "px;\">" +
				"<div class=\"smarty-popup smarty-addr-" + addr.id() + "\" style=\"width: " + corners.width + "px; height: " +
				corners.height + "px;\">" +
				"<div class=\"smarty-popup-header smarty-popup-invalid-header\">" + config.invalidMessage + "</div>" +
				"<div class=\"smarty-popup-typed-address\">" + addr.toString() + "</div>" +
				"<div class=\"smarty-choice-alt\">" +
				"<a href=\"javascript:\" class=\"smarty-choice smarty-choice-abort smarty-abort\">" + config.changeMessage + "</a>";
			if (!config.enforceVerification) {
				html += "<a href=\"javascript:\" class=\"smarty-choice smarty-choice-override\">" +
					config.certifyMessage + "</a>";
			}
			html += "</div></div>";

			$(html).hide().appendTo("body").show(defaults.speed);

			data.selectors = {
				useOriginal: ".smarty-popup.smarty-addr-" + addr.id() + " .smarty-choice-override ",
				abort: ".smarty-popup.smarty-addr-" + addr.id() + " .smarty-abort"
			};

			// Scroll to it if necessary
			if ($(document).scrollTop() > corners.top - 100 || $(document).scrollTop() < corners.top - $(window).height() + 100) {
				$("html, body").stop().animate({
					scrollTop: $(".smarty-popup.smarty-addr-" + addr.id()).offset().top - 100
				}, 500);
			}

			turnOffAllClicks(data.selectors.abort);
			// User rejects original input and agrees to double-check it
			$("body").on("click", data.selectors.abort, data, function (e) {
				userAborted(".smarty-popup.smarty-addr-" + e.data.address.id(), e);
				delete e.data.selectors;
				trigger("InvalidAddressRejected", e.data);
			});

			turnOffAllClicks(data.selectors.useOriginal);
			// User certifies that what they typed is correct
			$("body").on("click", data.selectors.useOriginal, data, function (e) {
				userAborted(".smarty-popup.smarty-addr-" + e.data.address.id(), e);
				delete e.data.selectors;
				trigger("OriginalInputSelected", e.data);
			});

			// User presses esc key
			$(document).keyup(data, function (e) {
				if (e.keyCode == 27) { //Esc
					turnOffAllClicks(e.data.selectors);
					$(data.selectors.abort).click();
					userAborted(".smarty-popup.smarty-addr-" + e.data.address.id(), e);
				}
			});
		};

		this.showInvalidCountry = function (data) {
			if (!config.ui || !data.address.hasDomFields())
				return;

			var addr = data.address;
			var response = data.response;
			var corners = addr.corners();
			corners.width = 300;
			corners.height = 170;

			var html = "<div class=\"smarty-ui\" style=\"top: " + corners.top + "px; left: " + corners.left + "px;\">" +
				"<div class=\"smarty-popup smarty-addr-" + addr.id() + "\" style=\"width: " + corners.width + "px; height: " +
				corners.height + "px;\">" +
				"<div class=\"smarty-popup-header smarty-popup-invalid-header\">" + config.invalidCountryMessage + "</div>" +
				"<div class=\"smarty-popup-typed-address\">" + addr.toString() + "</div>" +
				"<div class=\"smarty-choice-alt\"><a href=\"javascript:\" class=\"smarty-choice smarty-choice-abort smarty-abort\">" +
				config.changeMessage + "</a></div>";
			if (!config.enforceVerification) {
				html += "<a href=\"javascript:\" class=\"smarty-choice smarty-choice-override\">" +
					config.certifyMessage + "</a>";
			}
			html += "</div></div>";

			$(html).hide().appendTo("body").show(defaults.speed);

			data.selectors = {
				useOriginal: ".smarty-popup.smarty-addr-" + addr.id() + " .smarty-choice-override ",
				abort: ".smarty-popup.smarty-addr-" + addr.id() + " .smarty-abort"
			};

			// Scroll to it if necessary
			if ($(document).scrollTop() > corners.top - 100 || $(document).scrollTop() < corners.top - $(window).height() + 100) {
				$("html, body").stop().animate({
					scrollTop: $(".smarty-popup.smarty-addr-" + addr.id()).offset().top - 100
				}, 500);
			}

			turnOffAllClicks(data.selectors.abort);
			// User rejects original input and agrees to double-check it
			$("body").on("click", data.selectors.abort, data, function (e) {
				userAborted(".smarty-popup.smarty-addr-" + e.data.address.id(), e);
				delete e.data.selectors;
				trigger("InvalidAddressRejected", e.data);
			});

			turnOffAllClicks(data.selectors.useOriginal);
			// User certifies that what they typed is correct
			$("body").on("click", data.selectors.useOriginal, data, function (e) {
				userAborted(".smarty-popup.smarty-addr-" + e.data.address.id(), e);
				delete e.data.selectors;
				trigger("OriginalInputSelected", e.data);
			});

			// User presses esc key
			$(document).keyup(data, function (e) {
				if (e.keyCode == 27) { //Esc
					turnOffAllClicks(e.data.selectors);
					$(data.selectors.abort).click();
					userAborted(".smarty-popup.smarty-addr-" + e.data.address.id(), e);
				}
			});
		};

		this.showMissingSecondary = function (data) {
			if (!config.ui || !data.address.hasDomFields())
				return;
			var addr = data.address;
			var corners = addr.corners();
			corners.width = 300;
			corners.height = 270;

			var html = "<div class=\"smarty-ui\" style=\"top: " + corners.top + "px; left: " + corners.left + "px;\">" +
				"<div class=\"smarty-popup smarty-addr-" + addr.id() + "\" style=\"width: " + corners.width + "px; height: " +
				corners.height + "px;\">" +
				"<div class=\"smarty-popup-header smarty-popup-missing-secondary-header\">" + config.missingSecondaryMessage +
				"</div>" + "<div class=\"smarty-popup-typed-address\">" + addr.toString() + "</div>" +
				"<form class=\"smarty-popup-secondary-number-form\">" +
				"<input id=\"smarty-popup-secondary-number-input-box\" class=\"smarty-addr-" + addr.id() +
				"\" type=\"text\" name=\"secondarynumber\" placeholder=\"Enter number here\"><br>" +
				"<input id=\"smarty-popup-secondary-number-form-submit-button\" class=\"smarty-addr-" + addr.id() +
				"\" type=\"submit\" value=\"Submit\">" +
				"</form>" +
				"<hr style=\"margin-bottom: 15px;\">" + "<div class=\"smarty-choice-alt\">" + "<a href=\"javascript:\" " +
				"class=\"smarty-choice smarty-choice-abort smarty-abort\">" + config.changeMessage + "</a>";
			if (!config.enforceVerification) {
				html += "<a href=\"javascript:\" class=\"smarty-choice smarty-choice-override\">" +
					config.certifyMessage + "</a>";
			}
			html += "</div></div></div>";

			$(html).hide().appendTo("body").show(defaults.speed);

			data.selectors = {
				useOriginal: ".smarty-popup.smarty-addr-" + addr.id() + " .smarty-choice-override ",
				abort: ".smarty-popup.smarty-addr-" + addr.id() + " .smarty-abort",
				submit: "#smarty-popup-secondary-number-form-submit-button.smarty-addr-" + addr.id()
			};

			// Scroll to it if necessary
			if ($(document).scrollTop() > corners.top - 100 || $(document).scrollTop() < corners.top - $(window).height() + 100) {
				$("html, body").stop().animate({
					scrollTop: $(".smarty-popup.smarty-addr-" + addr.id()).offset().top - 100
				}, 500);
			}

			turnOffAllClicks(data.selectors.abort);
			// User rejects original input and agrees to double-check it
			$("body").on("click", data.selectors.abort, data, function (e) {
				userAborted(".smarty-popup.smarty-addr-" + e.data.address.id(), e);
				delete e.data.selectors;
				trigger("InvalidAddressRejected", e.data);
			});

			turnOffAllClicks(data.selectors.useOriginal);
			// User certifies that what they typed is correct
			$("body").on("click", data.selectors.useOriginal, data, function (e) {
				userAborted(".smarty-popup.smarty-addr-" + e.data.address.id(), e);
				delete e.data.selectors;
				trigger("OriginalInputSelected", e.data);
			});

			turnOffAllClicks(data.selectors.submit);
			// User enters a secondary address
			$("body").on("click", data.selectors.submit, data, function (e) {
				e.data.address.secondary = $("#smarty-popup-secondary-number-input-box.smarty-addr-" + e.data.address.id()).val();
				if (e.data.address.isFreeform()) {
					e.data.address.address1 = e.data.response.raw[0].delivery_line_1;
				}
				e.data.address.zipcode = e.data.response.raw[0].components.zipcode;
				userAborted(".smarty-popup.smarty-addr-" + e.data.address.id(), e);
				delete e.data.selectors;
				suppress(e);
				trigger("AddedSecondary", e.data);
			});

			// User presses esc key
			$(document).keyup(data, function (e) {
				if (e.keyCode == 27) { //Esc
					turnOffAllClicks(e.data.selectors);
					$(data.selectors.abort).click();
					userAborted(".smarty-popup.smarty-addr-" + e.data.address.id(), e);
				}
			});
		};

		this.showMissingInput = function (data) {
			if (!config.ui || !data.address.hasDomFields())
				return;

			var addr = data.address;
			var response = data.response;
			var corners = addr.corners();
			corners.width = 300;
			corners.height = 170;

			var html = "<div class=\"smarty-ui\" style=\"top: " + corners.top + "px; left: " + corners.left + "px;\">" +
				"<div class=\"smarty-popup smarty-addr-" + addr.id() + "\" style=\"width: " + corners.width + "px; height: " +
				corners.height + "px;\">" +
				"<div class=\"smarty-popup-header smarty-popup-missing-input-header\">" + config.missingInputMessage + "</div>" +
				"<div class=\"smarty-popup-typed-address\">" + addr.toString() + "</div>" +
				"<div class=\"smarty-choice-alt\"><a href=\"javascript:\" " +
				"class=\"smarty-choice smarty-choice-abort smarty-abort\">" + config.changeMessage + "</a>";
			if (!config.enforceVerification) {
				html += "<a href=\"javascript:\" class=\"smarty-choice smarty-choice-override\">" +
					config.certifyMessage + "</a>";
			}
			html += "</div></div>";

			$(html).hide().appendTo("body").show(defaults.speed);

			data.selectors = {
				useOriginal: ".smarty-popup.smarty-addr-" + addr.id() + " .smarty-choice-override ",
				abort: ".smarty-popup.smarty-addr-" + addr.id() + " .smarty-abort"
			};

			// Scroll to it if necessary
			if ($(document).scrollTop() > corners.top - 100 || $(document).scrollTop() < corners.top - $(window).height() + 100) {
				$("html, body").stop().animate({
					scrollTop: $(".smarty-popup.smarty-addr-" + addr.id()).offset().top - 100
				}, 500);
			}

			turnOffAllClicks(data.selectors.abort);
			// User rejects original input and agrees to double-check it
			$("body").on("click", data.selectors.abort, data, function (e) {
				userAborted(".smarty-popup.smarty-addr-" + e.data.address.id(), e);
				delete e.data.selectors;
				trigger("InvalidAddressRejected", e.data);
			});

			turnOffAllClicks(data.selectors.useOriginal);
			// User certifies that what they typed is correct
			$("body").on("click", data.selectors.useOriginal, data, function (e) {
				userAborted(".smarty-popup.smarty-addr-" + e.data.address.id(), e);
				delete e.data.selectors;
				trigger("OriginalInputSelected", e.data);
			});

			// User presses esc key
			$(document).keyup(data, function (e) {
				if (e.keyCode == 27) { //Esc
					turnOffAllClicks(e.data.selectors);
					$(data.selectors.abort).click();
					userAborted(".smarty-popup.smarty-addr-" + e.data.address.id(), e);
				}
			});
		};

	}

	var allStatesByName = {
		"ALABAMA": "AL",
		"ALASKA": "AK",
		"AMERICAN SAMOA": "AS",
		"ARIZONA": "AZ",
		"ARKANSAS": "AR",
		"CALIFORNIA": "CA",
		"COLORADO": "CO",
		"CONNECTICUT": "CT",
		"DELAWARE": "DE",
		"DISTRICT OF COLUMBIA": "DC",
		"FEDERATED STATES OF MICRONESIA": "FM",
		"FLORIDA": "FL",
		"GEORGIA": "GA",
		"GUAM": "GU",
		"HAWAII": "HI",
		"IDAHO": "ID",
		"ILLINOIS": "IL",
		"INDIANA": "IN",
		"IOWA": "IA",
		"KANSAS": "KS",
		"KENTUCKY": "KY",
		"LOUISIANA": "LA",
		"MAINE": "ME",
		"MARSHALL ISLANDS": "MH",
		"MARYLAND": "MD",
		"MASSACHUSETTS": "MA",
		"MICHIGAN": "MI",
		"MINNESOTA": "MN",
		"MISSISSIPPI": "MS",
		"MISSOURI": "MO",
		"MONTANA": "MT",
		"NEBRASKA": "NE",
		"NEVADA": "NV",
		"NEW HAMPSHIRE": "NH",
		"NEW JERSEY": "NJ",
		"NEW MEXICO": "NM",
		"NEW YORK": "NY",
		"NORTH CAROLINA": "NC",
		"NORTH DAKOTA": "ND",
		"NORTHERN MARIANA ISLANDS": "MP",
		"OHIO": "OH",
		"OKLAHOMA": "OK",
		"OREGON": "OR",
		"PALAU": "PW",
		"PENNSYLVANIA": "PA",
		"PUERTO RICO": "PR",
		"RHODE ISLAND": "RI",
		"SOUTH CAROLINA": "SC",
		"SOUTH DAKOTA": "SD",
		"TENNESSEE": "TN",
		"TEXAS": "TX",
		"UTAH": "UT",
		"VERMONT": "VT",
		"VIRGIN ISLANDS": "VI",
		"VIRGINIA": "VA",
		"WASHINGTON": "WA",
		"WEST VIRGINIA": "WV",
		"WISCONSIN": "WI",
		"WYOMING": "WY",
		"ARMED FORCES EUROPE, THE MIDDLE EAST, AND CANADA": "AE",
		"ARMED FORCES CANADA": "AE",
		"ARMED FORCES THE MIDDLE EAST": "AE",
		"ARMED FORCES EUROPE": "AE",
		"ARMED FORCES PACIFIC": "AP",
		"ARMED FORCES AMERICAS (EXCEPT CANADA)": "AA",
		"ARMED FORCES AMERICAS": "AA"
	};
	// this listing of stateNames has West Virginia before Virginia and the Virgin Islands (most specific to least specific)
	var stateNames = [
		"ALABAMA", "ALASKA", "AMERICAN SAMOA", "ARIZONA", "ARKANSAS", "CALIFORNIA", "COLORADO", "CONNECTICUT", "DELAWARE",
		"DISTRICT OF COLUMBIA", "FEDERATED STATES OF MICRONESIA", "FLORIDA", "GEORGIA", "GUAM", "HAWAII", "IDAHO",
		"ILLINOIS", "INDIANA", "IOWA", "KANSAS", "KENTUCKY", "LOUISIANA", "MAINE", "MARSHALL ISLANDS", "MARYLAND",
		"MASSACHUSETTS", "MICHIGAN", "MINNESOTA", "MISSISSIPPI", "MISSOURI", "MONTANA", "NEBRASKA", "NEVADA",
		"NEW HAMPSHIRE", "NEW JERSEY", "NEW MEXICO", "NEW YORK", "NORTH CAROLINA", "NORTH DAKOTA",
		"NORTHERN MARIANA ISLANDS", "OHIO", "OKLAHOMA", "OREGON", "PALAU", "PENNSYLVANIA", "PUERTO RICO", "RHODE ISLAND",
		"SOUTH CAROLINA", "SOUTH DAKOTA", "TENNESSEE", "TEXAS", "UTAH", "VERMONT", "WEST VIRGINIA", "VIRGINIA",
		"VIRGIN ISLANDS", "WASHINGTON", "WISCONSIN", "WYOMING", "ARMED FORCES EUROPE, THE MIDDLE EAST, AND CANADA",
		"ARMED FORCES CANADA", "ARMED FORCES THE MIDDLE EAST", "ARMED FORCES EUROPE", "ARMED FORCES PACIFIC",
		"ARMED FORCES AMERICAS (EXCEPT CANADA)", "ARMED FORCES AMERICAS"
	];
	var stateAbbreviations = [
		"AL", "AK", "AS", "AZ", "AR", "CA", "CO", "CT", "DE", "DC", "FM", "FL", "GA", "GU", "HI", "ID", "IL", "IN", "IA",
		"KS", "KY", "LA", "ME", "MH", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC",
		"ND", "MP", "OH", "OK", "OR", "PW", "PA", "PR", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VI", "VA", "WA", "WV",
		"WI", "WY", "AE", "AP", "AA"
	];

	/*
	 Represents an address inputted by the user, whether it has been verified yet or not.
	 formObj must be a Form OBJECT, not a <form> tag... and the addressID is optional.
	 */
	function Address(domMap, formObj, addressID, match) {
		// PRIVATE MEMBERS //

		var self = this; // Pointer to self so that internal functions can reference its parent
		var fields; // Data values and references to DOM elements
		var id; // An ID by which to classify this address on the DOM

		var state = "accepted"; // Can be: "accepted" or "changed"
		// Example of a field:  street: { value: "123 main", dom: DOMElement, undo: "123 mai"}
		// Some of the above fields will only be mapped manually, not automatically.

		// Private method that actually changes the address. The keepState parameter is
		// used by the results of verification after an address is chosen; (or an "undo"
		// on a freeform address), otherwise an infinite loop of requests is executed
		// because the address keeps changing! (Set "suppressAutoVerify" to true when coming from the "Undo" link)
		var doSet = function (key, value, updateDomElement, keepState, sourceEvent, suppressAutoVerify) {
			if (!arrayContains(acceptableFields, key)) // Skip "id" and other unacceptable fields
				return false;

			if (!fields[key])
				fields[key] = {};

			if (typeof fields[key].dom !== "undefined" && fields[key].dom.tagName === "SELECT" && key !== "administrative_area" && fields[key].dom.selectedIndex >= 0) {
				value = fields[key].dom[fields[key].dom.selectedIndex].text.replace(/<|>/g, "");
			} else {
				value = value.replace(/<|>/g, ""); // prevents script injection attacks (< and > aren't in addresses, anyway)
			}

			var differentVal = fields[key].value != value;

			fields[key].undo = fields[key].value || "";
			fields[key].value = value;

			if (fields[key].dom && updateDomElement) {
				if (fields[key].dom.tagName === "INPUT") {
					$(fields[key].dom).val(value);
				} else if (fields[key].dom.tagName === "SELECT" && key === "administrative_area" && self.isDomestic()) {
					var selectedVal = "";
					$(fields[key].dom).find("option").each(function () {
						if ($(this).text().toUpperCase() === value) {
							selectedVal = $(this).val();
							return false;
						} else {
							for (var stateName in allStatesByName) {
								if (allStatesByName[stateName] === value && stateName === $(this).text().toUpperCase()) {
									selectedVal = $(this).val();
									return false;
								}
							}
						}
					});
					$(fields[key].dom).val(selectedVal);
				}
			}

			var eventMeta = {
				sourceEvent: sourceEvent, // may be undefined
				field: key,
				address: self,
				value: value,
				suppressAutoVerification: suppressAutoVerify || false
			};

			if (differentVal && !keepState) {
				ui.unmarkAsValid(self);
				var uiTag = config.ui ? $(".smarty-ui .smarty-tag.smarty-addr-" + id) : undefined;
				if (config.target.indexOf("US") >= 0 && config.target.indexOf("INTERNATIONAL") < 0) {
					if (self.isDomestic()) {
						if (uiTag && !uiTag.is(":visible"))
							//uiTag.show(); // Show checkmark tag if address is in US
						self.unaccept();
						trigger("AddressChanged", eventMeta);
					} else {
						if (uiTag && uiTag.is(":visible"))
							uiTag.hide(); // Hide checkmark tag if address is non-US
						self.accept({
							address: self
						}, false);
					}
				} else if (config.target.indexOf("INTERNATIONAL") >= 0 && config.target.indexOf("US") < 0) {
					if (uiTag && !uiTag.is(":visible"))
						//uiTag.show(); // Show checkmark tag if address is in US
					self.unaccept();
					trigger("AddressChanged", eventMeta);
				} else if (config.target.indexOf("US") >= 0 && config.target.indexOf("INTERNATIONAL") >= 0) {
					if (uiTag && !uiTag.is(":visible"))
						//uiTag.show(); // Show checkmark tag if address is in US
					self.unaccept();
					trigger("AddressChanged", eventMeta);
				}
			}

			return true;
		};

		// PUBLIC MEMBERS //

		this.form = formObj; // Reference to the parent form object (NOT THE DOM ELEMENT)
		this.match = match; // Determines how matches are made and what kind of results are returned.
		this.verifyCount = 0; // Number of times this address was submitted for verification
		this.lastField; // The last field found (last to appear in the DOM) during mapping, or the order given
		this.active = true; // If true, verify the address. If false, pass-thru entirely.
		this.lastStreetInput = ""; // Used by autocomplete to detect changes

		// Constructor-esque functionality (save the fields in this address object)
		this.load = function (domMap, addressID) {
			fields = {};
			id = addressID ? addressID.replace(/[^a-z0-9_\-]/ig, "") : randomInt(1, 99999); // Strips non-selector-friendly characters

			if (typeof domMap === "object") { // can be an actual map to DOM elements or just field/value data
				// Find the last field likely to appear on the DOM (used for UI attachments)
				this.lastField = domMap[Object.keys(domMap)[Object.keys(domMap).length - 1]];

				var isEmpty = true; // Whether the address has data in it (pre-populated) -- first assume it is empty.

				for (var prop in domMap) {
					if (domMap.hasOwnProperty(prop)) {
						if (!arrayContains(acceptableFields, prop)) // Skip "id" and any other unacceptable field
							continue;

						if (typeof domMap[prop] == "object" && domMap[prop].getBoundingClientRect().top > this.lastField.getBoundingClientRect().top) {
							this.lastField = domMap[prop];
						}

						var elem, val, elemArray, isData;
						try {
							elem = $(domMap[prop]);
							elemArray = elem.toArray();
							isData = elemArray ? elemArray.length == 0 : false;
						} catch (e) {
							isData = true;
						}

						if (isData) // Didn't match an HTML element, so treat it as an address string ("street1" data) instead
							val = domMap[prop] || "";
						else
							val = elem.val() || "";

						fields[prop] = {};
						fields[prop].value = val;
						fields[prop].undo = val;

						if (!isData) {
							if (config.debug) {
								elem.css("background", "#FFFFCC");
								elem.attr("placeholder", prop + ":" + id);
							}
							fields[prop].dom = domMap[prop];
						}

						// This has to be passed in at bind-time; they cannot be obtained at run-time
						var data = {
							address: this,
							field: prop,
							value: val
						};

						// Capture the element that is clicked on so we know whether or not to close the autocomplete UI
						// (http://stackoverflow.com/a/11544766/4462191)
						$(document).mousedown(function (e) {
							// The latest element clicked
							clicky = $(e.target);
						});

						// when "clicky == null" on blur, we know it was not caused by a click
						// but maybe by pressing the tab key
						$(document).mouseup(function (e) {
							clicky = null;
						});

						$(document).keydown(function (e) {
							typey = $(e.target);
						});

						$(document).keyup(function (e) {
							typey = null;
						});

						// Bind the DOM element to needed events, passing in the data above
						// NOTE: When the user types a street, city, and state, then hits Enter without leaving
						// the state field, this change() event fires before the form is submitted, and if autoVerify is
						// on, the verification will not invoke form submit, because it didn't come from a form submit.
						// This is known behavior and is actually proper functioning in this uncommon edge case.
						!isData && $(domMap[prop]).change(data, actionsOnChange);
					}
				}

				state = "changed";
			}
		};

		// Run the "constructor" to load up the address
		this.load(domMap, addressID);

		this.set = function (key, value, updateDomElement, keepState, sourceEvent, suppressAutoVerify) {
			if (typeof key === "string" && arguments.length >= 2)
				return doSet(key, value, updateDomElement, keepState, sourceEvent, suppressAutoVerify);
			else if (typeof key === "object") {
				var successful = true;
				for (var prop in key) {
					if (key.hasOwnProperty(prop)) {
						successful = doSet(prop, key[prop], updateDomElement, keepState, sourceEvent, suppressAutoVerify) ? successful : false;
					}
				}
				return successful;
			}
		};

		this.replaceWith = function (resp, updateDomElement, e) {
			// Given the response from an API request associated with this address,
			// replace the values in the address... and if updateDomElement is true,
			// then change the values in the fields on the page accordingly.

			if (typeof resp === "array" && resp.length > 0)
				resp = resp[0];

			// Sent via US api
			if (typeof resp.candidate_index != "undefined") {
				if (self.isFreeform()) {
					var singleLineAddr = (resp.addressee ? resp.addressee + ", " : "") +
						(resp.delivery_line_1 ? resp.delivery_line_1 + ", " : "") +
						(resp.delivery_line_2 ? resp.delivery_line_2 + ", " : "") +
						(resp.components.urbanization ? resp.components.urbanization + ", " : "") +
						(resp.last_line ? resp.last_line : "");
					var fieldKey = "freeform";
					if (fields.address1) {
						fieldKey = "address1";
					}
					self.set(fieldKey, singleLineAddr, updateDomElement, true, e, false);
				} else {
					if (resp.addressee)
						self.set("organization", resp.addressee, updateDomElement, true, e, false);
					if (resp.delivery_line_1)
						self.set("address1", resp.delivery_line_1, updateDomElement, true, e, false);
					if (resp.delivery_line_2)
						self.set("address2", resp.delivery_line_2, updateDomElement, true, e, false); // Rarely used; must otherwise be blank.
					else
						self.set("address2", "", updateDomElement, true, e, false);
					if (resp.components.city_name)
						self.set("locality", resp.components.city_name, updateDomElement, true, e, false);
					if (resp.components.state_abbreviation)
						self.set("administrative_area", resp.components.state_abbreviation, updateDomElement, true, e, false);
					if (resp.components.zipcode && resp.components.plus4_code)
						self.set("postal_code", resp.components.zipcode + "-" + resp.components.plus4_code, updateDomElement, true, e, false);
				}
				self.set("address3", "", updateDomElement, true, e, false);
				self.set("address4", "", updateDomElement, true, e, false);
				self.set("country", "USA", updateDomElement, true, e, false);
			} else { // Sent via international API
				if (self.isFreeform()) {
					var singleLineAddr = (resp.organization ? resp.organization + ", " : "") +
						(resp.address1 ? resp.address1 : "") +
						(resp.address2 ? ", " + resp.address2 : "") +
						(resp.address3 ? ", " + resp.address3 : "") +
						(resp.address4 ? ", " + resp.address4 : "") +
						(resp.address5 ? ", " + resp.address5 : "") +
						(resp.address6 ? ", " + resp.address6 : "") +
						(resp.address7 ? ", " + resp.address7 : "") +
						(resp.address8 ? ", " + resp.address8 : "") +
						(resp.address9 ? ", " + resp.address9 : "") +
						(resp.address10 ? ", " + resp.address10 : "") +
						(resp.address11 ? ", " + resp.address11 : "") +
						(resp.address12 ? ", " + resp.address12 : "");
					var countryLine = resp.components.country_iso_3 ? resp.components.country_iso_3 : "";
					self.set("freeform", singleLineAddr, updateDomElement, true, e, false);
					self.set("country", countryLine, updateDomElement, true, e, false);
				} else {
					if (resp.organization)
						self.set("organization", resp.organization, updateDomElement, true, e, false);
					if (resp.components.locality)
						self.set("locality", resp.components.locality, updateDomElement, true, e, false);
					if (resp.components.administrative_area)
						self.set("administrative_area", resp.components.administrative_area, updateDomElement, true, e, false);
					if (resp.components.postal_code_short) {
						var fullPostalCode = resp.components.postal_code_short;
						if (resp.components.postal_code_extra)
							fullPostalCode = fullPostalCode + "-" + resp.components.postal_code_extra;
						self.set("postal_code", fullPostalCode, updateDomElement, true, e, false);
					}
					if (this.getDomFields().address4) {
						if (resp.address1)
							self.set("address1", resp.address1, updateDomElement, true, e, false);
						if (resp.address2)
							self.set("address2", resp.address2, updateDomElement, true, e, false);
						if (resp.address3)
							self.set("address3", resp.address3, updateDomElement, true, e, false);
						var addressLine4 = "";
						addressLine4 = addAddressLine(addressLine4, resp.address4, resp.address5);
						addressLine4 = addAddressLine(addressLine4, resp.address5, resp.address6);
						addressLine4 = addAddressLine(addressLine4, resp.address6, resp.address7);
						addressLine4 = addAddressLine(addressLine4, resp.address7, resp.address8);
						addressLine4 = addAddressLine(addressLine4, resp.address8, resp.address9);
						addressLine4 = addAddressLine(addressLine4, resp.address9, resp.address10);
						addressLine4 = addAddressLine(addressLine4, resp.address10, resp.address11);
						addressLine4 = addAddressLine(addressLine4, resp.address11, resp.address12);
						self.set("address4", addressLine4, updateDomElement, true, e, false);
					} else if (this.getDomFields().address3) {
						if (resp.address1)
							self.set("address1", resp.address1, updateDomElement, true, e, false);
						if (resp.address2)
							self.set("address2", resp.address2, updateDomElement, true, e, false);
						var addressLine3 = "";
						addressLine3 = addAddressLine(addressLine3, resp.address3, resp.address4);
						addressLine3 = addAddressLine(addressLine3, resp.address4, resp.address5);
						addressLine3 = addAddressLine(addressLine3, resp.address5, resp.address6);
						addressLine3 = addAddressLine(addressLine3, resp.address6, resp.address7);
						addressLine3 = addAddressLine(addressLine3, resp.address7, resp.address8);
						addressLine3 = addAddressLine(addressLine3, resp.address8, resp.address9);
						addressLine3 = addAddressLine(addressLine3, resp.address9, resp.address10);
						addressLine3 = addAddressLine(addressLine3, resp.address10, resp.address11);
						addressLine3 = addAddressLine(addressLine3, resp.address11, resp.address12);
						self.set("address3", addressLine3, updateDomElement, true, e, false);
					} else if (this.getDomFields().address2) {
						if (resp.address1)
							self.set("address1", resp.address1, updateDomElement, true, e, false);
						var addressLine2 = "";
						addressLine2 = addAddressLine(addressLine2, resp.address2, resp.address3);
						addressLine2 = addAddressLine(addressLine2, resp.address3, resp.address4);
						addressLine2 = addAddressLine(addressLine2, resp.address4, resp.address5);
						addressLine2 = addAddressLine(addressLine2, resp.address5, resp.address6);
						addressLine2 = addAddressLine(addressLine2, resp.address6, resp.address7);
						addressLine2 = addAddressLine(addressLine2, resp.address7, resp.address8);
						addressLine2 = addAddressLine(addressLine2, resp.address8, resp.address9);
						addressLine2 = addAddressLine(addressLine2, resp.address9, resp.address10);
						addressLine2 = addAddressLine(addressLine2, resp.address10, resp.address11);
						addressLine2 = addAddressLine(addressLine2, resp.address11, resp.address12);
						self.set("address2", addressLine2, updateDomElement, true, e, false);
					} else if (this.getDomFields().address1) {
						var addressLine1 = "";
						addressLine1 = addAddressLine(addressLine1, resp.address1, resp.address2);
						addressLine1 = addAddressLine(addressLine1, resp.address2, resp.address3);
						addressLine1 = addAddressLine(addressLine1, resp.address3, resp.address4);
						addressLine1 = addAddressLine(addressLine1, resp.address4, resp.address5);
						addressLine1 = addAddressLine(addressLine1, resp.address5, resp.address6);
						addressLine1 = addAddressLine(addressLine1, resp.address6, resp.address7);
						addressLine1 = addAddressLine(addressLine1, resp.address7, resp.address8);
						addressLine1 = addAddressLine(addressLine1, resp.address8, resp.address9);
						addressLine1 = addAddressLine(addressLine1, resp.address9, resp.address10);
						addressLine1 = addAddressLine(addressLine1, resp.address10, resp.address11);
						addressLine1 = addAddressLine(addressLine1, resp.address11, resp.address12);
						self.set("address1", addressLine1, updateDomElement, true, e, false);
					}
					if (resp.components.country_iso_3)
						self.set("country", resp.components.country_iso_3, updateDomElement, true, e, false);
				}
			}
		};

		var addAddressLine = function (fullLine, addressLine, nextAddressLine) {
			if (addressLine && nextAddressLine) {
				if (fullLine != "")
					fullLine += ", ";
				fullLine += addressLine;
			}
			return fullLine;
		};

		this.corners = function (lastField) {
			var corners = {};

			if (!lastField) {
				for (var prop in fields) {
					if (fields.hasOwnProperty(prop)) {
						if (!fields[prop].dom || !$(fields[prop].dom).is(":visible"))
							continue;

						var dom = fields[prop].dom;
						var offset = $(dom).offset();
						offset.right = offset.left + $(dom).outerWidth(false);
						offset.bottom = offset.top + $(dom).outerHeight(false);

						corners.top = !corners.top ? offset.top : Math.min(corners.top, offset.top);
						corners.left = !corners.left ? offset.left : Math.min(corners.left, offset.left);
						corners.right = !corners.right ? offset.right : Math.max(corners.right, offset.right);
						corners.bottom = !corners.bottom ? offset.bottom : Math.max(corners.bottom, offset.bottom);
					}
				}
			} else {
				var jqDom = $(self.lastField);
				corners = jqDom.offset();
				corners.right = corners.left + jqDom.outerWidth(false);
				corners.bottom = corners.top + jqDom.outerHeight(false);
			}

			corners.width = corners.right - corners.left;
			corners.height = corners.bottom - corners.top;

			return corners;
		};

		this.verify = function (invoke, invokeFn) {
			// Invoke contains the element to "click" on once we're all done, or is a user-defined callback function (may also be undefined)
			if (!self.enoughInput()) {
				return trigger("AddressWasMissingInput", {
					address: self,
					invoke: invoke,
					invokeFn: invokeFn,
					response: new Response([])
				});
			}

			ui.disableFields(self);
			self.verifyCount++;
			var addrData = self.toRequestIntl();
			var credentials = config.token ? "auth-id=" + encodeURIComponent(config.key) + "&auth-token=" +
				encodeURIComponent(config.token) : "auth-id=" + encodeURIComponent(config.key);
			var requestUrl = config.requestUrlInternational;
			var headers = {};
			if (self.isDomestic() && config.target.indexOf("US") >= 0) {
				requestUrl = config.requestUrlUS;
				addrData = self.toRequestUS();
			}

			var agent = "&agent=" + encodeURIComponent("smartystreets (plugin:website@" + instance.version + ")");
			if (config.agent)
				agent += "&agent=" + encodeURIComponent(config.agent);

			$.ajax({
				url: requestUrl + "?" + credentials + agent,
				contentType: "jsonp",
				data: addrData,
				timeout: config.timeout
			})
				.done(function (response, statusText, xhr) {
					trigger("ResponseReceived", {
						address: self,
						response: new Response(response),
						invoke: invoke,
						invokeFn: invokeFn
					});
				})
				.fail(function (xhr, statusText) {
					var indexOfCountry = xhr.responseText.split("\n")[0].indexOf("country");
					if (xhr.status === 422 && indexOfCountry > -1) {
						return trigger("CountryWasInvalid", {
							address: self,
							response: new Response([]),
							invoke: invoke,
							invokeFn: invokeFn
						});
					} else {
						trigger("RequestTimedOut", {
							address: self,
							status: statusText,
							invoke: invoke,
							invokeFn: invokeFn
						});
					}
					self.verifyCount--; // Address verification didn't actually work, so don't count it
				});

			// Remember, the above callbacks happen later and this function is
			// executed immediately afterward, probably before a response is received.
			trigger("RequestSubmitted", {
				address: self
			});
		};

		this.enoughInput = function () {
			// Checks for state dropdown
			var stateText;
			if (fields.administrative_area) {
				stateText = fields.administrative_area.value;
				if (fields.administrative_area.dom !== undefined && fields.administrative_area.dom.length !== undefined) {
					if (fields.administrative_area.dom.selectedIndex < 1)
						stateText = "";
					else
						stateText = fields.administrative_area.dom.options[fields.administrative_area.dom.selectedIndex].text;
				}
			}

			if (fields.country && !fields.country.value) {
				return false;
			}
			if (fields.freeform && !fields.freeform.value) {
				return false;
			}
			if (fields.address1 && !fields.address1.value) {
				return false;
			}
			if (fields.postal_code && fields.locality && fields.administrative_area && !fields.postal_code.value && !fields.locality.value && !(stateText.length > 0)) {
				return false;
			} else if (fields.postal_code && fields.locality && fields.administrative_area && !fields.postal_code.value && fields.locality.value && !(stateText.length > 0)) {
				return false;
			} else if (fields.postal_code && fields.locality && fields.administrative_area && !fields.postal_code.value && !fields.locality.value && stateText.length > 0) {
				return false;
			} else if (fields.postal_code && !fields.locality && !fields.administrative_area && !fields.postal_code.value) {
				return false;
			} else if (!fields.postal_code && fields.locality && fields.administrative_area && (!fields.locality.value || !(stateText.length > 0))) {
				return false;
			}
			return true;
		};

		this.toRequestIntl = function () {
			var obj = {};
			if (fields.hasOwnProperty("freeform") &&
				fields.hasOwnProperty("address1") &&
				fields.hasOwnProperty("locality") &&
				fields.hasOwnProperty("administrative_area") &&
				fields.hasOwnProperty("postal_code")) {
				delete fields.address1;
				delete fields.locality;
				delete fields.administrative_area;
				delete fields.postal_code;
			}
			for (var key in fields) {
				if (fields.hasOwnProperty(key)) {
					var keyval = {};
					if (fields[key].dom && fields[key].dom.tagName === "SELECT" && fields[key].dom.selectedIndex >= 0) {
						keyval[key] = fields[key].dom[fields[key].dom.selectedIndex].text;
					} else {
						keyval[key] = fields[key].value.replace(/\r|\n/g, " "); // Line breaks to spaces
					}
					$.extend(obj, keyval);
				}
			}
			obj.geocode = config.geocode;
			return obj;
		};

		this.toRequestUS = function () {
			var obj = {};
			if (fields.address1 && fields.address1.dom && fields.address1.dom.value) {
				obj.street = fields.address1.dom.value;
			} else if (fields.address1 && fields.address1.value) { // Covers a special case where the user calls .verify on the instance
				obj.street = fields.address1.value;
			}
			if (fields.address2 && fields.address2.dom && fields.address2.dom.value) {
				obj.street2 = fields.address2.dom.value;
			}
			if (fields.address3 && fields.address3.dom && fields.address3.dom.value) {
				if (typeof obj.street2 === "undefined") {
					obj.street2 = fields.address3.dom.value;
				} else {
					obj.street2 = obj.street2 += ", " + fields.address3.dom.value;
				}
			}
			if (fields.address4 && fields.address4.dom && fields.address4.dom.value) {
				if (typeof obj.street2 === "undefined") {
					obj.street2 = fields.address4.dom.value;
				} else {
					obj.street2 = obj.street2 += ", " + fields.address4.dom.value;
				}
			}
			if (fields.locality && fields.locality.dom) {
				if (fields.locality.dom.tagName === "SELECT" && fields.locality.dom.selectedIndex >= 0) {
					obj.city = fields.locality.dom[fields.locality.dom.selectedIndex].text;
				} else {
					obj.city = fields.locality.dom.value;
				}
			}
			if (fields.administrative_area && fields.administrative_area.dom.value) {
				if (fields.administrative_area.dom.tagName === "SELECT" && fields.administrative_area.dom.selectedIndex >= 0) {
					obj.state = fields.administrative_area.dom[fields.administrative_area.dom.selectedIndex].text;
				} else {
					obj.state = fields.administrative_area.dom.value;
				}
			}
			if (fields.postal_code && fields.postal_code.dom.value) {
				obj.zipcode = fields.postal_code.dom.value;
			}
			if (fields.freeform && fields.freeform.dom.value) {
				obj.street = fields.freeform.dom.value;
			}
			if (typeof this.secondary !== "undefined") {
				obj.secondary = this.secondary;
				delete this.secondary;
			}
			if (typeof this.address1 !== "undefined") {
				obj.street = this.address1;
				delete this.address1;
				if (typeof this.zipcode !== "undefined") {
					obj.zipcode = this.zipcode;
					delete this.zipcode;
				}
				delete obj.freeform;
			}

			obj.match = this.match;
			obj.candidates = config.candidates;
			return obj;
		};

		function getStringOfPossibleDropdown(field) {
			if (field.dom) {
				if (field.dom.tagName !== "SELECT") {
					return field.dom.value + " ";
				} else if (field.dom.selectedIndex > 0) {
					return field.dom[field.dom.selectedIndex].text + " ";
				}
			}
			return "";
		}

		this.toString = function () {
			if (fields.freeform) {
				return (fields.freeform ? fields.freeform.value + " " : "") + (fields.country ? fields.country.value : "");
			} else {
				var addrString = (fields.address1 ? fields.address1.value + " " : "") + (fields.address2 ? fields.address2.value + " " : "") +
					(fields.address3 ? fields.address3.value + " " : "") + (fields.address4 ? fields.address4.value + " " : "") +
					(fields.locality ? fields.locality.value + " " : "");
				if (fields.administrative_area) {
					addrString += getStringOfPossibleDropdown(fields.administrative_area);
				}
				addrString += (fields.postal_code ? fields.postal_code.value + " " : "");
				if (fields.country) {
					addrString += getStringOfPossibleDropdown(fields.country);
				}
				return addrString;
			}
		};

		this.abort = function (event, keepAccept) {
			keepAccept = typeof keepAccept === "undefined" ? false : keepAccept;
			if (!keepAccept)
				self.unaccept();
			delete self.form.processing;
			return suppress(event);
		};

		// Based on the properties in "fields," determines if this is a single-line address
		this.isFreeform = function () {
			return fields.freeform;
		};

		this.get = function (key) {
			return fields[key] ? fields[key].value : null
		};

		this.undo = function (updateDomElement) {
			updateDomElement = typeof updateDomElement === "undefined" ? true : updateDomElement;
			for (var key in fields) {
				if (fields.hasOwnProperty(key)) {
					this.set(key, fields[key].undo, updateDomElement, false, undefined, true);
				}
			}
		};

		this.accept = function (data, showValid) {
			showValid = typeof showValid === "undefined" ? true : showValid;
			state = "accepted";
			ui.enableFields(self);
			if (showValid) // If user chooses original input or the request timed out, the address wasn't "verified"
				ui.markAsValid(self);
			trigger("AddressAccepted", data);
		};

		this.unaccept = function () {
			state = "changed";
			ui.unmarkAsValid(self);
			return self;
		};

		this.getUndoValue = function (key) {
			return fields[key].undo;
		};

		this.status = function () {
			return state;
		};

		this.getDomFields = function () {
			// Gets just the DOM elements for each field
			var obj = {};
			for (var prop in fields) {
				if (fields.hasOwnProperty(prop)) {
					var ext = {};
					ext[prop] = fields[prop].dom;
					$.extend(obj, ext);
				}
			}
			return obj;
		};

		this.hasDomFields = function () {
			for (var prop in fields) {
				if (fields.hasOwnProperty(prop) && fields[prop].dom) {
					return true;
				}
			}
		};

		this.isDomestic = function () {
			var countryValue = "";
			if (fields.country && fields.country.dom) {
				countryValue = $(fields.country.dom).val();
				var selectedOption = $(fields.country.dom).children(":selected");
				if (selectedOption.length > 0 && selectedOption.index() > 0)
					countryValue = selectedOption.text();
			}
			countryValue = countryValue.toUpperCase().replace(/\.|\s|\(|\)|\\|\/|-/g, "");
			var usa = ["", "0", "1", "US", "USA", "USOFA", "USOFAMERICA", "AMERICAN", // 1 is AmeriCommerce
				"UNITEDSTATES", "UNITEDSTATESAMERICA", "UNITEDSTATESOFAMERICA", "AMERICA",
				"840", "223", "AMERICAUNITEDSTATES", "AMERICAUS", "AMERICAUSA", "UNITEDSTATESUS",
				"AMERICANSAMOA", "AMERIKASĀMOA", "AMERIKASAMOA", "ASM",
				"MICRONESIA", "FEDERALSTATESOFMICRONESIA", "FEDERATEDSTATESOFMICRONESIA", "FSM",
				"GUAM", "GM",
				"MARSHALLISLANDS", "MHL",
				"NORTHERNMARIANAISLANDS", "NMP",
				"PALAU", "REPUBLICOFPALAU", "BELAU", "PLW",
				"PUERTORICO", "COMMONWEALTHOFPUERTORICO", "PRI",
				"UNITEDSTATESVIRGINISLANDS", "VIR"
			]; // 840 is ISO: 3166; and 223 is some shopping carts
			return arrayContains(usa, countryValue) || fields.country.value == "-1";
		};

		this.autocompleteVisible = function () {
			return config.ui && config.autocomplete && $(".smarty-autocomplete.smarty-addr-" + self.id()).is(":visible");
		};

		this.id = function () {
			return id;
		};
	}

	/*
	 Represents a <form> tag which contains mapped fields.
	 */
	function Form(domElement) {
		this.addresses = [];
		this.dom = domElement;

		this.activeAddressesNotAccepted = function () {
			var addrs = [];
			for (var i = 0; i < this.addresses.length; i++) {
				var addr = this.addresses[i];
				if (addr.status() != "accepted" && addr.active)
					addrs.push(addr);
			}
			return addrs;
		};

		this.allActiveAddressesAccepted = function () {
			return this.activeAddressesNotAccepted().length == 0;
		};
	}

	/*
	 Wraps output from the API in an easier-to-handle way
	 */

	function Response(json) {
		// PRIVATE MEMBERS //

		var checkBounds = function (idx) {
			// Ensures that an index is within the number of candidates
			if (idx >= json.length || idx < 0) {
				if (json.length == 0)
					throw new Error("Candidate index is out of bounds (no candidates returned; requested " + idx + ")");
				else
					throw new Error("Candidate index is out of bounds (" + json.length + " candidates; indicies 0 through " +
						(json.length - 1) + " available; requested " + idx + ")");
			}
		};

		var maybeDefault = function (idx) {
			// Assigns index to 0, the default value, if no value is passed in
			return typeof idx === "undefined" ? 0 : idx;
		};

		// PUBLIC-FACING MEMBERS //

		this.raw = json;
		this.length = json.length;

		this.isValid = function () {
			return (this.length === 1 &&
			(this.raw[0].analysis.verification_status === "Verified" ||
			this.raw[0].analysis.verification_status === "Partial" ||
			(typeof this.raw[0].analysis.dpv_match_code !== "undefined" && this.raw[0].analysis.dpv_match_code !== "N")));
		};

		this.isInvalid = function () {
			return (this.length === 0 ||
			(this.length === 1 &&
			(this.raw[0].analysis.verification_status === "None" ||
			this.raw[0].analysis.address_precision === "None" ||
			this.raw[0].analysis.address_precision === "AdministrativeArea" ||
			this.raw[0].analysis.address_precision === "Locality" ||
			this.raw[0].analysis.address_precision === "Thoroughfare" ||
			this.raw[0].analysis.dpv_match_code === "N" ||
			(typeof this.raw[0].analysis.verification_status === "undefined" &&
			typeof this.raw[0].analysis.dpv_match_code === "undefined"))));
		};

		this.isAmbiguous = function () {
			return this.length > 1;
		};

		this.isMissingSecondary = function (idx) {
			idx = maybeDefault(idx);
			checkBounds(idx);
			return (this.raw[idx].analysis.dpv_footnotes && this.raw[idx].analysis.dpv_footnotes.indexOf("N1") > -1) ||
				(this.raw[idx].analysis.dpv_footnotes && this.raw[idx].analysis.dpv_footnotes.indexOf("R1") > -1) ||
				(this.raw[idx].analysis.footnotes && this.raw[idx].analysis.footnotes.indexOf("H#") > -1);
		};
	}

	/*
	 *	EVENT HANDLER "SHTUFF"
	 */

	/*
	 Called every time a LiveAddress event is raised.
	 This allows us to maintain the binding even if the
	 callback function is changed later.
	 "event" is the actual event object, and
	 "data" is anything extra to pass to the event handler.
	 */
	function HandleEvent(event, data) {
		var handler = instance.events[event.type];
		if (handler)
			handler(event, data);
	}

	var clicky = null;
	var typey = null;

	function actionsOnChange(e) {

		function clickyIsNull() {
			return clicky === null;
		}

		function clickyIsBold() {
			return clicky[0].tagName === "B";
		}

		function elementIsActiveSuggestion(el) {
			return el.className === "smarty-suggestion smarty-active-suggestion";
		}

		function typeyIsNull() {
			return typey === null;
		}

		function clickyIsBoldAndNotActive() {
			return !clickyIsNull() && clickyIsBold() && !elementIsActiveSuggestion(clicky[0].parentElement);
		}

		function clickyIsNotBoldAndNotActive() {
			return !clickyIsNull() && !clickyIsBold() && !elementIsActiveSuggestion(clicky[0]);
		}

		function clickyAndTypeyAreNullAndAutocompleteVisible() {
			return clickyIsNull() && typeyIsNull() && e.data.address.autocompleteVisible();
		}

		// Hides the autocomplete UI when necessary
		// Don't hide unless the user didn't click on the autocomplete suggestion
		// Helps handle iOS arrow "tabs"
		if (clickyIsBoldAndNotActive() || clickyIsNotBoldAndNotActive() || clickyAndTypeyAreNullAndAutocompleteVisible()) {
			ui.hideAutocomplete(e.data.address.id());
		}
		e.data.address.set(e.data.field, e.target.value, false, false, e, false);
	}

	// Submits a form by calling `click` on a button element or `submit` on a form element
	var submitForm = function (invokeOn, invokeFunction) {
		if (invokeOn && typeof invokeOn !== "function" && invokeFunction) {
			if (invokeFunction == "click") {
				setTimeout(function () {
					$(invokeOn).click(); // Very particular: we MUST fire the native "click" event!
				}, 5);
			} else if (invokeFunction == "submit")
				$(invokeOn).submit(); // For submit(), we have to use jQuery's, so that all its submit handlers fire.
		}
	};

	/*
	 *	MISCELLANEOUS
	 */

	function arrayContains(array, subject) {
		// See if an array contains a particular value
		for (var i in array) {
			if (array.hasOwnProperty(i) && array[i] === subject) {
				return true;
			}
		}
		return false;
	}

	function randomInt(min, max) {
		// Generate a random integer between min and max
		return Math.floor(Math.random() * (max - min + 1)) + min;
	}

	function lowercase(string) {
		// Return an empty string if not defined, or a lowercase string with "[]" stripped.
		return string ? string.toLowerCase().replace("[]", "") : "";
	}

	function trigger(eventType, metadata) {
		// Raise an event (in our case, a custom event)
		$(document).triggerHandler(eventType, metadata);
	}

	function turnOn(eventType) {
		// Bind a custom handler to an event
		$(document).on(eventType, HandleEvent);
	}

	function suppress(event) {
		// Used to prevent form submits, and stop other events if needed
		if (!event) return false;
		if (event.preventDefault) event.preventDefault();
		if (event.stopPropagation) event.stopPropagation();
		if (event.stopImmediatePropagation) event.stopImmediatePropagation();
		event.cancelBubble = true;
		return false;
	}

})(jQuery, window, document);

var MP = {
    <!--mp_trans_disable_start -->
    Version: '3.1.1.0',
    SrcLang: 'en',
    <!--mp_trans_disable_end -->
    UrlLang: 'mp_js_current_lang',
    SrcUrl: decodeURIComponent('mp_js_orgin_url'),
    oSite: decodeURIComponent('mp_js_origin_baseUrl'),
    tSite: decodeURIComponent('mp_js_translated_baseUrl'),
    <!--mp_trans_disable_start -->
    init: function() {
        if (MP.oSite.indexOf('p_js_') == 1) {
            MP.SrcUrl = window.top.document.location.href;
            MP.oSite = MP.tSite = window.top.document.location.host;
            MP.UrlLang = MP.SrcLang;
        }
    },
    switchLanguage: function(url,pref,sync) {
        var sync = sync;
        var oSite=MP.oSite.replace('http://','').replace('https://','').replace(/\/?$/, '');
        var tSite=MP.tSite.replace('http://','').replace('https://','').replace(/\/?$/, '');
        url=url.replace('http://','').replace('https://','').replace(/\/?$/, '');
        if(sync && (typeof MpStorage !== 'undefined')&&(typeof MpStorage.updatePref !== 'undefined')){
            if(pref){
                var lang = pref.substring(0, 2);
                pref = lang == MP.UrlLang ? MP.SrcLang+pref.substring(2):pref;
            }
            MpStorage.updatePref(url,pref);
        }
        setTimeout(function() {
            var script = document.createElement('SCRIPT');
            if (url == oSite) {
                script.src = location.protocol + '//' + tSite +'?1023749634;' + encodeURIComponent(location.href);
            } else {
                script.src = location.protocol + '//' + url +'?1023749632;' + encodeURIComponent(MP.SrcUrl);
            }
            var target = document.getElementsByTagName('script')[0];
            target.parentNode.insertBefore(script, target);
        }, 500);
        return false;
    },
    switchToLang: function(url) {
        if(window.top.location.href == url){
            if((typeof MpStorage !== 'undefined')&&(typeof MpStorage.updatePref !== 'undefined'))
                MpStorage.updatePref(MP.oSite,MP.SrcLang);
        }else{
            window.top.location.href = url;
        }
    }
    <!-- mp_trans_disable_end -->
};

;/* Version 206c403a1a532b310b15ea4509f4902b v:4.2.12.1, c:76fd5db0dff91526cbab441d7d7b6911398e6283, b:6736 n:21-4.2.12.next-build */(function(){new function(){if(!window.ADRUM&&!0!==window["adrum-disable"]){var g=window.ADRUM={};window["adrum-start-time"]=window["adrum-start-time"]||(new Date).getTime();(function(a){(function(a){a.ed=function(){for(var a=[],c=0;c<arguments.length;c++)a[c-0]=arguments[c];for(c=0;c<a.length;c++){var b=a[c];b&&b.setUp()}}})(a.monitor||(a.monitor={}))})(g||(g={}));(function(a){a=a.conf||(a.conf={});a.beaconUrlHttp="http://col.eum-appdynamics.com";a.beaconUrlHttps="https://col.eum-appdynamics.com";a.corsEndpointPath="/eumcollector/beacons/browser/v1";
    a.imageEndpointPath="/eumcollector/adrum.gif?";a.appKey=window["adrum-app-key"]||"AD-AAB-AAD-EHA";var e="https:"===document.location.protocol;a.adrumExtUrl=(e?"https://cdn.appdynamics.com":"http://cdn.appdynamics.com")+"/adrum-ext.206c403a1a532b310b15ea4509f4902b.js";a.adrumXdUrl="https://cdn.appdynamics.com/adrum-xd.206c403a1a532b310b15ea4509f4902b.html";a.agentVer="4.2.12.1";a.sendImageBeacon="false";if(window["adrum-geo-resolver-url"]){var f=window["adrum-geo-resolver-url"],c=f.indexOf("://");-1!=
    c&&(f=f.substring(c+3));f=(e?"https://":"http://")+f}else f=e?"":"";a.geoResolverUrl=f;a.useStrictDomainCookies=!0===window["adrum-use-strict-domain-cookies"];a.userConf=window["adrum-config"];a.fe=10})(g||(g={}));(function(a){(function(e){function f(a){return"undefined"!==typeof a&&null!==a}function c(a){return"[object Array]"===Object.prototype.toString.apply(a)}function b(a){return"object"==typeof a&&!c(a)&&null!==a}function d(a){return"string"==
    typeof a}function h(a,d){for(var e in d){var r=d[e];if(m(d,e)){var f=a[e];b(r)&&b(f)?h(f,r):a[e]=c(f)&&c(r)?f.concat(r):r}}return a}function m(a,d){return Object.prototype.hasOwnProperty.call(a,d)&&f(a[d])}function r(a){return d(a)?a.replace(/^\s*/,"").replace(/\s*$/,""):a}e.isDefined=f;e.isArray=c;e.isObject=b;e.isFunction=function(a){return"function"==typeof a||!1};e.isString=d;e.isNumber=function(a){return"number"==typeof a};e.Xa=function(a){setTimeout(a,0)};e.addEventListener=function(d,h,b){function m(){try{return b.apply(this,
    Array.prototype.slice.call(arguments))}catch(e){a.exception(e,"M1",h,d,e)}}a.isDebug&&a.log("M0",h,d);d.addEventListener?d.addEventListener(h,m,!1):d.attachEvent&&d.attachEvent("on"+h,m)};e.loadScriptAsync=function(d){var h=document.createElement("script");h.async=!0;h.src=d;var b=document.getElementsByTagName("script")[0];b?(b.parentNode.insertBefore(h,b),a.log("M2",d)):a.log("M3",d)};e.mergeJSON=h;e.hasOwnPropertyDefined=m;e.ud=function(a){var d=[];a&&(e.isObject(a)?d=[a]:e.isArray(a)&&(d=a));return d};
    e.generateGUID="undefined"!==typeof window.crypto&&"undefined"!==typeof window.crypto.getRandomValues?function(){function a(d){for(d=d.toString(16);4>d.length;)d="0"+d;return d}var d=new Uint16Array(8);window.crypto.getRandomValues(d);return a(d[0])+a(d[1])+"_"+a(d[2])+"_"+a(d[3])+"_"+a(d[4])+"_"+a(d[5])+a(d[6])+a(d[7])}:function(){return"xxxxxxxx_xxxx_4xxx_yxxx_xxxxxxxxxxxx".replace(/[xy]/g,function(a){var d=16*Math.random()|0;return("x"==a?d:d&3|8).toString(16)})};e.md=function(a){return a?(a=a.stack)&&
    "string"===typeof a?a:null:null};e.trim=r;e.Eg=function(a){var d={},h,b;if(!a)return d;var m=a.split("\n");for(b=0;b<m.length;b++){var e=m[b];h=e.indexOf(":");a=r(e.substr(0,h)).toLowerCase();h=r(e.substr(h+1));a&&(d[a]=d[a]?d[a]+(", "+h):h)}return d};e.tryPeriodically=function(a,d,h,b){function m(){if(d())h&&h();else{var c=a(++e);0<c?setTimeout(m,c):b&&b()}}var e=0;m()};e.Vb=function(a){return a.charAt(0).toUpperCase()+a.slice(1)};e.Nc=function(a){for(var d=[],h=1;h<arguments.length;h++)d[h-1]=arguments[h];
        return function(){for(var h=[],b=0;b<arguments.length;b++)h[b-0]=arguments[b];return a.apply(this,d.concat(h))}};e.now=Date&&Date.now||function(){return(new Date).getTime()}})(a.utils||(a.utils={}))})(g||(g={}));(function(a){function e(d,b,e,c){d=a.conf.beaconUrlHttps+"/eumcollector/error.gif?version=1&appKey="+e+"&msg="+encodeURIComponent(d.substring(0,500));c&&(d+="&stack=",d+=encodeURIComponent(c.substring(0,1500-d.length)));return d}function f(h,b){2<=d||(document.createElement("img").src=e(h,
    0,a.conf.appKey,b),d++)}function c(a){return 0<=a.location.search.indexOf("ADRUM_debug=true")||0<=a.cookie.search(/(^|;)\s*ADRUM_debug=true/)}a.iDR=c;a.isDebug=c(document);var b=[];a.logMessages=b;a.log=function(d){for(var m=1;m<arguments.length;m++);a.isDebug&&b.push(Array.prototype.slice.call(arguments).join(" | "))};a.error=function(d){for(var b=1;b<arguments.length;b++);b=Array.prototype.slice.call(arguments).join(" | ");a.log(b);f(b,null)};a.exception=function(){for(var d=[],b=0;b<arguments.length;b++)d[b-
0]=arguments[b];1>arguments.length||(d=Array.prototype.slice.call(arguments),b=a.utils.md(d[0]),d=d.slice(1).join(" | "),a.log(d),f(d,b))};a.assert=function(d,b){d||a.error("Assert fail: "+b)};a.dumpLog=a.isDebug?function(){for(var a="",d=0;d<b.length;d++)a+=b[d].replace(RegExp("<br/>","g"),"\n\t")+"\n";return a}:function(){};a.cIEBU=e;var d=0;a.log("M4")})(g||(g={}));(function(a){var e=function(){function a(b){this.max=b;this.Ba=0}a.prototype.Tf=function(){this.ka()||this.Ba++};a.prototype.ka=function(){return this.Ba>=
    this.max};a.prototype.reset=function(){this.Ba=0};return a}(),f=function(){function c(){this.ga=[];this.$a=new e(c.ue);this.Na=new e(c.ie)}c.prototype.submit=function(b){this.push(b)&&a.initEXTDone&&this.processQ()};c.prototype.processQ=function(){for(var b=this.mf(),d=0;d<b.length;d++){var h=b[d];"function"===typeof a.commands[h[0]]?(a.isDebug&&a.log("M5",h[0],h.slice(1).join(", ")),a.commands[h[0]].apply(a,h.slice(1))):a.error("M6",h[0])}};c.prototype.hg=function(a){return"reportXhr"===a||"reportPageError"===
    a};c.prototype.push=function(b){var d=b[0],h=this.hg(d),m=h?this.$a:this.Na;if(m.ka())return a.log("M7",h?"spontaneous":"non spontaneous",d),!1;this.ga.push(b);m.Tf();return!0};c.prototype.mf=function(){var a=this.ga;this.reset();return a};c.prototype.size=function(){return this.ga.length};c.prototype.reset=function(){this.ga=[];this.$a.reset();this.Na.reset()};c.prototype.isSpontaneousQueueDead=function(){return this.$a.ka()};c.prototype.isNonSpontaneousQueueDead=function(){return this.Na.ka()};
    c.ue=100;c.ie=100;return c}();a.Id=f})(g||(g={}));(function(a){a.q=new a.Id;a.command=function(e){for(var f=1;f<arguments.length;f++);a.isDebug&&a.log("M8",e,Array.prototype.slice.call(arguments).slice(1).join(", "));a.q.submit(Array.prototype.slice.call(arguments))}})(g||(g={}));(function(a){(function(a){var f=function(){function a(){this.status={}}a.prototype.setUp=function(){};a.prototype.set=function(a,d){this.status[a]=d};return a}();a.rb=f})(a.monitor||(a.monitor={}))})(g||(g={}));(function(a){(function(e){window.ADRUM.aop=
    e;e.support=function(a){return!a||"apply"in a};e.around=function(f,c,b,d,h){a.assert(e.support(f),"aop.around called on a function which does not support interception");f=f||function(){};return function(){a.isDebug&&a.log("M9",d,Array.prototype.slice.call(arguments).join(", "));var m=Array.prototype.slice.call(arguments),e;try{c&&(e=c.apply(this,m))}catch(k){a.exception(k,"M10",d,k)}a.assert(!e||"[object Array]"===Object.prototype.toString.call(e));var p=void 0;try{p=f.apply(this,e||m)}catch(g){throw h&&
h(g),g;}finally{try{b&&b.apply(this,m)}catch(l){a.exception(l,"M11",d,l)}}return p}};e.before=function(a,c){return e.around(a,c)};e.after=function(a,c){return e.around(a,null,c)}})(a.aop||(a.aop={}))})(g||(g={}));(function(a){a=a.EventType||(a.EventType={});a[a.BASE_PAGE=0]="BASE_PAGE";a[a.IFRAME=1]="IFRAME";a[a.XHR=2]="XHR";a[a.VIRTUAL_PAGE=3]="VIRTUAL_PAGE";a[a.PAGE_ERROR=4]="PAGE_ERROR";a[a.ABSTRACT=100]="ABSTRACT";a[a.ADRUM_XHR=101]="ADRUM_XHR";a[a.NG_VIRTUAL_PAGE=102]="NG_VIRTUAL_PAGE"})(g||
    (g={}));(function(a){a=a.events||(a.events={});a.l={};a.l[100]={guid:"string",url:"string",parentGUID:"string",parentUrl:"string",parentType:"number",timestamp:"number"};a.l[3]={resTiming:"object"};a.l[102]={digestCount:"number"};a.l[2]={method:"string",parentPhase:"string",parentPhaseId:"number",error:"object"};a.l[101]={xhr:"object"};a.l[4]={msg:"string",line:"number",stack:"string"}})(g||(g={}));(function(a){var e=function(){function a(){this.w={}}a.prototype.mark=function(a,d){f.mark.apply(this,
    arguments)};a.prototype.getTiming=function(a){return(a=this.getEntryByName(a))&&a.startTime};a.prototype.measure=function(a,d,h){f.measure.apply(this,arguments)};a.prototype.getEntryByName=function(a){return f.getEntryByName.call(this,a)};a.Aa=function(a){return f.Aa(a)};return a}();a.PerformanceTracker=e;var f;(function(e){var b=a.utils.hasOwnPropertyDefined,d=window.performance||window.mozPerformance||window.msPerformance||window.webkitPerformance,h=d&&d.timing&&d.timing.navigationStart?d.timing.navigationStart:
    window["adrum-start-time"],m=a.utils.now;e.mark=function(d,b){this.w[d]={name:d,entryType:"mark",startTime:a.utils.isDefined(b)?b:m(),duration:0}};e.measure=function(d,e,c){b(this.w,e)&&b(this.w,c)?this.w[d]={name:d,entryType:"measure",startTime:e?this.w[e].startTime:h,duration:(c?this.w[c].startTime:m())-(e?this.w[e].startTime:h)}:a.error("M12",b(this.w,e)?c:e)};e.getEntryByName=function(a){return this.w[a]||null};e.Aa=function(a){return a+h}})(f||(f={}))})(g||(g={}));(function(a){(function(e){function f(d,
b){d=d||{};for(var e in d)b[e]=function(){var b=e,h=d[e];return function(d){var e="_"+b,m=this[e];if(a.utils.isDefined(d))if(typeof d===h)this[e]=d;else throw TypeError("wrong type of "+b+" value, "+typeof d+" passed in but should be a "+h+".");return m}}()}function c(a){var b={},e;for(e in a){var c=a[e];b[c.start]=!0;b[c.end]=!0}return b}var b=function(){function d(d){this.perf=new a.PerformanceTracker;this.timestamp(a.utils.now());this.guid(a.utils.generateGUID());this.url(document.URL);this.dd(d)}
    d.prototype.type=function(){return 100};d.prototype.dd=function(d){if(a.utils.isObject(d))for(var b in d){var e=this[b]||this["mark"+a.utils.Vb(b)];e&&a.utils.isFunction(e)&&e.call(this,d[b])}};d.Rb=function(a,d,b){return{guid:function(){return a},url:function(){return d},type:function(){return b}}};d.prototype.Jf=function(){return d.Rb(this.parentGUID(),this.parentUrl(),this.parentType())};d.prototype.parent=function(d){var b=this.Jf();a.utils.isDefined(d)&&(this.parentGUID(d.guid()),this.parentUrl(d.url()),
        this.parentType(d.type()));return b};return d}();e.EventTracker=b;e.V=f;e.Sb=function(d,b){d=d||{};var e=c(d),r;for(r in e)e=a.utils.Vb(r),b["mark"+e]=a.utils.Nc(function(a,d){this.perf.mark(a,d)},r),b["get"+e]=a.utils.Nc(function(a){return this.perf.getTiming(a)},r)};f(e.l[100],b.prototype)})(a.events||(a.events={}))})(g||(g={}));var t=this.Ne||function(a,e){function f(){this.constructor=a}for(var c in e)e.hasOwnProperty(c)&&(a[c]=e[c]);f.prototype=e.prototype;a.prototype=new f};(function(a){(function(a){var f=
    function(a){function b(d){a.call(this,d)}t(b,a);b.prototype.type=function(){return 4};return b}(a.EventTracker);a.Error=f;a.V(a.l[4],f.prototype)})(a.events||(a.events={}))})(g||(g={}));(function(a){(function(e){var f=function(e){function b(){e.apply(this,arguments)}t(b,e);b.prototype.setUp=function(){var d=this;e.prototype.setUp.call(this);a.listenForErrors=function(){d.Fc()};this.Fc()};b.prototype.Uc=function(d,h,e,c){b.errorsSent>=a.conf.fe?a.log("M13"):(c=a.utils.md(c),a.command("reportPageError",
    new a.events.Error(a.utils.mergeJSON({msg:d+"",url:a.utils.isString(h)?h:void 0,line:a.utils.isNumber(e)?e:void 0,stack:c},this.status))),b.errorsSent++)};b.prototype.Fc=function(){var d=this;a.aop.support(window.onerror)?(window.onerror=a.aop.around(window.onerror,function(a,e,c,f,g){b.La||(d.Uc(a,e,c,g),b.La=!0)},function(){b.La=!1},"onerror"),a.log("M14")):a.log("M15")};b.La=!1;b.errorsSent=0;return b}(e.rb);e.ErrorMonitor=f;e.Fa=new e.ErrorMonitor})(a.monitor||(a.monitor={}))})(g||(g={}));(function(a){var e=
    function(){function e(){this.sa=[];this.na(e.wa,0)}e.prototype.wg=function(a){this.na(e.Lb,a)};e.prototype.yg=function(a){this.na(e.Tb,a)};e.prototype.xg=function(a){this.na(e.Nb,a)};e.prototype.na=function(a,b){this.sa.push({vg:(new Date).getTime(),ug:b,Oc:a});this.gf=a};e.prototype.getPhaseName=function(){return this.gf};e.prototype.getPhaseID=function(a){for(var b=0;b<e.Qb.length;b++)if(e.Qb[b]===a)return b;return null};e.prototype.getPhaseCallbackTime=function(a){for(var b=this.sa,d=0;d<b.length;d++)if(b[d].Oc===
        a)return b[d].vg;return null};e.prototype.findPhaseAtNominalTime=function(c){a.assert(0<=c);for(var b=this.sa,d=b.length-1;0<=d;d--)if(c>=b[d].ug)return b[d].Oc;a.error("M16",c,a.utils.nf(b));return e.wa};e.wa="AFTER_FIRST_BYTE";e.Lb="AFTER_DOM_INTERACTIVE";e.Tb="AT_ONLOAD";e.Nb="AFTER_ONLOAD";e.Qb=[e.wa,e.Lb,e.Tb,e.Nb];return e}();a.yh=e;a.lifecycle=new e;a.lifecycle=a.lifecycle})(g||(g={}));(function(a){(function(a){var f=function(a){function b(){a.apply(this,arguments)}t(b,a);b.prototype.type=
    function(){return 0};return b}(a.EventTracker);a.PageView=f})(a.events||(a.events={}))})(g||(g={}));(function(a){(function(e){var f=function(){function c(){}c.prototype.setUp=function(){c.Ug();c.Tg()};c.Tg=function(){a.utils.addEventListener(window,"load",c.oa);a.utils.addEventListener(window,"load",c.Bg)};c.Bg=function(b){a.lifecycle.yg(b&&b.timeStamp);a.utils.Xa(function(){var d=(new Date).getTime();a.lifecycle.xg(d);a.command("mark","onload",d);e.Db.perf&&(e.perfMonitor.cf(),e.perfMonitor.df());
    a.command("reportOnload",new a.events.PageView);a.utils.loadScriptAsync(a.conf.adrumExtUrl)});a.log("M17")};c.Ug=function(){if(document.addEventListener)document.addEventListener("DOMContentLoaded",c.ba,!1);else{document.attachEvent("onreadystatechange",c.ba);var b=null;try{b=null===window.frameElement?document.documentElement:null}catch(d){}null!=b&&b.doScroll&&function m(){if(!c.isReady){try{b.doScroll("left")}catch(a){setTimeout(m,10);return}c.oa()}}()}a.log("M18")};c.oa=function(b){c.Ic||(a.lifecycle.wg(b&&
    b.timeStamp),a.command("mark","onready",(new Date).getTime()),c.Ic=!0)};c.ba=function(a){document.addEventListener?(document.removeEventListener("DOMContentLoaded",c.ba,!1),c.oa(a)):"complete"===document.readyState&&(document.detachEvent("onreadystatechange",c.ba),c.oa(a))};c.isReady=!1;c.Ic=!1;return c}();e.Kd=f;e.lf=new e.Kd})(a.monitor||(a.monitor={}))})(g||(g={}));(function(a){(function(e){var f=function(){function e(){this.navTiming=this.resTiming=null}e.prototype.setUp=function(){e.perf=window.performance||
    window.mozPerformance||window.msPerformance||window.webkitPerformance};e.prototype.cf=function(){var b=e.perf;if(b=b&&b.timing)if(b.navigationStart&&b.navigationStart<=b.loadEventEnd){var d={},h;for(h in b){var m=b[h];"number"===typeof m&&(d[h]=m)}this.navTiming=d}else a.log("M20");else a.log("M19")};e.prototype.df=function(){this.resTiming=this.nc()};e.prototype.nc=function(){var b=e.perf,d=[];b&&b.getEntriesByType&&(b=b.getEntriesByType("resource"))&&b.length&&0<b.length&&b.unshift&&(d=b);0==d.length&&
a.log("M21");return d};e.perf=null;return e}();e.Db=f;e.perfMonitor=new e.Db})(a.monitor||(a.monitor={}))})(g||(g={}));(function(a){(function(e){e.parseURI=function(a){var e=String(a).replace(/^\s+|\s+$/g,"").match(/^([^:\/?#]+:)?(?:\/\/(?:([^:@\/?#]*)(?::([^:@\/?#]*))?@)?(([^:\/?#]*)(?::(\d*))?))?([^?#]*)(\?[^#]*)?(#[\s\S]*)?/);a=e&&null!=a.match(e[1]+"//");return e&&{href:e[0]||"",protocol:e[1]||"",Za:a?"//":"",ib:e[2]||"",Ra:e[3]||"",host:e[4]||"",hostname:e[5]||"",port:e[6]||"",pathname:e[7]||
    "",search:e[8]||"",hash:e[9]||""}};e.absolutizeURI=function(a,c){function b(a){var d=[];a.replace(/^(\.\.?(\/|$))+/,"").replace(/\/(\.(\/|$))+/g,"/").replace(/\/\.\.$/,"/../").replace(/\/?[^\/]*/g,function(a){"/.."===a?d.pop():d.push(a)});return d.join("").replace(/^\//,"/"===a.charAt(0)?"/":"")}var d,h,m,r,k,g,n,l;l=c?e.parseURI(c):{};n=a?e.parseURI(a):{};l.protocol?(d=l.protocol,h=l.Za,m=l.ib,r=l.Ra,k=l.host,g=b(l.pathname),n=l.search):l.host?(d=n.protocol,h=n.Za,m=l.ib,r=l.Ra,k=l.host,g=b(l.pathname),
    n=l.search):(d=n.protocol,h=n.Za,m=n.ib,r=n.Ra,k=n.host,l.pathname?("/"===l.pathname.charAt(0)?g=b(l.pathname):(g=n.pathname?n.pathname.slice(0,n.pathname.lastIndexOf("/")+1)+l.pathname:h?"/"+l.pathname:l.pathname,g=b(g)),n=l.search):(g=b(n.pathname),n=l.search||n.search));return d+h+(m?m+(r?":"+r:"")+"@":"")+k+g+n+(l.hash?l.hash:"")};e.getFullyQualifiedUrl=function(f){try{var c,b=document.location.href,d;a:{for(var h=document.getElementsByTagName("base"),m=0;m<h.length;m++){var r=h[m].href;if(r){d=
    r;break a}}d=void 0}c=d?e.absolutizeURI(b,d):b;return e.absolutizeURI(c,f)}catch(k){return a.exception(k,"M22",f,c),f}}})(a.utils||(a.utils={}))})(g||(g={}));(function(a){a=a.events||(a.events={});a=a.b||(a.b={});a.navigationStart="navigationStart";a.domainLookupStart="domainLookupStart";a.domainLookupEnd="domainLookupEnd";a.connectStart="connectStart";a.secureConnectionStart="secureConnectionStart";a.connectEnd="connectEnd";a.requestStart="requestStart";a.responseStart="responseStart";a.responseEnd=
    "responseEnd";a.domContentLoadedEventStart="domContentLoadedEventStart";a.loadEventEnd="loadEventEnd";a.bd="sendTime";a.fc="firstByteTime";a.Yc="respAvailTime";a.Zc="respProcTime";a.jb="viewChangeStart";a.qd="viewChangeEnd";a.kb="viewDOMLoaded";a.wd="xhrRequestsCompleted";a.ei="viewFragmentsLoaded";a.fi="viewResourcesLoaded";a.lb="virtualPageStart";a.nh="virtualPageEnd"})(g||(g={}));(function(a){a=a.events||(a.events={});a.B={};a.B[0]={sf:{start:a.b.navigationStart,end:a.b.loadEventEnd,name:"PLT"},
    xf:{start:a.b.navigationStart,end:a.b.responseStart,name:"FBT"},ai:{start:a.b.navigationStart,end:a.b.requestStart,name:"SCT"},bi:{start:a.b.secureConnectionStart,end:a.b.connectEnd,name:"SHT"},Ih:{start:a.b.domainLookupStart,end:a.b.domainLookupEnd,name:"DLT"},di:{start:a.b.connectStart,end:a.b.connectEnd,name:"TCP"},Zh:{start:a.b.requestStart,end:a.b.responseStart,name:"RAT"},Kh:{start:a.b.responseStart,end:a.b.loadEventEnd,name:"FET"},Mh:{start:a.b.responseStart,end:a.b.domContentLoadedEventStart,
        name:"DRT"},Ch:{start:a.b.responseStart,end:a.b.responseEnd,name:"DDT"},Gh:{start:a.b.responseEnd,end:a.b.domContentLoadedEventStart,name:"DPT"},Yh:{start:a.b.domContentLoadedEventStart,end:a.b.loadEventEnd,name:"PRT"},Hh:{start:a.b.navigationStart,end:a.b.domContentLoadedEventStart,name:"DOM"}};a.B[2]={xf:{start:a.b.bd,end:a.b.fc,name:"FBT"},Lh:{start:a.b.fc,end:a.b.Yc,name:"DDT"},Bh:{start:a.b.Yc,end:a.b.Zc,name:"DPT"},sf:{start:a.b.bd,end:a.b.Zc,name:"PLT"}};a.B[3]={Sh:{start:a.b.lb,end:a.b.nh,
    name:"PLT"},Eh:{start:a.b.jb,end:a.b.qd,name:"DDT"},Ph:{start:a.b.jb,end:a.b.kb,name:"DRT"},th:{start:a.b.qd,end:a.b.kb,name:"DPT"},uh:{start:a.b.jb,end:a.b.kb,name:"DOM"},Xh:{start:"viewChangeEnd",end:"xhrRequestsCompleted",name:null},Qh:{start:"viewChangeEnd",end:"viewPartialsLoaded",name:null},Oh:{start:"viewPartialsLoaded",end:"viewFragmentsLoaded",name:null},Rh:{start:"viewPartialsLoaded",end:"viewResourcesLoaded",name:null}};a.B[102]=a.B[3]})(g||(g={}));(function(a){(function(a){var f=function(a){function e(d){a.call(this,
    d)}t(e,a);e.prototype.type=function(){return 2};return e}(a.EventTracker);a.Ajax=f;a.V(a.l[2],f.prototype);a.Sb(a.B[2],f.prototype)})(a.events||(a.events={}))})(g||(g={}));(function(a){(function(a){var f=function(a){function e(d){a.call(this,d)}t(e,a);e.prototype.type=function(){return 2};return e}(a.Ajax);a.AdrumAjax=f;a.V(a.l[101],f.prototype)})(a.events||(a.events={}))})(g||(g={}));(function(a){(function(e){var f=function(e){function b(){e.call(this);this.conf=null;this.ab=!1;this.xa=0;!0===window["adrum-xhr-disable"]?
    a.log("M23"):window.XMLHttpRequest?(this.conf={exclude:[{urls:[{pattern:a.conf.beaconUrlHttp+a.conf.corsEndpointPath},{pattern:a.conf.beaconUrlHttps+a.conf.corsEndpointPath}]}],include:[],maxPerPageView:Number.MAX_VALUE},b.Rc(this.conf,a.conf.userConf&&a.conf.userConf.xhr),(this.d=window.XMLHttpRequest.prototype)?"open"in this.d&&"send"in this.d?(this.ab=a.aop.support(this.d.open)&&a.aop.support(this.d.send))||a.log("M27"):a.log("M26"):a.log("M25")):a.log("M24")}t(b,e);b.Rc=function(d,e){e&&(e.include=
    a.utils.ud(e.include),e.exclude=a.utils.ud(e.exclude),a.utils.mergeJSON(d,e));var m=d.exclude;if(m)for(var r=0;r<m.length;r++){var c=m[r].urls;c&&0<c.length&&(m[r].urls=b.Zb(c))}if(m=d.include)for(r=0;r<m.length;r++)(c=m[r].urls)&&0<c.length&&(m[r].urls=b.Zb(c));if(!a.utils.isNumber(d.maxPerPageView)||0>=d.maxPerPageView)a.log("M28"),d.maxPerPageView=Number.MAX_VALUE};b.Zb=function(d){for(var e=[],b=0;b<d.length;b++){var c=d[b].pattern;if("string"===typeof c)try{e.push(new RegExp(c))}catch(k){a.exception(k,
    "Parse regex pattern failed.")}else a.error("xhr filter pattern should be a string")}return e};b.fd=function(a,e,m){var c=m&&m.include;m=m&&m.exclude;return c&&0<c.length&&!b.Cc(e,a,c)||m&&0<m.length&&b.Cc(e,a,m)};b.dc=function(d){var e=d.message||d.description,b=d.fileName||d.filename,c=d.lineNumber;a.utils.isString(d.description)&&0<=d.description.indexOf("Access is denied.")&&(e+=": maybe you have CORS XHR error in IE");a.monitor.Fa.Uc(e,b,c,d)};b.prototype.setUp=function(){if(this.ab){a.log("M29");
    a.xhrConstructor=window.XMLHttpRequest;a.xhrOpen=this.xhrOpen=this.d.open;a.xhrSend=this.xhrSend=this.d.send;var d=this;this.d.open=a.aop.around(this.d.open,function(){var e=1<=arguments.length?String(arguments[0]):"",m=2<=arguments.length?String(arguments[1]):"",m=a.utils.getFullyQualifiedUrl(m);d.xa>=d.conf.maxPerPageView||b.fd(m,e,d.conf)||(this._adrumAjaxT=new a.events.AdrumAjax(a.utils.mergeJSON({method:e,url:m,xhr:this},d.status)))},null,"XHR.open",b.dc);this.d.send=a.aop.around(this.d.send,
        function(){var e=this,m=e._adrumAjaxT;if(m&&!(++d.xa>d.conf.maxPerPageView)){var c=a.utils.now(),k=m.getSendTime();a.assert(null===k,"M30");m.timestamp(c);m.markSendTime(k||c);m.parentPhase(a.lifecycle.getPhaseName());b.fg(m.url())?e.setRequestHeader("ADRUM","isAjax:true"):a.log("M31",document.location.href,m.url());var f=0,g=function(){if(4==e.readyState)a.log("M32"),d.ta(e);else{var m=null;try{m=e.onreadystatechange}catch(c){a.log("M33",c);d.ta(e);return}f++;m?a.aop.support(m)?(e.onreadystatechange=
            d.$b(m,e,"XHR.onReadyStateChange"),a.log("M34",f)):(a.log("M35"),d.ta(e)):f<b.Le?a.utils.Xa(g):(a.log("M36"),d.ta(e))}};g()}},null,"XHR.send",b.dc);"addEventListener"in this.d&&"removeEventListener"in this.d&&a.aop.support(this.d.addEventListener)&&a.aop.support(this.d.removeEventListener)?(this.d.addEventListener=a.aop.around(this.d.addEventListener,this.ff(),null,"XHR.addEventListener"),this.d.removeEventListener=a.aop.around(this.d.removeEventListener,function(d,e){if(this._adrumAjaxT){var b=Array.prototype.slice.call(arguments);
        e.__adrumInterceptor?(b[1]=e.__adrumInterceptor,a.log("M37")):a.log("M38");return b}},null,"XHR.removeEventListener")):a.log("M39");a.log("M40")}};b.prototype.Jg=function(){this.xa=0};b.rg=function(a,e){for(var b=!1,c=0;c<e.length;c++){var k=e[c];if(k&&k.test(a)){b=!0;break}}return b};b.Cc=function(a,e,m){var c=!1;if(e&&m)for(var k=0;k<m.length;k++){var f=m[k];if(!(f.method&&a!==f.method||f.urls&&!b.rg(e,f.urls))){c=!0;break}}return c};b.Fg=function(a,e,b){return(e||a)===(b||a)};b.tc=function(d){var e=
    d._adrumAjaxT;if(e){var b=(new Date).getTime();2==d.readyState?e.markFirstByteTime(e.getFirstByteTime()||b):4==d.readyState&&(a.assert(null===e.getRespAvailTime(),"M41"),e.markRespAvailTime(e.getRespAvailTime()||b),e.markFirstByteTime(e.getFirstByteTime()||b))}};b.fg=function(a){var e=document.createElement("a");e.href=a;a=document.location;var m=a.protocol;return e.protocol===m&&e.hostname===a.hostname&&b.Fg(b.jf[m],e.port,a.port)};b.prototype.$b=function(d,e,m){return b.rh(d,function(){b.tc(this)},
    function(){var d=e._adrumAjaxT;if(d&&4==e.readyState){var m=(new Date).getTime();a.assert(null===d.getRespProcTime(),"M42");d.markRespProcTime(d.getRespProcTime()||m);b.a(e,d)}},m)};b.a=function(d,e){var b=d.status;if(400<=b){var c=d.responseText;e.error({status:b,msg:a.utils.isString(c)?c:""})}a.command("reportXhr",e)};b.prototype.ta=function(d){if(d._adrumAjaxT){var e=(new Date).getTime()+3E4,m=function(){b.tc(d);var c=d._adrumAjaxT;if(c){var f=(new Date).getTime();4==d.readyState?(a.assert(null===
    c.getRespProcTime(),"M43"),c.markRespProcTime(c.markRespProcTime()||f),a.log("M44"),b.a(d,c),delete d._adrumAjaxT):f<e?setTimeout(m,b.qb):(delete d._adrumAjaxT,a.log("M45"))}};m()}};b.rh=function(d,e,b,c){var f=d;d&&"object"===typeof d&&"toString"in d&&"[xpconnect wrapped nsIDOMEventListener]"===d.toString()&&"handleEvent"in d&&(f=function(){d.handleEvent.apply(this,Array.prototype.slice.call(arguments))});return a.aop.around(f,e,b,c)};b.prototype.ff=function(){for(var d=0;d<arguments.length;d++);
    var e=this;return function(d,b){if(("load"===d||"error"===d)&&b&&this._adrumAjaxT){var c;c=b;if(c.__adrumInterceptor)c=c.__adrumInterceptor;else if(a.aop.support(c)){var f=e.$b(c,this,"XHR.invokeEventListener");c=c.__adrumInterceptor=f}else c=null;if(c)return f=Array.prototype.slice.call(arguments),f[1]=c,a.log("M46"),f;a.log("M47",d,b)}}};b.Le=5;b.qb=50;b.jf={"http:":"80","https:":"443"};return b}(e.rb);e.ea=f;e.ua=new e.ea})(a.monitor||(a.monitor={}))})(g||(g={}));(function(a){(function(e){function f(a,
e){var b=[],c=/^\s*(ADRUM_BT\w*)=(.*)\s*$/i.exec(a);if(c){var f=c[1],c=c[2].replace(/^"|"$/g,""),c=decodeURIComponent(c).split("|"),g=c[0].split(":");if("R"===g[0]&&Number(g[1])===e)for(d(f),f=1;f<c.length;f++)b.push(c[f])}return b}function c(a,e){var b=/^\s*(ADRUM_(\d+)_(\d+)_(\d+))=(.*)\s*$/i.exec(a);if(b){var c=b[1],f=b[4],g=b[5];if(Number(b[3])===e)return d(c),{index:Number(f),value:g}}return null}function b(e){var b=/^\s*ADRUM=s=([\d]+)&r=(.*)\s*/.exec(e);if(b){a.log("M50",e);if(3===b.length)return d("ADRUM"),
{startTime:Number(b[1]),startPage:b[2]};a.error("M51",e);return null}}function d(d){a.log("M49",d);var e=new Date;e.setTime(e.getTime()-1E3);document.cookie=d+"=;Expires="+e.toUTCString()}e.startTimeCookie=null;e.cookieMetadataChunks=null;e.bc=function(d,m){a.log("M48");for(var g=m?m.length:0,k=[],p=d.split(";"),n=0;n<p.length;n++){var l=p[n],t=c(l,g);t?k.push(t):(l=b(l),null!=l&&(e.startTimeCookie=l))}Array.prototype.sort.call(k,function(a,d){return a.index-d.index});l=[];for(n=0;n<k.length;n++)l.push(k[n].value);
    for(n=0;n<p.length;n++)(k=f(p[n],g))&&0<k.length&&(l=l.concat(k));e.cookieMetadataChunks=l};a.correlation.eck=e.bc})(a.correlation||(a.correlation={}))})(g||(g={}));(function(a){a.report=function(e){a.utils.Xa(function(){a.command("reportEvent",e)})}})(g||(g={}));(function(a){"APP_KEY_NOT_SET"===a.conf.appKey&&"undefined"!==typeof console&&"undefined"!==typeof console.log&&console.log("AppDynamics EUM cloud application key missing. Please specify window['adrum-app-key']");a.correlation.bc(document.cookie,
    document.referrer);a.command("mark","firstbyte",window["adrum-start-time"]);a.monitor.ed(a.monitor.Fa,a.monitor.lf,a.monitor.perfMonitor,a.monitor.ua)})(g||(g={}));(function(a){a=a.ng||(a.ng={});a=a.c||(a.c={});a.Gc="locationChangeStart";a.og="locationChangeSuccess";a.$c="routeChangeStart";a.ad="routeChangeSuccess";a.hd="stateChangeStart";a.jd="stateChangeSuccess";a.rd="viewContentLoaded";a.Qf="includeContentRequested";a.Pf="includeContentLoaded";a.ac="digest";a.Uh="outstandingRequestsComplete";a.Ub=
    "beforeNgXhrRequested";a.Mb="afterNgXhrRequested";a.Th="ngXhrLoaded";a.Xb="$$completeOutstandingRequest"})(g||(g={}));(function(a){(function(e){function f(a,b,c,f,g,p){if(b)try{return b.apply(a,[c,f,g].concat(p))}catch(n){return a.error(c,f,g,p,e.Error.Sd,"an exception occurred in a caller-provided callback function",n)}}function c(a,b){return function(){var c=this.current,g=b[c]||b[e.da]||c,k=Array.prototype.slice.call(arguments);if(this.af(a))return this.error(a,c,g,k,e.Error.Td,"event "+a+" inappropriate in current state "+
    this.current);if(!1===f(this,this["onbefore"+a],a,c,g,k))return e.ca.nb;g===e.da&&(g=c);if(c===g)return f(this,this["onafter"+a]||this["on"+a],a,c,g,k),e.ca.we;var p=this;this.transition=function(){p.transition=null;p.current=g;f(p,p["onenter"+g]||p["on"+g],a,c,g,k);f(p,p["onafter"+a]||p["on"+a],a,c,g,k);return e.ca.Ee};if(!1===f(this,this["onleave"+c],a,c,g,k))return this.transition=null,e.ca.nb;if(this.transition)return this.transition()}}var b=a.utils.hasOwnPropertyDefined;e.VERSION="2.3.5";e.ca=
{Ee:1,we:2,nb:3,wh:4};e.Error={Td:100,xh:200,Sd:300};e.da="*";e.create=function(a,h){function m(a){var d=a.from instanceof Array?a.from:a.from?[a.from]:[e.da];l[a.name]=l[a.name]||{};for(var b=0;b<d.length;b++)t[d[b]]=t[d[b]]||[],t[d[b]].push(a.name),l[a.name][d[b]]=a.to||d[b]}var f="string"==typeof a.initial?{state:a.initial}:a.initial,g=h||a.target||{},p=a.events||[],n=a.callbacks||{},l={},t={};f&&(f.event=f.event||"startup",m({name:f.event,from:"none",to:f.state}));for(var s=0;s<p.length;s++)m(p[s]);
    for(var v in l)b(l,v)&&(g[v]=c(v,l[v]));for(v in n)b(n,v)&&(g[v]=n[v]);g.current="none";g.Nh=function(a){return a instanceof Array?0<=a.indexOf(this.current):this.current===a};g.$e=function(a){return!this.transition&&(b(l[a],this.current)||b(l[a],e.da))};g.af=function(a){return!this.$e(a)};g.sa=function(){return t[this.current]};g.error=a.error||function(a,e,d,b,c,h,m){throw m||h;};if(f&&!f.defer)g[f.event]();return g}})(a.Gb||(a.Gb={}))})(g||(g={}));(function(a){(function(e){var f=function(c){function b(e){c.call(this,
    e);this.perf=new a.PerformanceTracker;this.start()}t(b,c);b.prototype.type=function(){return 3};b.prototype.Ff=function(){return e.EventTracker.Rb(this.guid(),this.url(),this.type())};b.prototype.gd=function(e){var b=this.Ff();e.set("parent",b);a.log("M52",b.guid(),b.url())};b.prototype.startCorrelatingXhrs=function(){a.log("M53");this.gd(a.monitor.ua)};b.prototype.stopCorrelatingXhrs=function(){a.monitor.ua.set("parent",null);a.log("M54")};b.prototype.Xg=function(){a.log("M55");this.gd(a.monitor.Fa)};
    b.prototype.start=function(){this.markVirtualPageStart();this.startCorrelatingXhrs()};b.prototype.end=function(){this.markVirtualPageEnd();this.stopCorrelatingXhrs()};return b}(e.EventTracker);e.VPageView=f;e.V(e.l[3],f.prototype);e.Sb(e.B[3],f.prototype)})(a.events||(a.events={}))})(g||(g={}));(function(a){var e=a.ng||(a.ng={}),e=e.conf||(e.conf={});e.disabled=a.conf.userConf&&a.conf.userConf.spa&&a.conf.userConf.spa.angular&&a.conf.userConf.spa.angular.disable;e.ha=a.conf.userConf&&a.conf.userConf.spa&&
a.conf.userConf.spa.angular&&!0===a.conf.userConf.spa.angular.ha?!0:!1;e.xhr={};e.metrics={includeResTimingInEndUserResponseTiming:!0};a.conf.userConf&&a.conf.userConf.spa&&a.conf.userConf.spa.angular&&a.conf.userConf.spa.angular.vp&&(a.conf.userConf.spa.angular.vp.xhr&&a.monitor.ea.Rc(e.xhr,a.conf.userConf.spa.angular.vp.xhr),a.conf.userConf.spa.angular.vp.metrics&&a.utils.mergeJSON(e.metrics,a.conf.userConf.spa.angular.vp.metrics))})(g||(g={}));(function(a){(function(e){var f=function(c){function b(a){c.call(this,
    a);this.Ac=!0;this.X={};this.T=0;this.stopCorrelatingXhrs()}t(b,c);b.prototype.type=function(){return 3};b.prototype.lb=function(){this.markViewChangeStart();this.markVirtualPageStart(this.getViewChangeStart());this.timestamp(this.getViewChangeStart())};b.prototype.Rf=function(){this.digestCount(this.digestCount()+1)};b.prototype.Sf=function(){this.T++;a.log("increasing xhr count "+this.T+" pending xhr requests")};b.prototype.hf=function(){this.T--;a.log("decreasing xhr count "+this.T+" pending xhr requests")};
    b.prototype.Mf=function(){var e=this.perf.getEntryByName(a.events.b.wd);a.log("xhrCount "+this.T+" xhrReuqestCompleted "+e);return 0<this.T};b.prototype.Xe=function(){var a={ra:0},e=document.querySelectorAll("ng-view, [ng-view], .ng-view, [ui-view]");if(e&&0<e.length)for(var c in b.Xc)for(var f=0;f<e.length;f++){var g=angular.element(e[f]).find(c);if(0<g.length)for(var p=0;p<g.length;p++){var n=g[p][b.Xc[c].cb];(n=n?decodeURIComponent(n):null)&&!a[n]&&(a[n]=c,a.ra++)}}this.X=a};b.prototype.We=function(a){return!!this.X[decodeURIComponent(a.name)]};
    b.prototype.Ye=function(){var e=[],b=this;0<this.X.ra&&(e=a.monitor.perfMonitor.nc().filter(function(a){return b.We(a)}));this.resTiming(e)};b.uf=function(d){for(var b=[],c=0;c<d.length;c++){var f=d[c];2!==d[c].eventType&&101!==d[c].eventType||a.monitor.ea.fd(f.eventUrl,f.method,e.conf.xhr)||b.push(d[c])}return b};b.Gf=function(a){var e,b,c=-1;e=0;for(b=a.length;e<b;e++)c=Math.max(c,a[e].timestamp+a[e].metrics.PLT);return c};b.prototype.Re=function(){if(e.conf.xhr){var d=b.uf(a.channel.getEventsWithParentGUID(this.guid())),
        d=b.Gf(d);if(0<d){var c=this.perf.getEntryByName(a.events.b.wd);this.markXhrRequestsCompleted(Math.min(c&&c.startTime||Number.MAX_VALUE,d))}}};b.prototype.adjustTimings=function(){this.Re();var b=this.getViewDOMLoaded(),c=this.getXhrRequestsCompleted(),b=Math.max(b,c);e.conf.metrics.includeResTimingInEndUserResponseTiming&&(this.Qe(),c=this.getViewResourcesLoaded(),c=Math.max(b,c),a.log("adjust this.end from %s to %s",b,c),b=c);this.markVirtualPageEnd(b)};b.prototype.Qe=function(){if(0<this.X.ra){this.Ye();
        var e=this.resTiming();if(e&&e.length>=this.X.ra){for(var b=[],c=0;c<e.length;c++)b.push(e[c].responseEnd);e=Math.max.apply(Math,b);this.markViewResourcesLoaded(a.PerformanceTracker.Aa(e))}}};b.prototype.identifier=function(e){var c=this.td;a.utils.isDefined(e)&&(this.td=b.tf(e),this.url(this.td.url));return c};b.tf=function(e){var b={};e&&e.g?(b.g={Pa:""},a.utils.mergeJSON(b.g,{Pa:e.g.originalPath,Y:e.g.template,Z:e.g.templateUrl})):e&&e.state&&(b.state={url:""},a.utils.mergeJSON(b.state,{url:e.state.url,
        name:e.state.name,Y:e.state.template,Z:e.state.templateUrl}));return b};b.Xc={img:{cb:"src"},script:{cb:"src"},link:{cb:"href"}};return b}(a.events.VPageView);e.NgVPageView=f;a.events.V(a.events.l[102],f.prototype)})(a.ng||(a.ng={}))})(g||(g={}));(function(a){(function(e){var f=function(){function c(){this.e=new e.NgVPageView}c.prototype.Ng=function(){var b=this;e.conf.metrics.includeResTimingInEndUserResponseTiming?(a.log("M56"),setTimeout(function(){b.Ta()},c.Ge)):setTimeout(function(){b.Ta()},
    c.He)};c.prototype.Ta=function(){a.log("M57");var e=this.e;a.command("call",function(){e.adjustTimings();a.reporter.reportEvent(e)})};c.prototype.Sg=function(a){this.e=a};c.Ge=5E3;c.He=2*a.monitor.ea.qb;return c}();e.VirtualPageStateMachine=f;a.Gb.create({events:[{name:"start",from:"none",to:"ChangeView"},{name:"viewLoaded",from:"ChangeView",to:"XhrPending"},{name:"xhrCompleted",from:"XhrPending",to:"End"},{name:"abort",from:"*",to:"none"},{name:"init",from:"*",to:"none"},{name:"locChange",from:"*",
    to:"*"},{name:"beforeXhrReq",from:"*",to:"*"},{name:"afterXhrReq",from:"*",to:"*"}],error:function(e){a.log("M58"+e)},callbacks:{onChangeView:function(){this.e.lb();this.e.Xg()},onviewLoaded:function(){this.e.markViewDOMLoaded()},onXhrPending:function(){this.e.Ac&&this.xhrCompleted()},onleaveXhrPending:function(a,e,d){if("abort"===a)return this.Ta(),!0;if("xhrCompleted"===a&&"End"===d){if(this.e.Mf())return!1;this.e.markXhrRequestsCompleted();return!0}},onEnd:function(){this.e.Xe();this.Ng()},oninit:function(e,
b,d,f){this.Sg(f);a.monitor.ua.Jg()},onlocChange:function(a,e,d,f){this.e.identifier.url=f},onbeforeXhrReq:function(e,b,d,f){var m=this.e;m.Ac=!1;a.log("M59",f&&f[1]||"",m.guid());m.Sf();m.startCorrelatingXhrs();f[3]&&(f[3]=a.aop.before(f[3],function(e,b,d){a.log("M60");m.hf();d&&(e=a.utils.Eg(d)["content-type"])&&0<=e.indexOf("text/html")&&m.markViewFragmentsLoaded()}));return f},onafterXhrReq:function(){this.e.stopCorrelatingXhrs()}}},f.prototype)})(a.ng||(a.ng={}))})(g||(g={}));(function(a){(function(e){var f=
    function(){function c(){this.k=new e.VirtualPageStateMachine;this.ha=a.ng.conf.ha}c.prototype.h=function(b,d){a.log("M61",b);switch(b){case e.c.$c:case e.c.hd:this.k.start();var f=new e.NgVPageView({url:d.next.url,identifier:d.next});this.ha&&c.$f(this.k.e,f)?this.k.e.dd({url:d.next.url,identifier:d.next}):this.bh(f);break;case e.c.ad:case e.c.jd:this.k.e.markViewChangeEnd();break;case e.c.rd:this.k.viewLoaded();break;case e.c.Ub:this.k.beforeXhrReq(d);break;case e.c.Mb:this.k.afterXhrReq();break;
        case e.c.Xb:this.k.xhrCompleted();break;case e.c.Gc:this.k.locChange(d.next.url);break;case e.c.ac:this.k.e.Rf()}};c.prototype.bh=function(a){this.k.abort();this.k.init(a);this.k.start()};c.$f=function(e,d){var c=e.identifier(),f=d.identifier(),g=!1;return g=!a.utils.isDefined(c)&&!a.utils.isDefined(f)||c===f?!0:a.utils.isDefined(c)&&a.utils.isDefined(f)?c.state||f.state?a.utils.isDefined(c.state)&&a.utils.isDefined(f.state)?c.state.name===f.state.name&&c.state.Y===f.state.Y&&c.state.Z===f.state.Z&&
    c.state.url===f.state.url:!1:c.g&&f.g?c.g.Pa===f.g.Pa&&c.g.Y===f.g.Y&&c.g.Z===f.g.Z:c.url===f.url:!1};return c}();e.Je=f})(a.ng||(a.ng={}))})(g||(g={}));(function(a){(function(e){var f=function(){function c(){this.j=new e.Je}c.prototype.setUp=function(){var e=this;a.utils.addEventListener(document,"DOMContentLoaded",function(){a.log("M62");e.init()})};c.prototype.init=function(){if("undefined"!=typeof angular){a.log("M63");var e=this,d=angular.module("ng");d.config(["$provide",function(a){e.Xf(a);
    e.Wf(a)}]);d.run(["$browser",function(a){e.Vf(a)}]);a.log("M64")}};c.prototype.Wf=function(b){var d=a.aop,c=this;b.decorator("$httpBackend",["$delegate",function(a){return a=d.around(a,function(){var a=Array.prototype.slice.call(arguments);c.j.h(e.c.Ub,a);return a},function(){c.j.h(e.c.Mb)})}])};c.prototype.Xf=function(b){var d=a.aop,c=this;b.decorator("$rootScope",["$delegate",function(a){a.$digest=d.after(a.$digest,function(){c.j.h(e.c.ac)});a.$on("$locationChangeStart",function(a,b){var d={url:b},
    f=a&&a.W&&a.W.$state&&a.W.$state.current;f&&(d.state=f);c.j.h(e.c.Gc,{next:d})});a.$on("$locationChangeSuccess",function(){c.j.h(e.c.og)});a.$on("$routeChangeStart",function(a,b){var d={url:location.href},f=b&&b.$$route;f&&(d.g=f);c.j.h(e.c.$c,{next:d})});a.$on("$routeChangeSuccess",function(){c.j.h(e.c.ad)});a.$on("$stateChangeStart",function(a,b){c.j.h(e.c.hd,{next:{state:b}})});a.$on("$stateChangeSuccess",function(){c.j.h(e.c.jd)});a.$on("$viewContentLoaded",function(a){var b={url:location.href};
    if(a=a&&a.W&&a.W.$state&&a.W.$state.current)b.state=a;c.j.h(e.c.rd,{next:b})});a.$on("$includeContentRequested",function(){c.j.h(e.c.Qf)});a.$on("$includeContentLoaded",function(){c.j.h(e.c.Pf)});return a}])};c.prototype.Vf=function(b){var d=this;b.$$completeOutstandingRequest=a.aop.before(b.$$completeOutstandingRequest,function(){d.j.h(e.c.Xb)})};return c}();e.sh=f;e.ngMonitor=new f})(a.ng||(a.ng={}))})(g||(g={}));(function(a){var e=a.ng||(a.ng={});e.conf.disabled||a.monitor.ed(e.ngMonitor)})(g||
    (g={}))}};})();



String.prototype.toCamel = function(){
	return this.replace(/(\-[a-z])/g, function($1){return $1.toUpperCase().replace('-','');});
};
String.prototype.fromCamel = function(){
	return this.replace(/([A-Z])/g, function($1){return "-"+$1.toLowerCase();});
};

var xepOnline = window.xepOnline || {};

var current_mimetype = "application/pdf";
var current_stylesheet = "";
var current_height = 0;

function base64ToBuffer(base64) {
  var binstr = atob(base64);
  var buf = binaryStringToBuffer(binstr);
  return buf;
}

window.Unibabel = {
  utf8ToBinaryString: utf8ToBinaryString
, utf8ToBuffer: utf8ToBuffer
, utf8ToBase64: utf8ToBase64
, binaryStringToUtf8: binaryStringToUtf8
, bufferToUtf8: bufferToUtf8
, base64ToUtf8: base64ToUtf8
, bufferToBinaryString: bufferToBinaryString
, bufferToBase64: bufferToBase64
, binaryStringToBuffer: binaryStringToBuffer
, base64ToBuffer: base64ToBuffer

// compat
, strToUtf8Arr: utf8ToBuffer
, utf8ArrToStr: bufferToUtf8
, arrToBase64: bufferToBase64
, base64ToArr: base64ToBuffer
};

function bufferToHex(arr) {
  var i;
  var len;
  var hex = '';
  var c;

  for (i = 0, len = arr.length; i < len; i += 1) {
    c = arr[i].toString(16);
    if (c.length < 2) {
      c = '0' + c;
    }
    hex += c;
  }

  return hex;
}

function hexToBuffer(hex) {
  // TODO use Uint8Array or ArrayBuffer or DataView
  var i;
  var byteLen = hex.length / 2;
  var arr;
  var j = 0;

  if (byteLen !== parseInt(byteLen, 10)) {
    throw new Error("Invalid hex length '" + hex.length + "'");
  }

  arr = new Uint8Array(byteLen);

  for (i = 0; i < byteLen; i += 1) {
    arr[i] = parseInt(hex[j] + hex[j + 1], 16);
    j += 2;
  }

  return arr;
}

// Hex Convenience Functions
window.Unibabel.hexToBuffer = hexToBuffer;
window.Unibabel.bufferToHex = bufferToHex;

function utf8ToBinaryString(str) {
  var escstr = encodeURIComponent(str);
  // replaces any uri escape sequence, such as %0A,
  // with binary escape, such as 0x0A
  var binstr = escstr.replace(/%([0-9A-F]{2})/g, function(match, p1) {
    return String.fromCharCode('0x' + p1);
  });

  return binstr;
}

function utf8ToBuffer(str) {
  var binstr = utf8ToBinaryString(str);
  var buf = binaryStringToBuffer(binstr);
  return buf;
}

function utf8ToBase64(str) {
  var binstr = utf8ToBinaryString(str);
  return btoa(binstr);
}

function binaryStringToUtf8(binstr) {
  var escstr = binstr.replace(/(.)/g, function (m, p) {
    var code = p.charCodeAt(p).toString(16).toUpperCase();
    if (code.length < 2) {
      code = '0' + code;
    }
    return '%' + code;
  });

  return decodeURIComponent(escstr);
}

function bufferToUtf8(buf) {
  var binstr = bufferToBinaryString(buf);

  return binaryStringToUtf8(binstr);
}

function base64ToUtf8(b64) {
  var binstr = atob(b64);

  return binaryStringToUtf8(binstr);
}

function bufferToBinaryString(buf) {
  var binstr = Array.prototype.map.call(buf, function (ch) {
    return String.fromCharCode(ch);
  }).join('');

  return binstr;
}

function bufferToBase64(arr) {
  var binstr = bufferToBinaryString(arr);
  return btoa(binstr);
}

function binaryStringToBuffer(binstr) {
  var buf;

  if ('undefined' === typeof Uint8Array) {
    buf = new Uint8Array(binstr.length);
  } else {
    buf = [];
  }

  Array.prototype.forEach.call(binstr, function (ch, i) {
    buf[i] = ch.charCodeAt(0);
  });

  return buf;
}

function base64ToBuffer(base64) {
  var binstr = atob(base64);
  var buf = binaryStringToBuffer(binstr);
  return buf;
}

window.Unibabel = {
  utf8ToBinaryString: utf8ToBinaryString
, utf8ToBuffer: utf8ToBuffer
, utf8ToBase64: utf8ToBase64
, binaryStringToUtf8: binaryStringToUtf8
, bufferToUtf8: bufferToUtf8
, base64ToUtf8: base64ToUtf8
, bufferToBinaryString: bufferToBinaryString
, bufferToBase64: bufferToBase64
, binaryStringToBuffer: binaryStringToBuffer
, base64ToBuffer: base64ToBuffer

// compat
, strToUtf8Arr: utf8ToBuffer
, utf8ArrToStr: bufferToUtf8
, arrToBase64: bufferToBase64
, base64ToArr: base64ToBuffer
};

// Blob construction for download
function base64toBlob(base64Data, contentType, sliceSize) {
    var byteCharacters,
        byteArray,
        byteNumbers,
        blobData,
        blob;
    contentType = contentType || '';
    byteCharacters = atob(base64Data);
    // Get blob data sliced or not
    blobData = sliceSize ? getBlobDataSliced() : getBlobDataAtOnce();
    blob = new Blob(blobData, { type: contentType });
    return blob;
    /*
     * Get blob data in one slice.
     * => Fast in IE on new Blob(...)
     */
    function getBlobDataAtOnce() {
        byteNumbers = new Array(byteCharacters.length);
        for (var i = 0; i < byteCharacters.length; i++) {
            byteNumbers[i] = byteCharacters.charCodeAt(i);
        }
        byteArray = new Uint8Array(byteNumbers);
        return [byteArray];
    }
    /*
     * Get blob data in multiple slices.
     * => Slow in IE on new Blob(...)
     */
    function getBlobDataSliced() {
        var slice,
            byteArrays = [];
        for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {
            slice = byteCharacters.slice(offset, offset + sliceSize);
            byteNumbers = new Array(slice.length);
            for (var i = 0; i < slice.length; i++) {
                byteNumbers[i] = slice.charCodeAt(i);
            }
            byteArray = new Uint8Array(byteNumbers);
            // Add slice
            byteArrays.push(byteArray);
        }
        return byteArrays;
    }
};

		function saver(url, winMode, fileName, defaultMime){
		    var anchor = document.createElement("a");
			if ('download' in anchor) { //html5 A[download]
				anchor.href = url;
				anchor.setAttribute("download", fileName);
				anchor.className = "download-js-link";
				anchor.innerHTML = "downloading...";
				anchor.style.display = "none";
				document.body.appendChild(anchor);
				setTimeout(function() {
					anchor.click();
					document.body.removeChild(anchor);
					if(winMode===true){setTimeout(function(){ self.URL.revokeObjectURL(anchor.href);}, 250 );}
				}, 66);
				return true;
			}
			// handle non-a[download] safari as best we can:
			if(/(Version)\/(\d+)\.(\d+)(?:\.(\d+))?.*Safari\//.test(navigator.userAgent)) {
				if(/^data:/.test(url))	url="data:"+url.replace(/^data:([\w\/\-\+]+)/, defaultMime);
				if(!window.open(url)){ // popup blocked, offer direct download:
					if(confirm("Displaying New Document\n\nUse Save As... to download, then click back to return to this page.")){ location.href=url; }
				}
				return true;
			}
			//do iframe dataURL download (old ch+FF):
			var f = document.createElement("iframe");
			document.body.appendChild(f);
			if(!winMode && /^data:/.test(url)){ // force a mime that will download:
				url="data:"+url.replace(/^data:([\w\/\-\+]+)/, defaultMime);
			}
			f.src=url;
			setTimeout(function(){ document.body.removeChild(f); }, 333);
		};

xepOnline.IE = function() {
	var ua = window.navigator.userAgent;
	var msie = ua.indexOf('MSIE ');
	var trident = ua.indexOf('Trident/');
	var edge = ua.indexOf('Edge/');

	if (msie > 0) {
		// IE 10 or older => return version number
		return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
	}

	if (trident > 0) {
		// IE 11 => return version number
		var rv = ua.indexOf('rv:');
		return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10) >= 11;
	}
	
	if (edge > 0) {
		// IE 12 => return version number
		return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);
	}

	// other browser
	return false;
}

// TODO: better mobile check
xepOnline.detectmob1=function(){if( navigator.userAgent.match(/Android/i)||navigator.userAgent.match(/webOS/i)||navigator.userAgent.match(/iPhone/i)|| navigator.userAgent.match(/iPad/i)|| navigator.userAgent.match(/iPod/i)|| navigator.userAgent.match(/BlackBerry/i)||navigator.userAgent.match(/Windows Phone/i)){return true;}else {return false;}}
xepOnline.mobilecheck = function() {
	var check = false;
	(function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4)))check = true})(navigator.userAgent||navigator.vendor||window.opera);
	return xepOnline.detectmob1() || check;
}

xepOnline.DEFAULTS = {
	pageWidth:"8.5in",
	pageHeight:"11in",
	pageMargin:".50in"
};

// TODO: better media ignore method, maybe poke the css stylesheet to verify this is "the" bootstrap.css media to ignore
xepOnline.MEDIA_IGNORE = [
	"bootstrap.css",
	"bootstrap.min.css"
]

xepOnline.Formatter = {
	clean_tags: ['img', 'hr', 'br', 'input', 'col ', 'embed', 'param', 'source', 'link'],
	fo_attributes_root: [
			'color', 
			'height',
			'fontStyle', 'fontVariant', 'fontWeight', 'fontSize', 'fontFamily', 
			'textAlign',
			'width'
	],
	fo_attributes: [
			'lineHeight', 
			'alignmentBaseline', 
			'backgroundImage', 'backgroundPosition', 'backgroundRepeat', 'backgroundColor',
			'baselineShift', 
			'borderTopWidth','borderTopStyle','borderTopColor', 
			'borderBottomWidth','borderBottomStyle','borderBottomColor',
			'borderLeftWidth','borderLeftStyle','borderLeftColor',
			'borderRightWidth','borderRightStyle','borderRightColor',
			'borderCollapse',             
			'clear', 'color', 
			'display', 'direction', 'dominantBaseline', 
			'fill', 'float', 
			'fontStyle', 'fontVariant', 'fontWeight', 'fontSize', 'fontFamily', 
			'height',
			'listStyleType', 'listStyleImage', 
			'marginTop', 'marginBottom', 'marginLeft', 'marginRight','orphans', 
			'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft',
			'pageBreakAfter', 'pageBreakBefore', 
			'stroke', 'strokeWidth',
			'strokeOpacity', 'fillOpacity',
			'tableLayout', 
			'textAlign', 'textAnchor','textDecoration', 'textIndent', 'textTransform', 'textShadow',
			'verticalAlign',
			'widows', 'width',
			'position','top','left','bottom','right'],            
	getRealStyle: function(elm, attributes, pseudo) {
		var returnObj = {};
		var computed = getComputedStyle(elm, pseudo);
		for(var i=0; i<attributes.length; i++) {
			returnObj[attributes[i]] = computed[attributes[i]];
		}
		return returnObj;
	},
	copyComputedStyle: function(elm, dest, parentStyle, attributes, pseudo) {
		parentStyle = parentStyle || {}; 
		var s = xepOnline.Formatter.getRealStyle(elm, attributes, pseudo);

		for ( var i in s ) {
			var currentCss = s[i];

			// ignore duplicate "inheritable" properties
			if(parentStyle !== undefined && (parentStyle[i] && parentStyle[i] === currentCss)) { } else { 
				// The try is for setter only properties
				try {
					dest.style[i] = s[i];
					// `fontSize` comes before `font` If `font` is empty, `fontSize` gets
					// overwritten.  So make sure to reset this property. (hackyhackhack)
					// Other properties may need similar treatment
					if ( i == "font" ) {
						dest.style.fontSize = s.fontSize;
					}
				} catch (e) {}
			}
		}
	},
	setSVGHeightWidth: function(dest) {
	    jQuery(dest).find('svg').each(function(index) {
			var svg = jQuery(this);
			svg.attr('height',svg.outerHeight());
            svg.attr('width',svg.outerWidth());
		});
	},
	replaceCanvas: function(dest) {
	    jQuery(dest).find('canvas').each(function(index) {
			var canvas = this;
			var src_canvas = jQuery(jQuery(xepOnline.Formatter.__elm)[0]).find('canvas')[index];
			jQuery('<img src="' + src_canvas.toDataURL() +'"/>').insertAfter(canvas);
		});
	},
    handlePseudoElem: function(dest) {
	    jQuery(dest).find('*').each(function(index) {
			var elem = this;
			var before = getComputedStyle(elem, ':before');  
			if(before.getPropertyValue('content').length > 0 && before.getPropertyValue('content') != "none"){
			     var before_text = before.getPropertyValue('content').split('"');
			     var in_image = false;
			     var processed = false;
			     var span_before = jQuery('<span>');
			     var parentStyle = xepOnline.Formatter.getRealStyle(jQuery(elem).parent()[0], xepOnline.Formatter.fo_attributes, null);
			     xepOnline.Formatter.copyComputedStyle(elem, span_before[0], parentStyle, xepOnline.Formatter.fo_attributes, ":before");	
                 before_text.forEach(function (part){
                     if (part == "")
                        processed = true;       
                     if (part.indexOf("url(") >= 0){
                        in_image = true;
                        processed = true;
                     }
                     if (part.indexOf("ttp://") >= 0 && in_image == true) {
                         var img = jQuery('<img src="url(&quot;'+ part + '&quot;)">');
			             jQuery(span_before).append(img);
			             processed = true;
                     }
                     if (part.indexOf(")") >= 0 && in_image == true) {
                        in_image= false;
                        processed = true;
                     }
                     if (processed == false) {
                        var textspan = jQuery('<span>');
                        jQuery(textspan).text(part);
                        jQuery(span_before).append(textspan);
                     }
                     processed = false;
                 }); 
                 jQuery(elem).prepend(span_before);
            }
            var after = getComputedStyle(elem, ':after');   
			if(after.getPropertyValue('content').length > 0 && after.getPropertyValue('content') != "none"){
			     var after_text = after.getPropertyValue('content').split('"');
			     var in_image = false;
			     var processed = false;
			     var span_after = jQuery('<span>');
			     var parentStyle = xepOnline.Formatter.getRealStyle(jQuery(elem).parent()[0], xepOnline.Formatter.fo_attributes, null);
			     xepOnline.Formatter.copyComputedStyle(elem, span_after[0], parentStyle, xepOnline.Formatter.fo_attributes, ":after");	
                 after_text.forEach(function (part){
                     if (part == "")
                        processed = true;       
                     if (part.indexOf("url(") >= 0){
                        in_image = true;
                        processed = true;
                     }
                     if (part.indexOf("ttp://") >= 0 && in_image == true) {
                         var img = jQuery('<img src="url(&quot;'+ part + '&quot;)">');
			             jQuery(span_after).append(img);
			             processed = true;
                     }
                     if (part.indexOf(")") >= 0 && in_image == true) {
                        in_image= false;
                        processed = true;
                     }
                     if (processed == false) {
                        var textspan = jQuery('<span>');
                        jQuery(textspan).text(part);
                        jQuery(span_after).append(textspan);
                     }
                     processed = false;
                 }); 
                 jQuery(elem).append(span_after);
            }
		});
	},
	embedLocalImages: function(dest) {
	    jQuery(dest).find('img').each(function(index) {
			var img = this;
			var imageUrl = img.src;
			if (imageUrl.indexOf(xepOnline.Formatter.getBase()) != -1){
			     var canvas = document.createElement('canvas');
	             var ctx = canvas.getContext('2d');
		         canvas.height = img.height;
		         canvas.width = img.width;
	  	         ctx.drawImage(img,0,0, img.width, img.height);
	  	         var dataURL = canvas.toDataURL();
	  	         jQuery(img).attr('src', dataURL);
                canvas = null;
            }
		});
	},
	computeTableCols: function(dest) {
		jQuery(dest).find('table').each(function() {
			var table = this;
			jQuery(table).find('col,colgroup').each(function() {
				jQuery(this).attr('xeponline-drop-me',true);
			});

				var cols = 0;
				jQuery(jQuery.find('dest td,th',jQuery('tr',table)[0])).each(function(td) { cols += Number((Number(jQuery(td).attr('colspan'))) ? (jQuery(td).attr('colspan')): 1); })
				var tbody = jQuery('<tbody>');
				var tr = jQuery('<tr>');
				jQuery(tbody).append(tr);

				for(var i = 0; i<cols; i++) {
					jQuery(tr).append('<td style="padding:0; margin:0">&#x200b;</td>');
				}

				// append tbody after everything else
				jQuery(table).append(tbody);
				var widths = [];
				jQuery(jQuery(jQuery('tr',tbody)[0])).find('td,th').each(function() { 
					widths.push(jQuery(this).css('width').replace('px',''));
				});

				// remove any original col groups and widths
				jQuery(table).find('[xeponline-drop-me=true]').remove();
				jQuery(table).find('td,th').css('width','');

				var colgroup = jQuery('<colgroup>');
				jQuery(table).prepend(colgroup);
				for(var i = 0; i<widths.length;i++) {
					var col = jQuery('<col>');
					jQuery(col).attr('width', widths[i]);
					jQuery(colgroup).append(col);
				}
				jQuery(tbody).remove();
		});
	},
	cleanTags: function(PrintCopy) {
		var result = PrintCopy;
		for(var i=0; i<xepOnline.Formatter.clean_tags.length;i++) {
			var regx = new RegExp('(<' + xepOnline.Formatter.clean_tags[i] + '("[^"]*"|[^\/">])*)>', 'g');
			result = result.replace(regx, '$1/>');
		}
		return result;
	},
	flattenStyle: function(elm, options) {
		// parent
		xepOnline.Formatter.copyComputedStyle(elm, elm, undefined, xepOnline.Formatter.fo_attributes_root, null);
		// children
		jQuery(elm).find('*').each(function(index, elm2) {
			switch(elm2.tagName) {
				case 'IFRAME':
					try {
						// HACK! selector in iframe goes after [contenteditable] 
						// this to become an optional sub-selector for content iframe somehow in future
						var content = jQuery(jQuery(xepOnline.Formatter.__elm).find('iframe[src="' + jQuery(elm2).attr('src') + '"]')[0].contentDocument).find('[contenteditable]');
						var iflat = jQuery('<div data-xeponline-formatting=\'i-flat\'></div>');
						iflat.html(content.html());				
						content.after(iflat);
						xepOnline.Formatter.flattenStyle(iflat[0]);
						jQuery(elm2).after(iflat);
						
					} catch(e) {}
				case 'SCRIPT':
				// ignore these tags
				break;
				default:
					var parentStyle = xepOnline.Formatter.getRealStyle(jQuery(elm2).parent()[0], xepOnline.Formatter.fo_attributes, null);
					xepOnline.Formatter.copyComputedStyle(elm2, elm2, parentStyle, xepOnline.Formatter.fo_attributes, null);				
				break;

			}
		});
		// Fix table columns
		xepOnline.Formatter.computeTableCols(elm);
		// Check SVG width/height
		xepOnline.Formatter.setSVGHeightWidth(elm);
		// Embed canvas
		xepOnline.Formatter.replaceCanvas(elm);
		// Pseudo Elements (currently only handles :before and :after and can be turned off if needed)
		if (options.processPseudoElem == 'true')
		    xepOnline.Formatter.handlePseudoElem(elm);
		// Embed local image if set in options
		if (options.embedLocalImages == 'true') {
		    xepOnline.Formatter.embedLocalImages(elm);
		}
	},
	getFormTextData: function(PrintCopy) {
		var data = xepOnline.Formatter.entity_declaration + current_stylesheet + PrintCopy;
		var encoded = encodeURIComponent(data);
		if(window.btoa) return btoa(encoded);
		return encoded;
	},
	getFormData: function(PrintCopy, Name, MimeType, FileName, Resolution) {
		var data = xepOnline.Formatter.entity_declaration + current_stylesheet + PrintCopy;
		var blob;
		try
		{
			blob = new Blob([data],{ type: xepOnline.Formatter.src_type.xml });
		}
		catch(e) 
		{
			if(e.name === 'TypeError') {
				throw new Error('Blob undefined')
			}
		}

		if(blob === undefined) throw new Error('Blob undefined');

		var obj = new FormData();

		obj.append(Name,blob,FileName);
		obj.append('mimetype', MimeType);
		obj.append('resolution', Resolution);
		return obj;
	},
	togglePrintMediaStyle: function() {
		if(jQuery('head style[data-xeponline-formatting]').length > 0) {
			jQuery('head style[data-xeponline-formatting]').remove();
			return;
		}
		var printrules = [];
		for(var x=0;x<document.styleSheets.length;x++) { 
			// ignore media print
			var skipMedia = false;
			for(var i = 0; i < xepOnline.MEDIA_IGNORE.length; i++) {
				if(document.styleSheets[x].href && document.styleSheets[x].href.indexOf(xepOnline.MEDIA_IGNORE[i]) > 0) {
					skipMedia = true;
					break;
				}
			}


			// try catch - some browsers don't allow to read css stylesheets
			var rules;			
			try
			{
				if(!document.styleSheets[x].cssRules === null || (document.styleSheets[x].href !== null && document.styleSheets[x].href.indexOf(location.host) === 0)) {
					skipMedia = true;
				}
				if(skipMedia) continue;
				var rules=document.styleSheets[x].cssRules;
			} catch(e) {}	

			if(rules) {
				var rule=[];
				for(var x2=0;x2<rules.length;x2++) {
					
					if(rules[x2].media && rules[x2].media && (rules[x2].media[0] === 'print' || 
						rules[x2].media && rules[x2].media.mediaText === 'print')) {
						for(var x3=0;x3<rules[x2].cssRules.length; x3++) {
							rule.push(rules[x2].cssRules[x3]);
						}
					}  else if (rules[x2].parentStyleSheet.media[0] && 
							rules[x2].parentStyleSheet.media[0] === 'print' ||
							(rules[x2].parentStyleSheet.media && 
								rules[x2].parentStyleSheet.media.mediaText === 'print')) {
						rule.push(rules[x2]);
					}
				}
				for(var x2=0;x2<rule.length;x2++) {
					printrules.push(rule[x2].cssText);	
				}
			}
		}

		// write print media styles to head
		var html = '\n<style type="text/css" data-xeponline-formatting="true">\n';
		for(var x=0; x<printrules.length; x++) {
			html+='.xeponline-container ' + printrules[x] + '\n';
		}
		html += '</style>\n';
		jQuery('head').append(html);
	},
	getFOContainer: function(elm, options) {
		options 			= options || {};
		options.pageWidth 	= options.pageWidth || xepOnline.DEFAULTS.pageWidth;
		options.pageHeight 	= options.pageHeight || xepOnline.DEFAULTS.pageHeight;
		options.pageMargin 	= options.pageMargin || xepOnline.DEFAULTS.pageMargin;

		var container = jQuery('<div class=\'xeponline-container\'></div>');
		var margincontainer = jQuery('<div class=\'margin-container\'></div>');
		if (options.srctype == 'svg'){
		    var svgcontainer = jQuery('<div class=\'svg-container\' width=' + jQuery(elm).width() + ' height=' + jQuery(elm).height() + '></div>');
		    margincontainer.append(svgcontainer);
		}

		container.append(margincontainer);
		var stylebuilder = '';
		var stylebuildermargin = '';
		var fostylebuilder = '';
		
		stylebuilder += 'width: ' 			+ options.pageWidth + '; ';
		stylebuilder += 'height: ' 			+ options.pageHeight + '; ';
		stylebuildermargin += 'margin: ' 	+ options.pageMargin + '; ';

		if(options && options.pageMarginTop) {
			stylebuildermargin += 'margin-top: ' + options.pageMarginTop + '; ';
		}
		if(options && options.pageMarginRight) {
			stylebuildermargin += 'margin-right: ' + options.pageMarginRight + '; ';
		}
		if(options && options.pageMarginBottom) {
			stylebuildermargin += 'margin-bottom: ' + options.pageMarginBottom + '; ';
		}
		if(options && options.pageMarginLeft) {
			stylebuildermargin += 'margin-left: ' + options.pageMarginLeft + '; ';
		}
		if(options && options.cssStyle) {
		    jQuery.each(options.cssStyle, function(key, value) {
		      jQuery.each(value, function(objkey, objvalue) {
                stylebuilder += objkey.fromCamel()+ ': ' + objvalue + '; ';
              });
            });
		}
		if(options && options.foStyle) {
		    jQuery.each(options.foStyle, function(key, value) {
		      jQuery.each(value, function(objkey, objvalue) {
                fostylebuilder += objkey.fromCamel()+ ': ' + objvalue + '; ';
              });
            });
		}
		container.attr('style', stylebuilder);
		margincontainer.attr('style', stylebuildermargin);
		container.attr('fostyle', fostylebuilder);
		return container;
	},
	getBase: function() {
		var pathname = jQuery(location).attr('pathname').substring(0, jQuery(location).attr('pathname').lastIndexOf('/') + 1);
		var base = jQuery(location).attr('protocol') + '//' + jQuery(location).attr('hostname') + pathname;
		return base;
	},
	// IE Hack!
	cleanSVGDeclarations: function(data) {
		var builder = '';

		var regx = /<svg ("[^"]*"|[^\/">])*>/ig;
		var match = regx.exec(data);
		var startIdx = 0;
		var svgdec_text = 'xmlns="http://www.w3.org/2000/svg"';

		while(match != null) {

			builder = builder || '';
			builder += data.substring(startIdx, match.index);

			// hack for IE
			// build replacement opening svg tag, killing duplicate xmlns svg namespace decleration
			builder += '<svg';
			// add back name values
			var svgdec_flag = false;
			var namevalues = match[0].match(/([^< =,]*)=("[^"]*"|[^,"]*)/ig);
			for(var s = 0; s<namevalues.length; s++) {
				if(namevalues[s] === svgdec_text && svgdec_flag) { } else {
					builder += ' ' + namevalues[s];
				}
				svgdec_flag = namevalues[s] === svgdec_text || svgdec_flag;
			}
			builder += '>';

			data = data.substring(match.index + match[0].length);
			regx = /<svg ("[^"]*"|[^\/">])*>/ig;
			match = regx.exec(data);
		}

		return builder += (data || '');
	},
	xep_chandra_service: 'http://xep.cloudformatter.com/Chandra.svc/genpackage',
	xep_chandra_service_AS_PDF: 'http://xep.cloudformatter.com/Chandra.svc/genfile',
	xep_chandra_service_page_images: 'http://xep.cloudformatter.com/Chandra.svc/genpageimages',
	entity_declaration:'<!DOCTYPE div [  <!ENTITY % winansi SYSTEM "http://xep.cloudformatter.com/doc/XSL/winansi.xml">  %winansi;]>',
	xsl_stylesheet_declaration: '<?xml-stylesheet type="text/xsl" href="http://xep.cloudformatter.com/doc/XSL/xeponline-fo-translate-2.xsl"?>',
	svg_xsl_stylesheet_declaration: '<?xml-stylesheet type="text/xsl" href="http://xep.cloudformatter.com/doc/XSL/xeponline-svg-translate.xsl"?>',
	src_type: { xml: 'text/xml'},
	mime_type: { 
	   pdf: 'application/pdf', 
	   svg: 'image/svg+xml', 
	   xps:'application/vnd.ms-xpsdocument',
	   ps: 'application/postscript',
	   afp: 'application/afp',
	   xep: 'application/xep',
	   png: 'image/png'
	},
	/* options	
		{
			pageWidth: "8.5in", 				// reserved for the FO region-body (next 7)
			pageHeight: "11in", 
			pageMargin: ".25in", 
			pageMarginTop: "1in",
			pageMarginRight: "1in",
			pageMarginBottom: "1in",
			pageMarginLeft: "1in",
			pageMediaResource: "name_of_css_stylesheet",
			mimeType: ("application/pdf<default>"|"image/svg+xml"),
			render: ("none"|"newwin<default>"|embed"|"download<default IE>"),
			cssStyle: {							// puts css style attributes on the root, ex. fontSize:14px
						cssStyleName: 'value', ...
					},
			foStyle: {							// puts fo style attributes on the root, ex. fontSize:14px
						foStyleName: 'value', ...
					}			
		}
	*/
	__format: function(ElementIDs, options) {
		options = options || {};
		options.render = (options.render === undefined) ? 'newwin' : options.render;
		options.mimeType = (options.mimeType === undefined) ? xepOnline.Formatter.mime_type.pdf : options.mimeType;
		options.filename = (options.filename === undefined) ? 'document' : options.filename;
		options.resolution = (options.resolution === undefined) ? '120' : options.resolution;
		options.processPseudoElem = (options.processPseudoElem === undefined) ? 'true' : options.processPseudoElem;
		
		//Record the height of the target
		current_height = jQuery('#' + ElementIDs[0]).height();
		
		//Set the stylesheet to use
		current_stylesheet = options.srctype=='svg' ? xepOnline.Formatter.svg_xsl_stylesheet_declaration : xepOnline.Formatter.xsl_stylesheet_declaration;
		
		if(xepOnline.IE() || xepOnline.mobilecheck()) {
			options.render = (options.mimeType.substring(0,5) == 'image') ? options.render : 'download';
		}

		 var printcopy = '';
		jQuery(ElementIDs).each(function(index, ElementID){
		   xepOnline.Formatter.__elm = jQuery('#' + ElementID)[0];
		   if(!xepOnline.Formatter.__elm) {
		   	throw new Error('Missing or invalid selector');
		   }

		   xepOnline.Formatter.__clone = jQuery(xepOnline.Formatter.__elm)[0].outerHTML;
		   xepOnline.Formatter.__container = xepOnline.Formatter.getFOContainer(xepOnline.Formatter.__elm, options);

			jQuery('#' + ElementID).after(jQuery(xepOnline.Formatter.__container));
			jQuery(xepOnline.Formatter.__clone).appendTo(jQuery(xepOnline.Formatter.__container).children(1));		

		   xepOnline.Formatter.togglePrintMediaStyle();
		   xepOnline.Formatter.flattenStyle(jQuery(xepOnline.Formatter.__container)[0], options);
		   printcopy = printcopy + xepOnline.Formatter.cleanTags(jQuery(xepOnline.Formatter.__container)[0].outerHTML);
		   xepOnline.Formatter.Clear();
		});

		if(options.render === 'none') {
			return false;
		}
		if(options.render === 'embed') {
			xepOnline.Formatter.__container.attr('data-xeponline-embed-pending', 'true');
		}
		if(options.render === 'base64') {
			return utf8ToBase64(xepOnline.Formatter.entity_declaration + current_stylesheet + printcopy);
		}	
		if(options.render === 'downloadimages') {
			xepOnline.Formatter.__container.attr('data-xeponline-download-pending', 'true');
		}
		// fix IE double xmlns declerations in SVG
		if(xepOnline.IE()) {
			printcopy = xepOnline.Formatter.cleanSVGDeclarations(printcopy);
		}
		//Kevin hack for now, stuff the whole thing in a document div
		var nss = "";
		jQuery.each(options.namespaces || [], function(objkey, objvalue) {
                nss += objvalue + ' ';
        });
		printcopy = '<div base="' + xepOnline.Formatter.getBase() + '" class="xeponline-document" ' + nss + '>' + printcopy + '</div>';

		var blob;
		if(options.render !== 'download') {
			try 
			{
				blob = xepOnline.Formatter.getFormData(printcopy, 'xml', options.mimeType, 'document.xml', options.resolution);
			} catch(e) 
			{
				// switch render to download if blob undefined
				if(e.message === 'Blob undefined') {
					options.render = 'download';					
				} else {
					throw e;
				}
			}
		}
        // set temp mimetype for display
        current_mimetype = options.mimeType;
		if(options.render === 'download') {
			jQuery('body').append('<form style="width:0px; height:0px; overflow:hidden" enctype=\'multipart/form-data\' id=\'temp_post\' method=\'POST\' action=\'' + xepOnline.Formatter.xep_chandra_service_AS_PDF + '\'></form>');		
			jQuery('#temp_post').append('<input type=\'hidden\' name=\'mimetype\' value=\'' + options.mimeType + '\'/>');
			jQuery('#temp_post').append('<input type=\'hidden\' name=\'filename\' value=\'' + options.filename + '\'/>');
			jQuery('#temp_post').append('<input type=\'hidden\' name=\'xml\' value=\'' + xepOnline.Formatter.getFormTextData(printcopy) + '\'/>');
			jQuery('#temp_post').submit();
			jQuery('#temp_post').remove();
			jQuery(document).trigger( "xepOnlineStatus", ["Finished"]);
// DO NOT USE. We are implementing SOAP-based server support also. It is functional but this server is an Azure server not active at this time.
		} else if (options.render === 'soap') {	
		    var productServiceUrl = 'http://52.8.13.8:6577/fairy'; 
            var soapMessage =
'<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" \
    xmlns:fairy="http://52.8.13.8:6577/fairy"> \
    <SOAP-ENV:Header/> \
    <SOAP-ENV:Body> \
        <fairy:format SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"> \
            <in0>'+ xepOnline.Formatter.getBase() + '</in0> \
            <in1>' + utf8ToBase64(xepOnline.Formatter.entity_declaration + current_stylesheet + printcopy) + '</in1> \
        </fairy:format> \
    </SOAP-ENV:Body> \
</SOAP-ENV:Envelope>';
            jQuery.ajax({
            url: productServiceUrl,
            type: "POST",
            dataType: "xml",
            data: soapMessage,
            complete: xepOnline.Formatter.__soapBackSuccess,
            contentType: "text/xml; charset=\"UTF-8\""
            });
		} else {
			jQuery.ajax({
				type: "POST",
				url: current_mimetype == "image/png" || current_mimetype == "image/jpg" || current_mimetype == "image/gif" ? xepOnline.Formatter.xep_chandra_service_page_images : xepOnline.Formatter.xep_chandra_service,
				processData: false,
				contentType: false,
				data: blob,
				success: current_mimetype == "image/png" || current_mimetype == "image/jpg" || current_mimetype == "image/gif" ? xepOnline.Formatter.__processImages : xepOnline.Formatter.__postBackSuccess,
				error: xepOnline.Formatter.__postBackFailure
			});
		}
		return false; 
	},	
	
	Format: function(ElementID, options) {
	    jQuery(document).trigger( "xepOnlineStatus", ["Started"]);
		var items;
		if(jQuery.isArray(ElementID)) {
			items = ElementID;
		} else {
			items = [ ElementID ];
		}
		return xepOnline.Formatter.__format(items, options);
	},
	// deprecated - use Format 
	FormatGroup: function(ElementID, options) {
		return xepOnline.Formatter.Format(ElementID, options);
	},
	Clear: function() {
		if(jQuery(xepOnline.Formatter.__container).length===0 || 
			jQuery(xepOnline.Formatter.__container).attr('data-xeponline-embed-pending') === 'true')
			return;			

		jQuery(xepOnline.Formatter.__container).remove();
		xepOnline.Formatter.togglePrintMediaStyle();
	},
	__soapBackSuccess: function(xmlHttpRequest, status) {
		var base64PDF = jQuery(xmlHttpRequest.responseXML).find('formatReturn').text();
		var objbuilder = '';
		objbuilder += ('<object width="100%" height="100%" data="data:application/pdf;base64,');
		objbuilder += (base64PDF);
		objbuilder += ('" type="application/pdf" class="internal">');
		objbuilder += ('<embed src="data:application/pdf;base64,');
		objbuilder += (base64PDF);
		objbuilder += ('" type="application/pdf" />');
		objbuilder += ('</object>');

		if(jQuery(xepOnline.Formatter.__container).attr('data-xeponline-embed-pending') === 'true') {			
			jQuery(xepOnline.Formatter.__elm).html(objbuilder);
			jQuery(xepOnline.Formatter.__elm).css({'height': xepOnline.DEFAULTS.pageHeight });
			jQuery(xepOnline.Formatter.__container).remove();
		} else {
			// TODO: try catch window open "pop-up blocker"
			var win = window.open("","_blank","titlebar=yes");
			win.document.title = "XEPOnline PDF Result";
			win.document.write('<html><body>');
			win.document.write(objbuilder);
			win.document.write('</body></html>');
			layer = jQuery(win.document);
		}
	},
	__postBackSuccess: function(Response) {
	    jQuery(document).trigger( "xepOnlineStatus", ["Finished"]);
		var base64 = jQuery(Response).find("Result").text();
		
		if (current_mimetype == 'image/svg+xml'){
		  if(jQuery(xepOnline.Formatter.__container).attr('data-xeponline-embed-pending') === 'true'){
		        var parser = new DOMParser();
                var dom = parser.parseFromString(bufferToBinaryString(base64ToBuffer(base64)).replace('Ã¯Â»Â¿',''), "text/xml");
                jQuery(xepOnline.Formatter.__elm).html('');
                document.getElementById(jQuery(xepOnline.Formatter.__elm).attr('id')).appendChild(dom.documentElement);
		  }
		  else{
		      var win = window.open("","_blank","titlebar=yes");
			  win.document.title = "XEPOnline Result";
			  win.document.write('<html><head>');
			  jQuery.each(jQuery("link[href*='googleapis']"),function(index,value){
			      win.document.write(value.outerHTML);
			  });
			  win.document.write('</head><body height="100%"><div id="target" style="height:100%;overflow-y:auto">');
			  win.document.write('</div></body></html>');
			  var parser = new DOMParser();
              var dom = parser.parseFromString(bufferToBinaryString(base64ToBuffer(base64)).replace('Ã¯Â»Â¿',''), "text/xml");
              win.document.getElementById('target').appendChild(dom.documentElement);
              layer = jQuery(win.document);
		  }
		}
		else{
    		var objbuilder = '';
    		objbuilder += ('<object width="100%"');
    	    objbuilder += (' height="');
    	    if(jQuery(xepOnline.Formatter.__container).attr('data-xeponline-embed-pending') === 'true'){
    	       objbuilder += (current_height);
    	    }
    	    else{
    	       objbuilder += ('100%'); 
    	    }
      		objbuilder += ('" data="data:');
      		objbuilder += (current_mimetype);
      		objbuilder += (';base64,');
      		objbuilder += (base64);
      		objbuilder += ('" type="');
      		objbuilder += (current_mimetype)
      		objbuilder += ('" class="internal">');
      		objbuilder += ('<embed src="data:');
      		objbuilder += (current_mimetype);
      		objbuilder += (';base64,');
      		objbuilder += (base64);
      		objbuilder += ('" type="');
      		objbuilder += (current_mimetype);
      		objbuilder += ('" />');
      		objbuilder += ('</object>');
		    if(jQuery(xepOnline.Formatter.__container).attr('data-xeponline-embed-pending') === 'true'){
		          jQuery(xepOnline.Formatter.__elm).html(objbuilder);
		    }
		    else {
		         var win = window.open("","_blank","titlebar=yes");
			     win.document.title = "XEPOnline Result";
			     win.document.write('<html><head>');
			     win.document.write('</head><body height="100%"><div id="target" style="height:100%;overflow-y:auto">');
			     win.document.write(objbuilder);
			     win.document.write('</div></body></html>');
			     layer = jQuery(win.document);
		    }
		}
	},
	__processImages: function(Response) {
	    jQuery(document).trigger( "xepOnlineStatus", ["Finished"]);
	    var Pages = jQuery(Response).find("Pages").children();
	    
	     if(jQuery(xepOnline.Formatter.__container).attr('data-xeponline-embed-pending') === 'true'){
	         jQuery(xepOnline.Formatter.__elm).html('');
             jQuery.each(Pages,function(index,value){
			     jQuery(xepOnline.Formatter.__elm).append('<img style="border:1px solid black" height="100%" src="data:image/png;base64,' + jQuery(value).text() + '"/>');
			 });
	     }
	     else {
	            if(jQuery(xepOnline.Formatter.__container).attr('data-xeponline-download-pending') === 'true'){
	               jQuery.each(Pages,function(index,value){
			          var blob = base64toBlob(jQuery(value).text(),current_mimetype,512);
			          var fileName = options.filename === undefined ? 'Page_' + index : options.filename + '_' + index;
	                  saver(URL.createObjectURL(blob),true, fileName + '.' + current_mimetype.substr(current_mimetype.length - 3), current_mimetype);
			       });
	             }
	             else {
	                 var win = window.open("","_blank","titlebar=yes");
			         win.document.title = "XEPOnline Result";
			         win.document.write('<html><head>');
			         win.document.write('</head><body height="100%"><div id="target" style="height:100%;overflow-y:auto">');
			         jQuery.each(Pages,function(index,value){
			             win.document.write('<img style="border:1px solid black" src="data:' + current_mimetype + ';base64,' + jQuery(value).text() + '"/>');
			         });
			         win.document.write('</div></body></html>');	
	             }
	     }
	},
	__postBackFailure: function (request, status, error){
	    jQuery(document).trigger( "xepOnlineStatus", ["Finished"]);
	    var req = jQuery(request.responseText);
	    var win = window.open("","_blank","titlebar=yes, width=800, height=500");
		win.document.title = "XEPOnline Error";
		win.document.write(request.responseText);
	}

}
/*
    Setup Smarty Streets namespacing and initlize AuthID and LiveAddress array
    Should be added to clientlib includes/embeds before Spectrum Common components
*/
var Spectrum = Spectrum || {};
Spectrum.Common = Spectrum.Common || {};
Spectrum.Common.SmartyStreets = Spectrum.Common.SmartyStreets || {};
Spectrum.Common.SmartyStreets.AuthId = Spectrum.Common.SmartyStreets.AuthId || '';
Spectrum.Common.SmartyStreets.LiveAddresses = Spectrum.Common.SmartyStreets.LiveAddresses || [];

;(function($){
    "use strict";

    $.fn.hiddenField = function() {
        return this.each(function() {
            var $hiddenField = $(this);
            $hiddenField.val(Spectrum.Util.replaceClientContextVars($hiddenField.val()));
        });
    };

})(jQuery);

;(function($){
    "use strict";

    $.fn.displaySubmittedFormData = function() {
        return this.each(function() {
            var $fieldsGenerator = $(this);
            var $containerDiv = $fieldsGenerator.find('.display-submitted-form-data').end();
            var cookieData = Spectrum.HeadUtil.getCookieValue('fcp-data');
            Spectrum.HeadUtil.deleteCookie('fcp-data');
            var fields = cookieData ? cookieData.split("&") : '';
            var fieldsMap = {};
            for (var i = 0; i < fields.length && fields[i]; i++) {
                var fieldAttributes = fields[i].split(":");
                if(fieldsMap[fieldAttributes[0]])
                    fieldsMap[fieldAttributes[0]] = fieldsMap[fieldAttributes[0]] + ", " + fieldAttributes[1].split("=")[1];
                else
                    fieldsMap[fieldAttributes[0]] = fieldAttributes[1];
            }
            for (var key in fieldsMap) {
              if (fieldsMap.hasOwnProperty(key)) {
                var fieldValues = fieldsMap[key].split("=");
                var element = "<div class='"+key+"'>"+ fieldValues[0] + " : " + fieldValues[1] + "</div>";
                $containerDiv.append(element);
              }
            }
        });
    };

})(jQuery);

;(function($){
    "use strict";

    $.fn.whySpectrumCalculator = function(opts) {

        var replaceValue = "{value}";

        function calculateDifferenceAndDisplayResult($whySpectrumCalculator, userPrice, fixedPrice) {
            if(Number(userPrice) > Number(fixedPrice)) {
                var symbol = opts.currencySymbol !== '' ? opts.currencySymbol : "$";
                var difference = Number(userPrice) - Number(fixedPrice);
                var newValue = symbol + difference.toFixed(2);
                var successMessage = $whySpectrumCalculator.find('.why-spectrum-calculator-success-results-container').html();
                $whySpectrumCalculator.find('.why-spectrum-calculator-success-results-container').html(successMessage.replace(replaceValue, newValue));
                $whySpectrumCalculator.find('.why-spectrum-calculator-success-results-container').removeClass("hidden");
                replaceValue = newValue;
            }
            else {
                $whySpectrumCalculator.find('.why-spectrum-calculator-failure-results-container').removeClass("hidden");
            }
        }

        function determineResult($whySpectrumCalculator) {
            var amountText = $whySpectrumCalculator.find('.user-amount').val();
            var isAmountEnteredNumeric = $.isNumeric(amountText);
            var userEnteredPrice = isAmountEnteredNumeric ? Number(amountText) : 0;

            var numberOfCheckboxesSelected = 0;
            if($whySpectrumCalculator.find("input[name='tv']")[0].checked)
                numberOfCheckboxesSelected++;
            if($whySpectrumCalculator.find("input[name='internet']")[0].checked)
                numberOfCheckboxesSelected++;
            if($whySpectrumCalculator.find("input[name='phone']")[0].checked)
                numberOfCheckboxesSelected++;

            if(numberOfCheckboxesSelected == 0) {
                var errorMessage = opts.errorMessageSelectServiceText || "Please select at least one service.";
                $whySpectrumCalculator.find('.selection-error-message').text(errorMessage);
            }

            var fixedComparablePrice = '';
            if(numberOfCheckboxesSelected == 1)
                fixedComparablePrice = opts.singlePP || "29.99";
            if(numberOfCheckboxesSelected == 2)
                fixedComparablePrice = opts.doublePP || "59.98";
            if(numberOfCheckboxesSelected == 3)
                fixedComparablePrice = opts.triplePP || "89.97";

            if(fixedComparablePrice!=='' && isAmountEnteredNumeric && userEnteredPrice >= 1 && userEnteredPrice <= 500) {
                calculateDifferenceAndDisplayResult($whySpectrumCalculator, userEnteredPrice.toFixed(2), Number(fixedComparablePrice).toFixed(2));
            }
            else {
                var errorMessage = '';
                if(amountText == '')
                    errorMessage = opts.errorMessageEmptyText || "Please enter an amount.";
                else if(!isAmountEnteredNumeric)
                    errorMessage = opts.errorMessageInvalidText || "Please enter a valid amount.";
                else if(userEnteredPrice < 1 || userEnteredPrice > 500)
                    errorMessage = opts.errorMessageOutOfRangeText || "Please enter a number between 1 and 500.";
                $whySpectrumCalculator.find('.error-message').text(errorMessage);
            }
        }

        function hideResultsMessage($whySpectrumCalculator) {
            $whySpectrumCalculator.find('.why-spectrum-calculator-success-results-container').addClass("hidden");
            $whySpectrumCalculator.find('.why-spectrum-calculator-failure-results-container').addClass("hidden");
        }

        function clearErrorMessage($whySpectrumCalculator) {
            $whySpectrumCalculator.find('.selection-error-message').text("");
            $whySpectrumCalculator.find('.error-message').text("");
        }

        return this.each(function() {
            var $whySpectrumCalculator = $(this);

            $whySpectrumCalculator.find('.why-spectrum-calculator-btn > button').on('tap', function() {
                clearErrorMessage($whySpectrumCalculator);
                hideResultsMessage($whySpectrumCalculator);
                determineResult($whySpectrumCalculator);
            });

            $whySpectrumCalculator.find('.user-amount').on('keydown', function(e) {
                if(e.keyCode == 13 && $whySpectrumCalculator.find('.user-amount').val() !== '') {
                    clearErrorMessage($whySpectrumCalculator);
                    hideResultsMessage($whySpectrumCalculator);
                    determineResult($whySpectrumCalculator);
                }
            });
        });
    };

})(jQuery);

;(function($){
    "use strict";

    $.fn.tabbedComponent = function(opts) {
        return this.each(function() {
            var $tabbedComponent = $(this),
                $tabbedRow = $tabbedComponent.find('.tab-row'),
                $tabbedArrows = $tabbedRow.find('> ul > li'),
                $tabbedLabels = $tabbedRow.find('.tabbedLabel'),
                $tabbedContainer = $tabbedComponent.find('.tab-content-container'),
                hash = $.trim(window.location.hash),
                isSmallAccordion = $tabbedComponent.parent().hasClass('small-accordion');

            function init() {
                $tabbedLabels.find('li').each(function(){
                    var $tabbedLabel = $(this),
                        $tabbedContent = $tabbedLabel.closest('.tabbedRow').find('.tabbedContent'),
                        id = $tabbedLabel.find('a').attr('data-ref').replace(/[#&<>"']+/g,'');

                    // Add the reference id from tab label as id attribute on tab content.
                    $tabbedContent.attr('id', id);

                    // Detach tab content from tabbedRow and append it to the tab content container, but do not
                    // detach content from tabbedRow in Side Tab + Mobile View to allow accordion behavior.
                    if (isSmallAccordionSmallMediumView() === false) {
                        $tabbedContent.appendTo($tabbedContainer).show(0, fireElementVisibleEvent);
                    }
                });

                // Hide all tabbed content containers.
                $tabbedComponent.find('.tabbedContent').hide();

                var $defaultTab = $tabbedLabels.find('li.tab-default:first');

                // For linking to a specific tab via anchors, ex. example.com#TabIdValue
                if (hash != '' && $tabbedLabels.find('li' + hash).length > 0) {
                    $tabbedLabels.find('li' + hash).trigger('tap');
                } else if ($defaultTab.length > 0) {
                    $defaultTab.trigger('tap');
                }

                // Adjust tab component content between different breakpoints
                $(window).resize(resize);
            }

            function isSmallAccordionSmallMediumView() {
                return isSmallAccordion && (Spectrum.Util.isPageOnSmallView() || Spectrum.Util.isPageOnMediumView());
            }

            function clickTab() {
                var $tabLabel = $(this);

                if (isSmallAccordionSmallMediumView()) {
                    if ($tabLabel.hasClass('js-active')) {
                        $tabbedRow.find('ul li.js-active').removeClass('js-active').parents('.tabbedLabel').siblings('.tabbedContent').hide();
                    } else {
                        $tabbedRow.find('ul li').removeClass('js-active').parents('.tabbedRow').siblings().children('.tabbedContent').hide();
                        $tabLabel.closest('.tab-row ul li').addClass('js-active').parents('.tabbedRow').children('.tabbedContent').show();
                    }
                } else {
                    var tabReference = $tabLabel.closest('.tab-row ul li').find('a').attr('data-ref').replace(/[#&<>"']+/g,'');
                    $tabbedContainer.find('.tabbedContent').hide();
                    $tabbedContainer.find('#'+tabReference).show(0, fireElementVisibleEvent);
                    $tabbedRow.find('ul li').removeClass('js-active');
                    $tabLabel.closest('.tab-row ul li').addClass('js-active');
                }
                return false;
            }

            // Left carousel arrow
            function arrowLeft() {
                var $activeTab = $tabbedLabels.find('li.js-active').parent(),
                    activeIndex = $tabbedLabels.index($activeTab);
                if (activeIndex == 0) {
                    // First tab is already selected. Cycle around to last tab.
                    $tabbedLabels.last().find('li').trigger('tap');
                } else {
                    var $prevTab = $tabbedLabels.eq(activeIndex - 1);
                    $prevTab.find('li').trigger('tap');
                }
                return false;
            }

            // Right carousel arrow
            function arrowRight() {
                var $activeTab = $tabbedLabels.find('li.js-active').parent(),
                    activeIndex = $tabbedLabels.index($activeTab);
                if (activeIndex == ($tabbedLabels.length-1)) {
                    // Last tab is already selected. Cycle around to first tab.
                    $tabbedLabels.first().find('li').trigger('tap');
                } else {
                    var $nextTab = $tabbedLabels.eq(activeIndex + 1);
                    $nextTab.find('li').trigger('tap');
                }
                return false;
            }

            function resize() {
                if (isSmallAccordionSmallMediumView()) {
                    // Move tab content divs out of container and insert each immediately after corresponding label.
                    $tabbedContainer.children().each(function(index){
                        var $tabbedContent = $(this);
                        $tabbedContent.insertAfter($tabbedLabels.find('li').eq(index).parent());
                    });
                    $tabbedLabels.find('li.js-active').parent().next('div').show(0, fireElementVisibleEvent);
                    $tabbedContainer.find('.tabbedContent').hide();
                } else {
                    // Detach tab content divs and append them to the content container.
                    $tabbedLabels.find('li').each(function(){
                        var $tabbedLabel = $(this),
                            $tabbedContent = $tabbedLabel.closest('.tabbedRow').find('.tabbedContent');
                        $tabbedContent.appendTo($tabbedContainer).show(0, fireElementVisibleEvent);
                    });

                    // If accordion tabs were collapsed, no tab will be select. Select first tab.
                    if ($tabbedLabels.find('li.js-active').length === 0) {
                        $tabbedLabels.filter(':first').find('li:first').addClass('js-active');
                    }

                    var tabReference = $tabbedLabels.find('li.js-active a').attr('data-ref').replace(/[#&<>"']+/g,'');
                    $tabbedLabels.find('li.js-active').parent().next('div').hide();
                    $tabbedContainer.find('.tabbedContent').hide();
                    $tabbedContainer.find('#'+tabReference).show(0, fireElementVisibleEvent);
                }
            }

            function fireElementVisibleEvent() {
                $(this).trigger( "elementVisible");
            }

            // Setup tap listeners
            $tabbedLabels.on('tap', 'li', clickTab);
            $tabbedArrows.first().on('tap', arrowLeft);
            $tabbedArrows.last().on('tap', arrowRight);

            init();
        });
    }
})(jQuery);

;(function($){
    "use strict";

    $.fn.storeLocator = function(opts) {

        var isResiPage = (Spectrum && typeof Spectrum.Residential !== 'undefined');

        function makeTable(container, data) {
            var bounds = new google.maps.LatLngBounds();
            var panorama = googleMap.getStreetView();
            panorama.setPov(({
                heading: 265,
                pitch: 0
            }));
            panorama.setVisible(false);
            $.each(data, function(rowIndex, dataItem) {
                var row = $("<tr/>");
                var storeDetails = dataItem.spectrumStoreDetails;
                var storeName = storeDetails.name;
                var storeMiles = Math.round(dataItem.miles * 100) / 100;
                var storeAddress = storeDetails.address;
                var storeZip = storeDetails.zipcode;
                var storeLatLng = {lat: storeDetails.lat, lng: storeDetails.lng};
                var dirLink = 'https://www.google.com/maps/dir//' + storeAddress + '+' + storeZip;
                var streetImage = "https://cbk0.google.com/cbk?output=thumbnail&w=90&h=68&ll=" + + storeLatLng.lat + ',' + storeLatLng.lng;
                var storeDescr = storeDetails.description;
                var cell = $("<td class='store-info'> <div class='store-name'>" + storeName + "</div> <div class='store-distance'>" + storeMiles + " mi</div> <div class='store-address'>" + storeAddress + "," + storeZip + "</div></td>");
                row.append(cell);
                container.append(row);

                var marker = new google.maps.Marker({
                    position: storeLatLng,
                    map: googleMap,
                    title: storeName,
                    icon: opts.icon
                });

                var infoWindowContent = "<h3><span>" + storeName + "</span></h3> <div style='float: left; width: 200px; clear: none;'><p><span>" + storeAddress +
                    "</span><span>" + storeZip + "</span></p><p><strong class='notice'>Hours:</strong><br><span style='line-height: normal'>" +
                    storeDescr + "</span></p><p><a href='" + dirLink + "'>get directions</a></p></div><div style='float: left; width: 100px; clear:none; margin: 0 0 0 10px'>"+
                    "<img src='" + streetImage + "' width='100' height='74'><p style='text-align: center'><a class='street-view-switch'>street view</a></p></div>";

                var storeInfoWindow = new google.maps.InfoWindow({
                    content: infoWindowContent
                });

                //Need to use click here since we need to use a google ui event(https://developers.google.com/maps/documentation/javascript/events)
                marker.addListener("click", function(){
                    if(openInfoWindow !== null){
                        openInfoWindow.close();
                    }
                    storeInfoWindow.open(googleMap, marker);
                    panorama.setPosition(storeLatLng);
                    $('.street-view-switch').on('tap', function(){
                        panorama.setVisible(true);
                    });
                    openInfoWindow = storeInfoWindow;
                });

                cell.on('tap', function(){
                    if(openInfoWindow !== null){
                        openInfoWindow.close();
                    }
                    storeInfoWindow.open(googleMap, marker);
                    panorama.setPosition(storeLatLng);
                    $('.street-view-switch').on('tap', function(){
                        panorama.setVisible(true);
                    });
                    openInfoWindow = storeInfoWindow;
                });

                bounds.extend(storeLatLng);
            });
            googleMap.fitBounds(bounds);
            return container;
        }

        function generateDynamicTableForStores($storeLocator) {
            $storeLocator.find('.stores-table tbody tr').each(function(){
                $(this).remove();
            });

            var $tableContainer = $storeLocator.find('.stores-table');
            var mileRadius = $storeLocator.find('.miles').val() ? $storeLocator.find('.miles').val() : opts.defaultRadius;

            var searchStoresParam = {
                url : "/bin/spectrum/storeLocations",
                address : $storeLocator.find('.address').val(),
                miles : mileRadius
            };

            $.ajax({
                url: searchStoresParam.url,
                data: { "address": searchStoresParam.address,
                    "miles": searchStoresParam.miles,
                    "isResi": isResiPage },
                dataType: "json",
                async: false,
                timeout: 8000,
                success: function(data) {
                    if(!data.length){
                        $('.address-text').text('No results found');
                    } else {
                        makeTable($tableContainer, data);
                    }
                },
                error: function(){
                    $('.address-text').text('No results found');
                }
            });
        }

        function submitLocation($storeLocator){
            var address = $storeLocator.find('.address').val();
            address ? $storeLocator.find('.address-text').text(address) : $storeLocator.find('.addressText').text("United States Of America");
            generateDynamicTableForStores($storeLocator);
        }

        return this.each(function() {
            var $storeLocator = $(this);

            $storeLocator.find('.store-locator-btn > button').on('tap', function() {
                submitLocation($storeLocator);
            });

            $(window).on('keydown', function(e){
                if(e.keyCode == 13 && $storeLocator.find('.address').val() !== ''){
                    submitLocation($storeLocator);
                }
            });

            $(window).resize(function(){
                var mapCenter = googleMap.getCenter();
                google.maps.event.trigger(googleMap,"resize");
                googleMap.setCenter(mapCenter);
            });
        });

    };

})(jQuery);

;(function($) {
    "use strict";

    $.fn.searchResults = function (opts) {

        if (Spectrum.Util.isEditOrDesignMode()) return false;

        // will load all distinct GCSE IDs on the page only one time
        var apiScript = 'https://www.google.com/cse/cse.js?cx=' + opts.cseid;
        if($('script[src="' + apiScript + '"]').length === 0) {
            var gcse = document.createElement('script');
            gcse.type = 'text/javascript';
            gcse.async = true;
            gcse.src = apiScript;
            document.body.appendChild(gcse);
        }
    }
})(jQuery);
;(function($){
    "use strict";

    $.fn.searchForm = function(opts) {
        if (Spectrum.Util.isEditOrDesignMode()) return false;

        var options = $.extend({
            forwardUrl: '/searchresults.html'
        }, opts);
        return this.each(function() {
            var $searchForm = $(this),
                $searchText = $searchForm.find('input'),
                $searchToggle = $searchForm.find('button, img');

            function doSearch() {
                var query = escape(escape($searchText.val().replace(' ', '+')));
                window.open(options.forwardUrl + '?' + options.queryParameter + '=' + query, options.openLink);
            }

            function toggle() {
                if ($searchText.is(':visible')) {
                    doSearch();
                } else {
                    $searchText.animate({width: 'toggle'}, 1000);
                }
            }

            $searchToggle.on('tap', toggle);
            $searchText.on('keypress', function(e){
                var code = (e.keyCode ? e.keyCode : e.which);
                if (code == 13) {
                    doSearch();
                }
            });
        });
    }
})(jQuery);

var Spectrum = Spectrum || {};

/**
 * Manages functionality for tooltip display. Tooltips require html attribute data-tooltip on the target tooltip instantiation element.
 * Required data-tooltip JSON is {"heading", "body"}
 */

Spectrum.Tooltip = (function() {

    /**
     * marker to indicate link was initalized
     */
    var initializedClass = 'js-tooltip-initialized';

    var tooltipWrapperClass = 'tooltip-popup';

    var previousTarget;

    // using pseudo elements for arrow, so we must override with style tag
    var $arrowStyle = $('<style type="text/css" title="js-tooltips"></style>');

    // we must override CSS, so ensure selectors match CSS declaration
    var arrowCSSSelectors = '.tooltip-popup.top .tooltip-content:before, .tooltip-popup.top .tooltip-wrap:before, .tooltip-popup.top .tooltip-wrap:after, ' +
        '.tooltip-popup.bottom .tooltip-content:before, .tooltip-popup.bottom .tooltip-wrap:before, .tooltip-popup.bottom .tooltip-wrap:after';

    function cancelTooltipClose(id) { window.clearTimeout(id); }
    function closeAll() { $('.' + tooltipWrapperClass).hide(); }

    function error(o) { console && console.error && console.error(o); }

    function safeParseJson(s) {
        try {
            return ('undefined' !== typeof (s)) ? $.parseJSON(s) : {};
        } catch (e) {
            return {};
        }
    }

    return {
        /** initializes a group of elements Prevents double initalization.
         * @param $objects {Object} jQuery object to iterate over, instantiating on each()
         */
        init: function($objects) {
            try {
                if (typeof $objects === 'undefined' || !($objects instanceof jQuery)) {
                    return;
                }

                var $window = $(window);

                $('head').append($arrowStyle); // JQuery should only be adding this once, but it's ok to call on init()

                $objects.each(function() {
                    var $me = $(this);
                    if ($me.hasClass(initializedClass)) { return true; } // continue to next

                    var markup = getMarkup();
                    if (!markup) { return true; } // continue

                    var tooltipOpen = false;
                    var tooltipTappedOpen = false;
                    var $tooltip = $(markup);
                    var _oldhide = $.fn.hide;
                    $.fn.hide = function(speed, callback) { // listen to hide event from closeAll() so we can later reset tooltipOpen to false
                        $tooltip.trigger('hide');
                        return _oldhide.apply(this,arguments);
                    };

                    var timeoutId; // used to keep tooltip open for a little bit
                    var appendedToDom = false;

                    function getMarkup() {
                        var data = safeParseJson($me.attr('data-tooltip'));
                        if (!data.body) { return undefined; } // continue to next
                        var head = data.heading ? '<header>' + unescape(data.heading) + '</header>' : '';
                        var body = unescape(data.body) || '';

                        return '<div class="' + tooltipWrapperClass + ' top">' +
                                 '<div class="tooltip-content">' +
                                   '<div class="tooltip-wrap">' + head + body + '</div>' +
                                 '</div>' +
                               '</div>';
                    }

                    function delayFadeOut(immediate) {
                        var delay = (typeof immediate ==='boolean' && immediate ? 0 : 500);
                        timeoutId = window.setTimeout(function() {
                            tooltipOpen = false;
                            $tooltip.stop(true, true).fadeOut(1200, closeTooltip);
                            previousTarget = null
                        }, delay);
                    }

                    function closeTooltip() {
                        $tooltip.hide();
                    }

                    function showTooltip() {
                        // TODO: break this up into smaller, manageable pieces
                        $tooltip.stop(true, true);
                        closeAll(); // hide any other open tooltips
                        $tooltip.css('opacity', 1);

                        var screen = {
                            height: $window.height(),
                            width: $window.width(),
                            scrollTop: $(window).scrollTop(),
                            yBottom: $window.height + $('html').scrollTop()
                        };
                        var link = { // the link that triggers the tooltip
                            h: $me.outerHeight(true),
                            w: $me.outerWidth(true),
                            top: $me.offset().top,
                            left: $me.offset().left
                        };

                        var screenBottom = $window.height() + $window.scrollTop();
                        var tooltipBottom = (link.top + link.h) + $tooltip.outerHeight(true);
                        var tooltip = {
                            h: $tooltip.outerHeight(true),
                            w: $tooltip.outerWidth(true),
                            top: (tooltipBottom >= screenBottom) ? link.top - $tooltip.outerHeight(true) : link.top + link.h
                        };
                        // determine top position.  place above the source if tooltip would be off page.

                        $tooltip.removeClass('top bottom').addClass((tooltipBottom >= screenBottom) ? 'bottom' : 'top');
                        $arrowStyle.empty();

                        //Initial body position is determined by if the tooltip link extends to the next line
                        //If it does, the tooltip points to the farthest left of the link on the next line
                        //Otherwise, it points to the center of the link
                        var leftBodyPos = (link.h > 20) ? (link.left - (tooltip.w / 2)) : (link.left - (tooltip.w / 2 - link.w / 2));

                        // adjust the tooltip body, and arrow position if the body is off-screen (mobile devices)
                        if (tooltip.w > screen.width || leftBodyPos < 0) {
                            //If it's mobile/two-lines just have the arrow point 1/8 the way from the tooltip body (since we can't reasonably infer the length of the cut-off portion of text)
                            if(link.h > 20) {
                                $arrowStyle.html(arrowCSSSelectors + ' {left: ' + (tooltip.w / 8) + 'px;}');
                            }
                            //Move the body to be fully on-screen (left: 0)
                            $tooltip.css({
                                'position': 'absolute',
                                'top': tooltip.top,
                                'left': 0 + 'px'
                            });
                        }
                        //If the right corner of the tooltip extends off the right of the screen
                        else if ((leftBodyPos + tooltip.w) > screen.width) {
                            //If the screen is cut off to the right, bring the window in, and adjust the arrow to point 6/8 of the way to the right
                            $arrowStyle.html(arrowCSSSelectors + ' {left: ' + (tooltip.w / 8) * 6 + 'px;}');
                            $tooltip.css({
                                'position': 'absolute',
                                'top': tooltip.top,
                                'left': (screen.width - tooltip.w) + 'px'
                            });
                        }
                        //default, centered behavior
                        else {
                            $tooltip.css({
                                'position': 'absolute',
                                'top': tooltip.top,
                                'left': leftBodyPos + 'px'
                            });
                        }

                        $tooltip.fadeIn(200, function() { $(this).hover(); });
                        tooltipOpen = true;
                    }

                    function eventHandler(event) {
                        event.preventDefault();
                        event.stopImmediatePropagation();
                        var currentTarget = event.target;
                        if(!$(currentTarget).is($me)){
                            $me = $(currentTarget);
                            closeTooltip();
                        }
                        if (currentTarget == previousTarget && event.type == "mouseover") {
                            return
                        }
                        previousTarget = currentTarget;
                        var $tappedElement = $('body, .cta a, .compEritTable .viewDetail, .packageFooter div[class="buttonWrapper"], .packages-tab, .cta, .accordion-link a, .byoHeader, .select-package-wrapper .stickyWrapper .collapse-button');
                        //console && console.log('Tooltip.eventHandler('+event.type+') at '+event.timeStamp);
                        if (!appendedToDom) {
                            // ie8 requires show() on dom insert and setTimeout. Otherwise, tooltip arrows don't show until DIV is moused over
                            // opacity:0 prevents flash on screen before it's positioned where it should be.
                            $('body').append($tooltip.css('opacity', 0).show());
                            appendedToDom = true;
                        }
                        cancelTooltipClose(timeoutId);

                        if (!tooltipOpen) {
                            showTooltip();
                            // if this is a tap, we need to setup an temporary tap on the body to hide tooltip
                            if (event.type === 'tap') {
                                tooltipTappedOpen = true;
                                $tappedElement.one('tap.tooltip', function() {
                                    delayFadeOut(true);
                                });
                            } else {
                                $me.one('mouseout', delayFadeOut);
                            }
                        } else if (tooltipOpen && !tooltipTappedOpen && event.type === 'tap') {
                            // mouse over displayed tooltip and was immediately followed by a tap event. Register this as a tap event
                            // this occurs with Windows tablets. Remove the mouseover listener and listen to tap instead.
                            tooltipTappedOpen = true;
                            $tappedElement.one('tap.tooltip', function() {
                                delayFadeOut(true);
                            });
                            $me.off('mouseout');
                        } else if (event.type === 'tap' && tooltipTappedOpen) {
                            $tappedElement.off('tap.tooltip');
                            delayFadeOut(true);
                        }
                    }

                    $me.addClass(initializedClass)
                        .on('tap mouseover', eventHandler);

                    $tooltip.on('hide', function() { // closeAll triggers a hide event, so we reset tootipOpen to false for all
                        tooltipTappedOpen = false;
                        tooltipOpen = false;
                    });
                });
            } catch (e) {
                console && console.group && console.group(e.name + ': ' + e.message);
                error(e);
                error(e.stack);
                console && console.group && console.groupEnd();
            }
        }
    };
}());

var Spectrum = Spectrum || {};
/**
 * Contains the functionality for populating the global tooltip list and
 * moving the initialialized tooltips
 */

Spectrum.GlobalTooltip = (function(){
    return {
        initializeGlobalTooltips : function(opts) {
            var $tooltipList = $('#'+opts.listid);
            $.ajax({
                type: 'GET',
                url: opts.path + '/jcr:content.json',
                async: false,
                dataType: 'json',
                success: function(data){
                    $.each(data, function(){
                        var tooltipData = '{"heading":"' + this.heading + '", "body":"' + this.body + '"}';
                        var globalId = this.id;
                        $tooltipList.append('<li id="' + globalId + '">' + '<a class="tooltip" href="#"></a></li>');
                        var tooltip = $tooltipList.find('#' + globalId + ' a');
                        tooltip.attr('data-tooltip', tooltipData);
                        if(opts.edit){
                            tooltip.text(globalId);
                        }
                        Spectrum.Tooltip.init(tooltip);
                    });
                }
            });
        },

        processGlobalTooltips: function(){
            if(!$('.global-tooltip-list').length){return false;}
            $('.global-tooltip-list').children('li').each(function(){
                var tooltip = $(this),
                    tooltipTags = $('*[data-globaltooltip=' + this.id + ']');
                if(tooltipTags.length > 0){
                    tooltipTags.each(function(){
                        var $tempTag = $(this),
                            tooltipAnchor = tooltip.children('a').clone(true);
                        $tempTag.replaceWith(tooltipAnchor.text($tempTag.text()));
                    });
                }
            });
        }
    };
}());

;(function ($) {
    "use strict";

    $.fn.phoneComponent = function(opts) {

        function formatPhoneNumber(strPhone) {
            var strPhonePrepped = (""+strPhone).replace(/\D/g, '');
            var phoneDigits = strPhonePrepped.match(/^(\d{3})(\d{3})(\d{4})$/);
            return (!phoneDigits) ? strPhone : "(" + phoneDigits[1] + ") " + phoneDigits[2] + "-" + phoneDigits[3];
        }

        return this.each(function() {
            var $phoneComponent = $(this);
            var vendorName = Spectrum.Util.getUserProfile().data.serviceVendorName;
            var phoneMso = vendorName.includes("charter") ? "CHTR" : vendorName === "twc" ? "TWC" : vendorName === "bhn" ? "BHN" : "none";
            var phNumber = Spectrum.Util.getSalesProfile().data.p1 && opts.onhours ? Spectrum.Util.getSalesProfile().data.p1 : opts.onhours ? opts["phone"+phoneMso] : opts["altphone"+phoneMso];

            $phoneComponent.attr('href', 'tel:1'+phNumber);
            $phoneComponent.attr('data-linkname') == null && ($phoneComponent.attr('data-linkname', phNumber));
            $phoneComponent.text(formatPhoneNumber(phNumber));
            vendorName !== "none" ? $phoneComponent.removeClass('hidden') : $phoneComponent.addClass('hidden');
        });
    };
})(jQuery);

;(function($){
    "use strict";

    $.fn.offersContainers = function() {
        return this.each(function() {
            var heightArr = [];
            var detailsMinHeight = 0;
            var $offersContainer = $(this);
            var $uuid = $offersContainer.data("id");
            var $detailsDisabled = $offersContainer.data("details-disabled");
            var $editMode = $offersContainer.data("edit-mode");
            var $offerContainer = $('.offer-row-details > .at-table-details-expanded > div').show();
            var $detailsColumns = $offersContainer.siblings('.hidden-xs').find('.offer-row-details .at-table .offer-column.vertical > div');
            $('.accordion-table-row[data-id="${$uuid}"]').accordionTableRow({$detailsDisabled:$detailsDisabled});
            if (!$editMode) {
                $offerContainer.children().hide();
            }
            function setHeight() {
                for (var i=0; i < $detailsColumns.length; i++) {
                    heightArr.push($detailsColumns[i].clientHeight);
                }
                detailsMinHeight = Math.max.apply(null, heightArr);
                for (var j=0; j < $detailsColumns.length; j++) {
                    $($detailsColumns[j]).css('min-height', (detailsMinHeight + 'px'));
                }
            }
            function runSetHeight() {
                setTimeout(function() {
                    $($detailsColumns).css('display', 'block');
                    setHeight();
                    $($detailsColumns).css('display', 'none');
                },50);
            }
            runSetHeight();
        });
    };
})(jQuery);

;(function($) {
    "use strict";

    $.fn.offersColumns = function() {
        return this.each(function() {
            $(this).on('tap', function(e) {
                e.preventDefault();
                var offerId = $(this).closest('[data-offer-id]').data('offerId');
                var id = $(this).closest('[data-id]').data('id');
                var offerDetailsMain = $(this).parents('.accordionTableRow.offersContainer').find('.offer-row-details');
                var details = $(this).parents('.accordionTableRow.offersContainer').find('.offer-row-details > .at-table-details-expanded > .offer-column > div');
                var offerDetails = $(details).parent().parent().find('[data-offer-id=' + offerId + ']').children();
                var offerLabel = $(details).parent().parent().find('[data-id=' + id + ']').children();
                var parentColumn = $(this).closest('.offer-column').parent();
                var mobileColumn = $('.offersContainer .hidden-lg .offer-row-details .at-table .offer-column.vertical');
                mobileColumn.hasClass('toggle-drop-shadow') ? parentColumn.toggleClass('toggle-drop-shadow') : '';
                var lnk = $('.offers-expand-link[data-id=' + id + ']');
                if (offerDetails.css('display') == 'none') {
                    lnk.text(lnk.attr('data-collapse-link-text'));
                    offerDetails.show();
                } else {
                    lnk.text(lnk.attr('data-expand-link-text'));
                    offerDetails.hide();
                }
            });
        })
    };
})(jQuery);

;(function($){
    "use strict";

    $.fn.iframeModal = function(opts) {
        var options = $.extend({
            src: '',
            name: ''
        }, opts);

        return this.each(function() {
            var $modalContent = $(this).find('.modal-content');
            $modalContent.css('overflow', 'hidden');
            $(this).on("show.bs.modal showModal", function() {
                $(this).find('.iframe').html("<iframe src=\""+ options['src'] +"\" name=\"" + options['name'] + "\" height=\"" + (options['height'] ? options['height'] : "100%") + "\" width=\"100%\"></iframe>");
            });
            $(this).on("hidden.bs.modal closeModal", function() {
                $(this).find('.iframe iframe').remove();
            });
        });
    };

})(jQuery);

;(function($){
    "use strict";

    $.fn.modalComponent = function() {
        return this.each(function() {
            var $modalComponent = $(this).closest('.modal');
            $modalComponent.on("shown.bs.modal shownModal", function() {
                $(window).trigger('resize.smarty');
            });
        });
    };

})(jQuery);

;(function($){
    "use strict";
    $.fn.messageBox = function(opts) {
        return this.each(function() {
            var $messageBox = $(this);

            $messageBox.on('updateMessageBox', function(evt, $messageContent, slideSpeed) {
                $messageBox.find('div[data-messagebox-name].link-messagebox').hide();
                $messageContent.css("display", "");
                slideSpeed = slideSpeed || '';
                $messageBox.slideDown(slideSpeed, function () {
                    if(!Spectrum.Util.isPageOnIOSDevice()){
                        var $firstVisibleElement = $messageContent.find("input[type=text],input[type=tel]:visible").first();
                        $firstVisibleElement.each(function () {
                            $(this).focus();
                            var cursorPosition = $(this).val().length;
                            $(this).get(0).setSelectionRange(cursorPosition, cursorPosition);
                        });
                    }
                });

                return false;
            });

            $messageBox.find('.close-message').on('tap', function() {
                $("a[data-messagebox-name='"+ $messageBox.data("messageboxName") +"']").removeClass('js-active');
                $messageBox.slideUp();
                document.activeElement.blur();
            });

            $messageBox.attr('data-initialized', 'true');
            $messageBox.trigger('messageBoxInit');
        });
    };
})(jQuery);

;(function($){
    "use strict";

    $.fn.linkComponent = function(opts) {
        return this.each(function() {
            var $linkComponent = $(this);
            var $linkLabel = $linkComponent.find('.linkLabel');

            // substitute variables
            if ($linkLabel.hasClass('js-substitutable')) {
                Spectrum.Util.replaceClientContextVarsInElement($linkLabel);
                $linkLabel.removeClass('js-substitutable').show();
            }

            // If link is Message Box link.
            if ($linkComponent.find('[data-messagebox-name]').length) {
                var $link = $(this).find("a");
                var msgboxName = $link.data("messageboxName");
                var $messageContent = $linkComponent.find(".link-messagebox");
                //MessageBox Component Wrapper
                var $messageBox = $("div[data-messagebox-name='" + msgboxName + "'].messagebox-wrapper");

                /*
                 If we have multiple links that open the same messagebox, this removes each instance of the initialization script
                 from the DOM so it isn't run multiple times. The first run will initialize all links with the same message id.
                 */
                $messageContent.hide();
                $messageContent.appendTo($messageBox.find('.message-content')); //Moves it into the appropriate message box

                $link.on('tap', function () {
                    if ($(this).hasClass('js-active')) {
                        $messageBox.slideUp();
                        $(this).removeClass('js-active');
                    }
                    else {
                        $("a[data-messagebox-name='" + msgboxName + "']").removeClass('js-active');
                        $(this).addClass('js-active');
                        $messageBox.trigger("updateMessageBox", [$messageContent]);
                    }

                    // Analytics equivalent to modalTracking(analyticsName, msgboxPath);
                    return false;
                });
            }

            //parsing and adding query parameters for Modal to Client Context
            $(this).on('tap', function() {
                var queryParamData = $("a[data-modal-query-params]").data('modal-query-params');
                if (queryParamData) {
                    var queryParams = queryParamData.split("&");
                    var parsedQueryParams = {};
                    queryParams.forEach(function (parameter) {
                        var values = parameter.split("=");
                        parsedQueryParams[values[0]] = values[1];
                    });
                    Spectrum.Util.getSalesProfile().setProperties(parsedQueryParams);
                }
            })
        });
    };
})(jQuery);

;(function($){
    "use strict";

    $.fn.injectionContainer = function() {
        return this.each(function() {
            Spectrum.Util.replaceClientContextVarsInElement($(this));
            $(this).removeClass('hiddenHtml hidden');
        });
    };
})(jQuery);

;(function($){
    "use strict";

    $.fn.easyMovingCalculator = function(opts) {

        var replaceValue = "{value}";

        function calculateDifferenceAndDisplayResult($easyMovingCalculator, userPrice, fixedPrice) {
            if(Number(userPrice) > Number(fixedPrice)) {
                var difference = Number(userPrice) - Number(fixedPrice);
                var newValue = "$" + difference.format(2);
                var successMessage = $easyMovingCalculator.find('.easy-moving-calculator-success-results-container').html();
                $easyMovingCalculator.find('.easy-moving-calculator-success-results-container').html(successMessage.replace(replaceValue, newValue));
                $easyMovingCalculator.find('.easy-moving-calculator-success-results-container').removeClass("hidden");
                replaceValue = newValue;
            }
            else {
                $easyMovingCalculator.find('.easy-moving-calculator-failure-results-container').removeClass("hidden");
            }
        }

        function determineResult($easyMovingCalculator) {
            var amountText = $easyMovingCalculator.find('.user-amount').val();
            var userEnteredPrice = amountText !== '' ? amountText : '';
            if(userEnteredPrice.includes("$"))
                userEnteredPrice = userEnteredPrice.substring(1, amountText.length);
            var fixedComparablePrice = opts.comparablePrice !== '' ? opts.comparablePrice : "29.99";
            if($.isNumeric(userEnteredPrice) && Number(userEnteredPrice) > 5) {
                calculateDifferenceAndDisplayResult($easyMovingCalculator, Number(userEnteredPrice).toFixed(2), Number(fixedComparablePrice).toFixed(2));
            }
            else {
                var errorMessage = opts.errorMessageText !== '' ? opts.errorMessageText : "Enter Valid Amount";
                $easyMovingCalculator.find('.error-message').text(errorMessage);
            }
        }

        function hideResultsMessage($easyMovingCalculator) {
            $easyMovingCalculator.find('.easy-moving-calculator-success-results-container').addClass("hidden");
            $easyMovingCalculator.find('.easy-moving-calculator-failure-results-container').addClass("hidden");
        }

        function clearErrorMessage($easyMovingCalculator) {
            $easyMovingCalculator.find('.error-message').text("");
        }

        Number.prototype.format = function(n, x) {
            var re = '(\\d)(?=(\\d{' + (x || 3) + '})+' + (n > 0 ? '\\.' : '$') + ')';
            return this.toFixed(Math.max(0, ~~n)).replace(new RegExp(re, 'g'), '$1,');
        };

        return this.each(function() {
            var $easyMovingCalculator = $(this);

            $easyMovingCalculator.find('.easy-moving-calculator-btn > button').on('tap', function() {
                hideResultsMessage($easyMovingCalculator);
                clearErrorMessage($easyMovingCalculator);
                determineResult($easyMovingCalculator);
            });

            $easyMovingCalculator.find('.user-amount').on('keydown', function(e) {
                if(e.keyCode == 13 && $easyMovingCalculator.find('.user-amount').val() !== '') {
                    hideResultsMessage($easyMovingCalculator);
                    clearErrorMessage($easyMovingCalculator);
                    determineResult($easyMovingCalculator);
                }
            });

            $easyMovingCalculator.find('.user-amount').focusout(function() {
                var enteredValue = $easyMovingCalculator.find('.user-amount').val();
                if(!enteredValue.includes("$") && enteredValue !== '')
                    $easyMovingCalculator.find('.user-amount').val("$" + enteredValue);
            });
        });
    };

})(jQuery);

;(function($){
    "use strict";

    $.fn.selectDropDown = function(dropdownGroup) {
        function select(dropdown) {
            var prevSelected = dropdown.find("option:selected").val();
            dropdown.change(function() {
                var selected = dropdown.find("option:selected").val();
                $("."+ dropdownGroup + "_" + prevSelected).addClass("hide");
                $("."+ dropdownGroup + "_" + selected).removeClass("hide");
            });
        }

        return this.each(function() {
            var dropdown = $(this).find('.dynamic-drop-down-select');
            dropdown.on("tap", function() {select(dropdown);});
        });
    };

}(jQuery));

;(function ($) {
    "use strict";

    $.fn.carouselComponent = function(opts) {
        return this.each(function() {
            var $carouselComponent = $(this),
                startingSlide = 0,
                $slider = $("#"+opts.uuid),
                $iconSlider = $("#carousel-icons-tabs-"+opts.uuid),
                bxSliderDiv = $slider.bxSlider({
                    pager: opts.pager,
                    controls: opts.displayCarouselArrows,
                    hideControlOnEnd: opts.hideControlOnEnd,
                    infiniteLoop: opts.infiniteLoop,
                    auto: opts.auto,
                    pause: opts.pauseTime,
                    video: true,
                    autoControls: opts.enablePlayButton,
                    onSlideBefore : function($slideElement,oldIndex,newIndex) {
                        var $iconSlider = $slideElement.parents(".bx-wrapper").siblings(".carousel-icons").find(".slider");
                        $iconSlider.find(".slide:not(.bx-clone)[data-slide-number="+oldIndex+"]").removeClass("active-icon");
                        $iconSlider.find(".slide:not(.bx-clone)[data-slide-number="+newIndex+"]").addClass("active-icon");
                    }
                });

            var pauseClicked = false;

            //Custom listeners to handle case of hover pause deactivating manual pause button click
            $carouselComponent.find('.bx-controls-auto .bx-start').click(function() {
                pauseClicked = false;
            });
            $carouselComponent.find('.bx-controls-auto .bx-stop').click(function() {
                pauseClicked = true;
            });

            if(opts.pauseOnHover){
                $slider.parent().hover(function(){
                    bxSliderDiv.stopAuto();
                    }, function(){
                    //To prevent automatic overriding of user clicking pause button
                    if(!pauseClicked && opts.auto)
                        bxSliderDiv.startAuto();
                });
            }

            /*
            Listens for element visible events firing on show events. If the slider
            isn't redrawn after a show event then the carousel will be a given a
            height of zero.
            */
            $slider.parents(".tabbedContent").on("elementVisible", function() {
                bxSliderDiv.redrawSlider();
            });




            if($iconSlider.length){
                var iconSliderParent = $iconSlider.parent(),
                //Handle potential undefined values
                enableArrows = (iconSliderParent.data("enable-arrows") == true ? true : false),
                slideWidth = iconSliderParent.data("icon-width"),
                maxIconCount = iconSliderParent.data("max-icon-count"),
                minIconCount = iconSliderParent.data("min-icon-count"),
                margin = iconSliderParent.data("tab-margin"),
                isVerticalPosition = iconSliderParent.data("is-vertical-position"),
                bxSliderIconDiv = $iconSlider.bxSlider({
                    pager: false,
                    controls: enableArrows,
                    infiniteLoop: !isVerticalPosition,
                    hideControlOnEnd: false,
                    auto: false,
                    slideWidth: slideWidth,
                    moveSlides: enableArrows,
                    minSlides: minIconCount,
                    maxSlides: maxIconCount,
                    shrinkItems: true,
                    video: true,
                    slideMargin: margin,
                    mode: (isVerticalPosition ? 'vertical' : 'horizontal')
                });

                //Set the active icon status to the first icon
                $slider.parents(".bx-wrapper").siblings(".carousel-icons").find(".slider .slide[data-slide-number="+startingSlide+"]").addClass("active-icon");

            	var $carouselComponent = $(this);

                //Maintain our own counter of slider position
                $carouselComponent.find("a.carousel-icon-link").on("tap", function() {
                    var selectedIconNumber = $(this).attr('data-icon-number');
                    var sliderCurrentPosition = $slider.getCurrentSlide();
                    if(selectedIconNumber != sliderCurrentPosition){
                        $slider.goToSlide(selectedIconNumber);
                    }
                });
            }
        });
    };
})(jQuery);

;//noinspection JSUnresolvedVariable
(function($) {
    'use strict';

    $.fn.cableMoversWidget = function () {
        //noinspection JSUnresolvedFunction
        var $widgetContainer = $(this).find(".cableMovers")[0];

        //noinspection JSUnresolvedVariable
        if(typeof ctam_widget_initialization === 'function') {
            console.log("CableMovers widget is available.");
            try {
                if(Spectrum.Common.Components.MuiServiceability) {
                    var outOfFootPrintObject = Spectrum.Common.Components.MuiServiceability.Util.getFromStorage(
                        Spectrum.Common.Components.MuiServiceability.Enums.storageKeys.OUT_OF_FOOTPRINT
                    );
                    if(outOfFootPrintObject) {
                        var address = outOfFootPrintObject.address;
                        var apartment = outOfFootPrintObject.apartment;
                        var zip = outOfFootPrintObject.zip;
                        ctam_widget_initialization($widgetContainer, 1011, false, true, address, apartment, zip);
                    } else {
                        console.error("Cannot access Out Of Footprint from LocalStorage.");
                    }
                }

            } catch(e) {
                console.error("Could not initialize CableMovers Widget", e);
            }
        }
    };
})(jQuery);

;(function($){
    "use strict";

    $.fn.accordionTableRow = function(opts) {
        return this.each(function() {
            var $row = $(this);

            if(!opts.detailsDisabled){
                $row.find('.row-header .expand-details').on('tap', function(event){
                    $row.toggleClass('js-active');
                    $row.find('.row-details').toggle();
                    $row.trigger('toggleDetails');
                    return false;
                });
            }
        });
    };
})(jQuery);

;(function($){
    "use strict";

    $.fn.accordionTableExpander = function(opts) {
        return this.each(function() {
            var $expander  = $(this),
                $label = $expander.find('.linkLabel'),
                $row = $expander.closest('.accordion-table-row');

            writeLabel();

            $row.on('toggleDetails', writeLabel);

            function writeLabel () {
                var labelText = $row.hasClass('js-active') ? opts.collapseText : opts.expansionText;
                $label.html( labelText );
            }
        });
    };
})(jQuery);

;(function($){
    'use strict';

    $.fn.accordionComponent = function() {
        var $accordion = $(this),
            $links = $accordion.find('.accordion-link'),
            hash = $.trim(window.location.hash).substring(1);
            if($accordion.find('.accordion-content').hasClass('js-active') ? $accordion.find('.offscreen').text('expanded') : $accordion.find('.offscreen').text('collapsed'));
        function toggleContent(){
            $accordion.find('.accordion-content').toggleClass('js-active');
            $accordion.find('.accordion-header').toggleClass('js-active');
            if($accordion.find('.accordion-header').hasClass('js-active') ? $accordion.find('.offscreen').text('collapsed') : $accordion.find('.offscreen').text('expanded'));
            return false;
        }

        $links.on('tap', toggleContent);

        if($accordion.hasClass('cursor-pointer')){
            $accordion.on('tap', function(e) {
                if($(e.target).closest('accordion-link').find('a').length === 0) {
                    toggleContent();
                    return false;
                }
            });
        }

        // For opening an accordion by default via a hash parameter, ex. example.com#AnalyticsLinkName
        $links.filter("[data-linkname='" + hash + "']").trigger('tap');
    }
})(jQuery);

// Replace 'no-js' class from <html> tag with `js` when browser js is enabled
var htmlTag = document.documentElement;
htmlTag.className = htmlTag.className != '' ? htmlTag.className.replace('no-js','js').trim() : 'js';

// Breakpoints
var smallBreakPoint = 768;
var mediumBreakPoint = 992;
var largeBreakPoint = 1200;

var Spectrum = Spectrum || {};
Spectrum.Util = Spectrum.Util || (function() {
    return {
        /* WCM Mode */
        isEditMode : function() {
            var classicUI = (typeof CQ != 'undefined') && CQ.WCM && CQ.WCM.isEditMode(),
                touchUI = (typeof Granite != 'undefined') && Granite.author && document.cookie && document.cookie.indexOf('wcmmode=edit') > -1;
            return classicUI || touchUI;
        },
        isDesignMode : function() {
            var classicUI = (typeof CQ != 'undefined') && CQ.WCM && CQ.WCM.isDesignMode(),
                touchUI = (typeof Granite != 'undefined') && Granite.author && document.cookie && document.cookie.indexOf('wcmmode=design') > -1;
            return classicUI || touchUI;
        },
        isEditOrDesignMode : function() {
            return this.isEditMode() || this.isDesignMode();
        },

        /* Breakpoints: Based on Booktstrap breakpoints */
        getCurrentBreakpoint : function() {
            var width = window.innerWidth;
            if (width < smallBreakPoint)
                return "small";

            if (width >= smallBreakPoint && width < mediumBreakPoint)
                return "medium";

            if (width >= mediumBreakPoint && width < largeBreakPoint)
                return "large"; // Medium Desktop

            return 'extra large'; // Large Desktop
        },
        isPageOnSmallView : function() {
           return window.innerWidth < smallBreakPoint;
        },
        isPageOnMediumView : function() {
           return window.innerWidth >= smallBreakPoint && window.innerWidth < mediumBreakPoint;
        },
        isPageOnLargeView : function() {
           return window.innerWidth >= mediumBreakPoint;
        },

        /* Device tests */
        isPageOnIOSDevice : function() {
            return !!navigator.userAgent.match(/iPhone|iPad|iPod/i);
        },
        isPageOnTouchDevice : function() {
            return !!('ontouchstart' in window || navigator.msMaxTouchPoints);
        },

        /* Profiles */
        getUserProfile : function() {
            if (Spectrum && Spectrum.Business && Spectrum.Business.Profile) return Spectrum.Business.Profile;
            if (Spectrum && Spectrum.Residential && Spectrum.Residential.Profile) return Spectrum.Residential.Profile;
            return null;
        },
        getSalesProfile : function() {
            if (Spectrum && Spectrum.Business && Spectrum.Business.SalesProfile) return Spectrum.Business.SalesProfile;
            if (Spectrum && Spectrum.Residential && Spectrum.Residential.SalesProfile) return Spectrum.Residential.SalesProfile;
            return null;
        },

        initializeCQAnalytics : function() {
            if (CQ_Analytics.ClientContext.get(this.getSalesProfile().getName()).initialize) {
                CQ_Analytics.ClientContext.get(this.getSalesProfile().getName()).initialize();
            }
            if (CQ_Analytics.ClientContext.get(this.getUserProfile().getName()).initializeValues) {
                CQ_Analytics.ClientContext.get(this.getUserProfile().getName()).initializeValues();
            }
        },

        /* Client Context helpers */

        /**
         * Replaces variable references in strings.
         *
         * @param {String} String possibly containing variables to be substituted
         * @param {boolean} true/false value signifying whether we want to encode the uri or not
         * @returns String with values substituted for variable references.
         *
         * If the variable starts with "digitalData." it is assumed to be a (possibly nested) reference to digitalData
         * values.  Otherwise, the variable is looked up in the ClientContext.
         *
         * Substitution variables are of the pattern ${digitalData.[property]} or ${/[datastore]/[property]},
         * i.e. ${digitalData.page.pageInfo or ${/profile/city}.
         *
         * To provide default value authors need to do something like this ${/profile/region:oof}
         * reference doc: http://mystropedia.corp.mystrotv.com/display/WEBCMS/URL+Variable+Substitution
         *
         * Any unresolved substitution variables are replaced with the defaultValue which is the empty String by default.
         */
        replaceClientContextVars : function(string, shouldEncodeURI) {
            return string.replace(/\${([^}]*}*)}/gm, function(match, variableStr) {
                if (!variableStr) return;

                var variableStrParts = variableStr.split(/:(.+)?/);
                var replacementValue = '';
                if(variableStrParts.length > 1 && variableStrParts[1]) {
                    replacementValue = variableStrParts[1];
                }

                function computeResult(value, defaultValue) {
                    value = Spectrum.Util.defaultIfUnavailable(value, defaultValue);
                    return shouldEncodeURI ? encodeURI(value) : value;
                }

                for (var i = variableStrParts.length - 1; i >= 0; i--) {
                    if (variableStrParts[i].trim().match(/^digitalData(.\w+)+$/)) {
                        try {
                            replacementValue = computeResult( eval(variableStrParts[i].trim()), replacementValue );
                        }
                        catch(e) {} //the replacement value should already be set to the override/default, so do nothing
                    } else if (variableStrParts[i].match(/('(.*)'|"(.*)")/)) {
                        replacementValue = variableStrParts[i].replace(/('(.*)'|"(.*)")/, '$2$3').trim();
                    } else {
                        replacementValue = computeResult(CQ_Analytics.ClientContext.get(variableStrParts[i].trim()), replacementValue);
                    }
                }
                if (replacementValue.match(/\${.*}/)) return Spectrum.Util.replaceClientContextVars(replacementValue, shouldEncodeURI);
                return replacementValue;
            });
        },

        replaceClientContextVarsInElement : function(element) {
            var content = $(element).html();
            content = this.replaceClientContextVars(content);
            $(element).html(content);
        },

        /**
         * Returns a json object.
         *
         * @param queryString String with url parameters separated with &.
         * @returns {*} json object with url params if queryString is not empty, empty json object otherwise
         */

        getParamsFromUrlQueryString : function(queryString) {
            var queryParameters  =  queryString ? queryString.split("&") : "";
            var queryParms = {};
            for(var i = 0; i < queryParameters.length; i++){
                var queryParameter = queryParameters[i].split('=');
                queryParms[queryParameter[0]] = queryParameter[1];
            }
            return queryParms;
        },

        /**
         * Returns a default value if the object passed is null (or undefined).
         *
         * @param object the Object to test, may be null or undefined
         * @param defaultValue the default value to return, may be null
         * @returns {*} object if it is not null or undefined, defaultValue otherwise
         */
        defaultIfUnavailable : function(object, defaultValue) {
            return object !== null && object !== undefined && object !== "" ? object : defaultValue;
        }
    };
}());

var Spectrum = Spectrum || {};
Spectrum.AemGrid = Spectrum.AemGrid || (function() {
    "use strict";

    return {
        doPadding : function() {
            var bp = Spectrum.Util.getCurrentBreakpoint(),
                left = 'aem-GridColumn-NoLeftPadding',
                right = 'aem-GridColumn-NoRightPadding';

            // Iterate over separate layout containers
            $('.aem-Grid.aem-Grid--12').each(function() {
                var rowWidth = 12;

                // Iterate over each grid column
                $(this).find('.aem-GridColumn').each(function() {
                    var $column = $(this).removeClass(left+' '+right),
                        classes = $column.attr('class'),
                        colWidth;

                    if (bp === 'small' && Spectrum.AemGrid.hasClass('sm', classes)) {
                        colWidth = Spectrum.AemGrid.getWidth('sm', classes);
                    } else if ($.inArray(bp, ['small','medium']) > -1 && Spectrum.AemGrid.hasClass('md', classes)) {
                        colWidth = Spectrum.AemGrid.getWidth('md', classes);
                    } else if ($.inArray(bp, ['small','medium','large']) > -1 && Spectrum.AemGrid.hasClass('lg', classes)) {
                        colWidth = Spectrum.AemGrid.getWidth('lg', classes);
                    } else if ($.inArray(bp, ['small','medium','large','extra large']) > -1 && Spectrum.AemGrid.hasClass('default', classes)) {
                        colWidth = Spectrum.AemGrid.getWidth('default', classes);
                    } else { // no grid size specified, default 12
                        colWidth = 12;
                    }

                    if (colWidth + rowWidth > 12) {
                        $column.addClass(left);
                        rowWidth = colWidth;
                    } else {
                        rowWidth += colWidth;
                    }
                    if (rowWidth === 12) {
                        $column.addClass(right);
                    }
                });
            });
        },
        hasClass : function(breakpoint, classes) {
            var pattern = new RegExp('aem-GridColumn--'+breakpoint+'--(\\d+)');
            return pattern.test(classes);
        },
        getWidth : function(breakpoint, classes) {
            var pattern = new RegExp('aem-GridColumn--'+breakpoint+'--(\\d+)');
            return parseInt(pattern.exec(classes)[1]);
        },
        init : function() {
            $(window).resize(Spectrum.AemGrid.doPadding);
            Spectrum.AemGrid.doPadding();
        }
    };
}());

$(document).ready(Spectrum.AemGrid.init);

;(function($){
    "use strict";
    $.fn.modalLink = (function(){
        return this.each(function() {
            var $linkTag = $(this);
            var modalId = $linkTag.data("modal");
            var $modalContentDiv = $("div[data-modal="+ modalId +"]");
            var modalPath = $modalContentDiv.data("modalpath");

            if(modalPath) {
                //Need to pre load modal data on the page or it will not function properly
                $.get(modalPath).done(function(content){
                    var $modalContent = $(content).find('.modalComponent');
                    $modalContentDiv.append($modalContent);
                    //The first child of the modal content contains the authored modal id which is needed for the modal to fire properly
                    var modalIdName = $modalContent.children().first().attr('id');
                    $linkTag.attr('data-target', ('#' + modalIdName));
                    $linkTag.attr('href', 'javascript:void(0)');
                    $modalContentDiv.appendTo(document.body);
                });
            }

            //Without the ".off('tap')" this, this event is fired twice, thus resulting in double modal pop-ups
            $linkTag.off('tap').on('tap', function() {
                if($modalContentDiv.children().length !== 0) {
                    $modalContentDiv.find('.modal').trigger("showModal");
                }
                return false;
            });

            $linkTag.on('click', function(e) {
                e.preventDefault();
            });
        });
    });
})(jQuery);

function generateUUID() {
    var d = new Date().getTime();
    var uuid = 'xxxxxxxx-xxxx-xxxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r = (d + Math.random()*16)%16 | 0;
        d = Math.floor(d/16);
        return (c=='x' ? r : (r&0x7|0x8)).toString(16);
    });
    return uuid;
};

;(function($){
    "use strict";

    $.fn.zipAction = function(opts) {
        var options = $.extend({
            componentPath: ''
        }, opts);

        function handleChangeLocation(event, $zipAction) {
            // Something in the interaction between placeholder and jquery results in the jQuery val() call returning
            // the empty string on IE9 (and only IE9) even when a value is present.  So get the value directly from
            // the underlying dom element instead.
            // var zip = $zipAction.find('input[name=geolocation]').first().val();
            var zip = $zipAction.find('input[name=geolocation]')[0].value;
            if (!zip) return false;

            Spectrum.HeadUtil.deleteCookie('locerrorclosed');

            if (zip.length < 5) {
                $('.spectrum-customerLocation').trigger("zipError",["length"]);
                return false;
            }

            Spectrum.Residential.LocationService.getLocationDataPromise(zip).then(function (geolocation) {
                var baseURL = decodeURI($zipAction.data("baseurl"));

                //append .html if url is internal
                if(baseURL.indexOf("/content/")>=0){
                    baseURL = baseURL + '.html';
                }

                if(!baseURL) {
                    Spectrum.Residential.Profile.setGeolocation(geolocation, true);
                    return false;
                }
                else {
                    Spectrum.Residential.Profile.setGeolocation(geolocation, false);
                    Spectrum.Util.initializeCQAnalytics();
                    redirectToURL(baseURL);
                }
            }).fail(function () {
                $('.spectrum-customerLocation').trigger("zipError",["geo"]);
                return false;
            });

            return false;
        }

        function redirectToURL(url) {
            var zipCode = ClientContext.get('/spectrumresidentialprofile/zipcode');
            if (zipCode) window.location = Spectrum.Util.replaceClientContextVars(url, true).toLowerCase(); // CQ creates pages with lowercase URLs by default
        }

        function populateZipAction($zipAction) {
            var zipCode = ClientContext.get('/spectrumresidentialprofile/zipcode');
            if (zipCode) $zipAction.find('input[name=geolocation]')[0].value = zipCode;
        }

        return this.each(function() {
            var $zipAction = $(this);

            $zipAction.find('input[name=geolocation]').on({
                keydown: function(e) {
                    // Listen for enter key...
                    var code = (e.keyCode ? e.keyCode : e.which);
                    if (code == 13) return handleChangeLocation(e, $zipAction);
                }
            });

            $zipAction.find('.geoloc-btn > button').on('tap', function(e) {
                handleChangeLocation(e, $zipAction);
            });

            CQ_Analytics.ClientContextUtils.onStoreInitialized('spectrumresidentialprofile', function() {
                populateZipAction($zipAction);
            }, 0);
        });
    };
})(jQuery);

;(function($){
    "use strict";

    $.fn.userLocation = function(opts) {
        var options = $.extend({
            componentPath: ''
        }, opts);

        return this.each(function() {
            var $geoComponent = $(this);

            // Set the location text initially (on page reload)
            CQ_Analytics.ClientContextUtils.onStoreInitialized('spectrumresidentialprofile', function() {
                if (!navigator.cookieEnabled) {
                    showError("noc");
                    return;
                }

                var zipcode = ClientContext.get('/spectrumresidentialprofile/zipcode');

                if (!zipcode) {
                    showError("geo");
                    return;
                }

                var vendorName = ClientContext.get('/spectrumresidentialprofile/serviceVendorName');

                if ('charter' === vendorName || 'charterAndBhn' === vendorName) { // We are localized
                    hideResponses();
                    if (! Spectrum.HeadUtil.hasCookie('locerrorclosed')) {
                        $geoComponent.find('.localized-content').removeClass('hidden');
                    }
                } else if ('twc' === vendorName) {
                    showError("oof-twc");
                } else if ('bhn' === vendorName) {
                    showError("oof-bhn");
                } else {
                    showError("oof");
                }
            }, 0);

            function hideResponses() {
                if (!Spectrum.Util.isEditOrDesignMode) {
                    $geoComponent.find('div[class$=-content]').addClass('hidden');
                }
            }

            function showError(errorID) {
                if (errorID != 'length') {
                    hideResponses();
                }
                if (! Spectrum.HeadUtil.hasCookie('locerrorclosed')) {
                    $geoComponent.find('.' + errorID + '-error-content').removeClass('hidden');
                }
            }

            $geoComponent.on('zipError', function(event, error) {
                showError(error);
                return false;
            });
        });
    };
})(jQuery);

;(function($){
    "use strict";

    $.fn.richtext = function() {
        return this.each(function() {
            var $rte = $(this);
            var $link = $rte.find('a[target="_blank"]');

            if($link && $link.length > 0 && typeof $link.newWindowLink === 'function') {
                $link.newWindowLink();
            }

            if ($rte.hasClass('hiddenRte')) {
                CQ_Analytics.ClientContextUtils.onStoreInitialized('spectrumresidentialprofile', function() {
                    $rte.each(function() {
                        Spectrum.Util.replaceClientContextVarsInElement($(this));
                        $(this).find("a").each(function(){
                            var linkValue = $(this).data('href');
                            $(this).attr('href', linkValue);
                        });
                        $(this).removeClass('hiddenRte hidden');
                    })
                }, 0);
            }
        });
    };
})(jQuery);

;(function($){
    "use strict";
    $.fn.rateCard = function(opts) {

        /**
         *  Rate Card JS - 2017 - Sneha
         *  UPDATE 03/23 - 10/10
         */

        var queryString = [];
        var dataScope;
        var NPP = 'NPP';
        var SPP = 'SPP';
        var regionName ='';

        var $rateCard = $(this);
        var $sppLoad = $rateCard.find('p.spp-load');
        var $rateInfoTable = $rateCard.find('.rate-info-tbl');
        var $selectStateRegion = $rateCard.find('.select-state-region');
        var $stateList = $rateCard.find('select.stateList');
        var $regionList = $rateCard.find('select.regionList');
        var $regionDiv =$rateCard.find('.region-div');
        var $errorText =$rateCard.find('.error-txt');
        var $printButton = $rateCard.find('.print-btn');

        init();

        return this.each(function() {

            // check spp npp regions
            $sppLoad.find('a.spp-link').on('tap', function (e) {//better class name needed here
                e.preventDefault();
                updateFeed();
            });

            $rateCard.find('a.line-select').on('shown.bs.tab', function (e) {
                $rateInfoTable.find('.head-bar').html($(this).data('headBar'));
            });

            $stateList.on('change', function () {
                $regionDiv.addClass('hidden');
                $regionList.find('option').remove();
                var state = $(this).find('option:selected').val();
                populateRegionDropdown(state);
            });

            $regionList.on('change', function () {
                var $regionElement = $(this).find('option:selected');
                var region = $regionElement.val();
                var regionId = $regionElement.prop('id');
                $selectStateRegion.addClass('hidden');
                getEarthData(Spectrum.Residential.Components.RateCard.Localization.getMappSpa(regionId));
            });

            $(window).on('mappingReturned', function () {
                populateStateDropdown();
            });

            $printButton.on('tap', function() {
                printPDF();
            });
        });

        function printPDF() {
            var $tvTable = $rateCard.find('.tab-content .tv-table');
            var $inetTable = $rateCard.find('.tab-content .inet-table');
            var activeServiceTab = '';

            if($tvTable.is(':hidden')){
                $tvTable.attr("data-html2canvas-ignore", 'true');
            }else{
                $tvTable.attr("data-html2canvas-ignore", 'false');
                activeServiceTab = 'TVServices';
            }

            if($inetTable.is(':hidden')){
                $inetTable.attr("data-html2canvas-ignore", 'true');
            }else{
                $inetTable.attr("data-html2canvas-ignore", 'false');
                activeServiceTab = 'InternetServices';
            }
            var pdfFileName = buildFileName(activeServiceTab);
            return xepOnline.Formatter.Format('form-print',{render:'download',filename:pdfFileName});
        }

        function buildFileName(activeServiceTab){
            //remove spaces and any other special character from regionName and build the file name with region, selected tab name and current date.
            var pdfFileNameWithSlash = '';
            //Add region name to fileName if available.
            if(regionName !== ''){
                pdfFileNameWithSlash += regionName.replace(/[\s#,:?&(){}]+/g,'') + '_';
            }
            //append activeServiceTab to fileName if available.
            if(activeServiceTab !==''){
                pdfFileNameWithSlash += activeServiceTab + '_';
            }

            //append currentDate to fileName.
            pdfFileNameWithSlash += extractCurrentDate();

             //replace slash with underscore in the pdfFileName.
             var pdfFileName = pdfFileNameWithSlash.replace(/[\/\\]/g,'_');
             return pdfFileName;
        }

        function extractCurrentDate(){
            var tdate = new Date();
            var month = '' + (tdate.getMonth() + 1);
            var day = '' + tdate.getDate();
            var year = tdate.getFullYear();
            if (month.length < 2) month = '0' + month;

            if (day.length < 2) day = '0' + day;

            return [year, month, day].join('');
        }

        function updateFeed() {//better class name needed here
            var value = $sppLoad.data('updateFeedValue');
            value = value ? value : SPP;
            var data;
            if (value == NPP) {
                $sppLoad.data('updateFeedValue', SPP);
                $sppLoad.data('beforeAfter', 'after');
                data = dataScope.XMLTablesData.RateCardRegionNPP.RateCardRegion;
            } else {
                $sppLoad.data('updateFeedValue', NPP);
                $sppLoad.data('beforeAfter', 'before');
                data = dataScope.XMLTablesData.RateCardRegionSPP.RateCardRegion;
            }
            hideTimerModal();

            // Check for error
            var errExists = false;
            $.each(data, function(key, value) {
                if (key == 'ErrorMessage') {
                    $rateInfoTable.addClass('hidden');
                    $errorText.html($rateCard.data('unavailableErrorMessage')).removeClass('hidden');
                    errExists = true;
                    return false;
                }
            });
            if (errExists == true) {
                setStateAndRegionData();
            };
            //regionName is required to form the fileName when print button is pressed. Filename consists of regionName, selected tab name and current date.
            if(data.Region){
                regionName = data.Region;
            }
            if ($rateInfoTable.length > 0) {
                $rateInfoTable.fadeOut(500, function () {
                    $rateInfoTable.find('.container tr').remove();
                    Spectrum.Residential.Components.RateCard.Table.generateRateCard(data, queryString, $rateCard);
                });
            } else {
                Spectrum.Residential.Components.RateCard.Table.generateRateCard(data, queryString, $rateCard);
            }
        }

        function parseChannel(data) {
            dataScope = data;
            if (dataScope.XMLTablesData.RateCardRegionSPP) {
                $sppLoad.data('updateFeedValue', SPP);
                updateFeed();
            } else {
                setStateAndRegionData();
            }
        }

        function getUrlParameters(url) {
            var url = url? url: window.location.href;
            var queryParms = [], hash;
            var hashes = url.slice(url.indexOf('?') + 1).split('&');
            for(var i = 0; i < hashes.length; i++){
               hash = hashes[i].split('=');
               queryParms[hash[0]] = hash[1];
            }
            return queryParms;
        }

        function pad(agent, max) {
            if (agent !== null) {
                agent = agent.toString();
                return agent.length < max ? pad('0' + agent, max) : agent;
            }
        };

        function timerModal() { // references to external DOM
            $('#formSubmit-modal button[type="submit"]').hide();
            $('#myModalLabel').html($rateCard.data('timerModalLabel')).show();
            $('img.timer').removeClass('ng-hide');
            $('#formSubmit-modal').modal('show');
        }

        function hideTimerModal() { // references to external DOM
            $('#formSubmit-modal').modal('hide');
        }

        function getEarthData(spaNum) {
            timerModal();
            var url = 'https://charter.am4m.com/ECCharterRateCardService/clurcService.asmx/getRCjson?SPA=' + spaNum;
            $.ajax({
                url : url,
                cache : true,
                success : function (data, textStatus, xhr) {
                    $rateCard.find('.rate-info-div').removeClass('hidden');
                    eval(data.result);
                },
                error : function (data, textStatus, xhr) {
                    $rateCard.find('.error-txt').html($rateCard.data('earthDataErrorMessage')).removeClass('hidden');
                }
            });
        };

        function setStateAndRegionData() {
            Spectrum.Residential.Components.RateCard.Localization.setMapping();
        }

        function populateStateDropdown() {
            hideTimerModal();
            $selectStateRegion.removeClass('hidden');
            var states = Spectrum.Residential.Components.RateCard.Localization.getStates();
            if (!states) return;// wait for the ajax call to return
            for (i = 0; i < states.length; i++) {
                $stateList.append('<option>' + states[i] + '</option>');
            }
        }

        function populateRegionDropdown(state) {
            $regionList.show();
            var regions = Spectrum.Residential.Components.RateCard.Localization.getRegions(state);
            $regionDiv.removeClass('hidden');
            $.each(regions, function() {
                $regionList.append('<option id=' + this.RateCardRegionID + '>' + this.RateCardRegionServedName + '</option>');
            });

            /* Killing you IE BUG */
            $regionList.prepend('<option disabled="disabled" selected="selected">' + $rateCard.data('regionSelectorLabel') + '</option>').prop('selectedIndex', 0);
        }

        function init() {

            $selectStateRegion.addClass('hidden');
            $('#page-loader').hide(); // references to external DOM

            // check the query string
            if (window.location.href.indexOf('?') >= 0) {
                // take every key from Query String URL and add to $scope.model.queryString
                var aemAgent = '';
                var aemSysprin = '';
                var aemSPA = '';
                var newSCDF = '';
                var newSPA = '';
                queryString = getUrlParameters(window.location.href);
                if (queryString['scdf']) {
                    newSCDF = queryString['scdf'];
                    var newSite = newSCDF.substring(0, 4);
                    var newSys = newSCDF.substring(4, 8);
                    var newPri = newSCDF.substring(8, 12);
                    var newAgent = newSCDF.substring(12, 16);
                    newSPA = newSite + '/' + newSys + '/' + newPri + '/' + newAgent;
                    getEarthData(newSPA);

                } else if (queryString['a'] && (queryString['sp'] !== null && queryString['sp'] !== undefined)) {
                    aemAgent = pad(queryString['a'], 4);
                    aemSysprin = queryString['sp'];
                    var aemSys = aemSysprin.substring(0, 4);
                    var aemPri = aemSysprin.substring(4, 8);
                    aemSPA = '0000' + '/' + aemSys + '/' + aemPri + '/' + aemAgent;
                    getEarthData(aemSPA);
                } else {
                    if (queryString['addr1'] && queryString['zip']) {
                        // Error message with phone
                        var callPhone = "";
                        if (queryString['mso'] == "CHTR") {
                            callPhone = $rateCard.data('charterPhoneNumber');
                        } else if (queryString['mso'] == "TWC") {
                            callPhone = $rateCard.data('twcPhoneNumber');
                        } else if (queryString['mso'] == "BHN") {
                            callPhone = $rateCard.data('brightHousePhoneNumber');
                        }
                        $selectStateRegion.find('h4').html($rateCard.data('matchNotFoundMessage') + callPhone);
                    }
                    setStateAndRegionData();
                }
            } else {
                // Error message with phone
                var callPhone = "";
                if (queryString['mso'] == "CHTR") {
                    callPhone = $rateCard.data('charterPhoneNumber');
                } else if (queryString['mso'] == "TWC") {
                    callPhone = $rateCard.data('twcPhoneNumber');
                } else if (queryString['mso'] == "BHN") {
                    callPhone = $rateCard.data('brightHousePhoneNumber');
                }
                $selectStateRegion.find('h4').html($rateCard.data('matchNotFoundMessage') + callPhone);
                setStateAndRegionData();
            }
        }
    };
})(jQuery);

var Spectrum = Spectrum || {};
Spectrum.Residential = Spectrum.Residential || {};
Spectrum.Residential.Components = Spectrum.Residential.Components || {};
Spectrum.Residential.Components.RateCard = Spectrum.Residential.Components.RateCard || {};

//TODO: build table with proper template
//TODO: get clarity
Spectrum.Residential.Components.RateCard.Table = (function() {

    function buildFullRow(content, rowClass, isHeader){
        var headerClass = isHeader ? 'header ' : '';
        var row = '<div class="' + headerClass + 'row"><div class="' + rowClass + ' col-md-12">' + content + '</div></div>';
        return row;
    };

    function buildSplitRow(firstColumnContent, secondColumnContent, indent){
         var indentClass = indent ? 'indent ' : '';
         var row = '<tr><td class="description ' + indentClass + ' ">' + firstColumnContent + '</td><td class="price">' + secondColumnContent + '</td></tr>';
         return row;
    };

     function buildFulltableRow(content, rowClass){
         var rowClassName = rowClass ? 'class="' + rowClass + '"' : '';
         var row = '<tr"><td ' + rowClassName + '>' + content + '</td><td>&nbsp;</td></tr>';
         return row;
     };


    // IE specific fix
    function ieSafeArrayCheck(obj) {
        var isArr = false;
        if (!$.support.leadingWhitespace) {
            isArr = (Object.prototype.toString.call(obj) === '[object Array]');
        } else {
            isArr = Array.isArray(obj);
        }
        return isArr;
    }

    // Convert Null Values to White Space for UI
    function convertNull(The_value) {
        if (The_value === null) {
            The_value = ' ';
        } else {
            The_value = The_value;
        }
        return The_value;
    }

    function buildServiceDOM(service) {
            var domString = '';
            if (service.ServiceLineItem) {//TODO: discuss better solutions for this problem with Architect & Product Owner
                var webOnlyTitle = 'Equipment Rental & Other Services (Per Month) (With Subscription to Basic Service)';
                if (service.Description == webOnlyTitle) {
                    service.Description = 'Equipment Rental & Other Services (Per Month)';
                }
                domString += buildFulltableRow('<h4> ' + service.Description + '<span>' + convertNull(service.SubDescription) + '</span></h4>');
            }
            if (ieSafeArrayCheck(service.ServiceLineItem)) {
                $.each(service.ServiceLineItem, function() {
                    domString += buildSplitRow(this.Description + ' <sup>' + convertNull(this.SuperScript) + '</sup>', convertNull(this.Price), true);
                    //ServiceSubLineItem
                    if (ieSafeArrayCheck(this.ServiceSubLineItem)) {
                        $.each(this.ServiceSubLineItem, function() {
                            ServiceSubLineItem_Price = convertNull(this.Price);
                            domString += buildSplitRow(this.Description, ServiceSubLineItem_Price, true);
                        });
                    } else {
                        if (this.hasOwnProperty('ServiceSubLineItem')) {
                            this.ServiceSubLineItem.Price = convertNull(this.ServiceSubLineItem.Price);
                            domString += buildSplitRow(this.ServiceSubLineItem.Description, this.ServiceSubLineItem.Price, true);
                        }
                    }
                });
            } else {
                if (service.hasOwnProperty('ServiceLineItem')) {
                    service.ServiceLineItem.Price = convertNull(service.ServiceLineItem.Price);
                    domString += buildSplitRow(service.ServiceLineItem.Description, service.ServiceLineItem.Price, true);
                    //ServiceSubLineItem
                    if (ieSafeArrayCheck(service.ServiceSubLineItem)) {
                        $.each(service.ServiceSubLineItem, function() {
                            var ServiceSubLineItem_Price = '';
                            ServiceSubLineItem_Price = convertNull(this.Price);
                            domString += buildSplitRow(this.Description + ' ' + this.SuperScript, ServiceSubLineItem_Price, true);
                        });
                    } else {
                        if (service.hasOwnProperty('ServiceSubLineItem')) {
                            service.ServiceLineItem.ServiceSubLineItem.Price = convertNull(service.ServiceLineItem.ServiceSubLineItem.Price);
                            domString += buildSplitRow(service.ServiceSubLineItem.Description, service.ServiceLineItem.ServiceSubLineItem.Price, true);
                        }
                    }
                }
            }
            return domString;
        }

    return {
        //generate rate card
        generateRateCard : function(dataRegion, queryString, $rateCard) {
            $sppLoad = $rateCard.find('p.spp-load');
            $redirectLink = $rateCard.find('.redirectLink');
            $rateInfoTable = $rateCard.find('.rate-info-tbl');

            //Redirect link
            $redirectLink.show();

            var tvTableDOM = '<tr><th>&nbsp;</th><th>&nbsp;</th></tr>';
            var inetTableDOM = '<tr><th>&nbsp;</th><th>&nbsp;</th></tr>';
            var $tvTable = $rateCard.find('.tab-content .tv-table #tv-table-id tbody');
            var $inetTable = $rateCard.find('.tab-content .inet-table #internet-table-id tbody');
            var Top_Disclaimer = $rateCard.data('tvDisclaimer') || "";
            var TV_Footer_Disclaimer = $rateCard.data('tvFooterDisclaimer') || "";
            var Internet_Disclaimer = $rateCard.data('internetDisclaimer') || "";
            var Default_SPP_Cut_Date = $rateCard.data('defaultSppCutDate');
            var LegacyPDFUrl = dataRegion.LegacyPDFUrl;
            var SPPCutDate;

            // Top Disclaimer
            if (dataRegion.DisclaimerData.TVDisclaimer !== null) {
                $.each(dataRegion.DisclaimerData.TVDisclaimer, function() {
                    var DiscID = this.DisclaimerID.substring(0, 2);
                    if (DiscID == '13') { // magic number
                        Top_Disclaimer = this.Description;
                    }
                });
            } else {
                Top_Disclaimer = '';
            };
            var topDisclaimerDOM = buildFullRow('<strong>For ' + dataRegion.Region + '</strong>, Effective ' + dataRegion.EffectiveBeginDate + '. ' + Top_Disclaimer, 'note');
            $rateInfoTable.find('.topNote').html(topDisclaimerDOM);

            // print RCCLUServices
            if (dataRegion.RCCLUServices.RCCLUService) {
                $.each(dataRegion.RCCLUServices.RCCLUService, function() {
                    tvTableDOM += buildSplitRow('<strong>' + this.ServiceName + '</strong> <span>' + convertNull(this.Description) + '</span>', this.Price, true);
                });
            };
            // print TV RegionServices
            $.each(dataRegion.RegionServices.TVService, function() {
                var id = this.ServiceID;
                //ServiceLineItem
                tvTableDOM += buildServiceDOM(this);


                // print TV rate regulated Disclaimers
                if (dataRegion.DisclaimerData !== null && dataRegion.DisclaimerData !== undefined) {
                    var TV_Disclaimer = '';
                    $.each(dataRegion.DisclaimerData.TVDisclaimer, function() {
                        if (this.ServiceID === id) TV_Disclaimer += '<p>' + this.Description + '</p>';
                    });
                    if(TV_Disclaimer !== ''){
                       tvTableDOM += buildFulltableRow(TV_Disclaimer, 'disclaimer');
                    }
                }
            });



            // print TV Disclaimers at bottom
            if (dataRegion.DisclaimerData !== null && dataRegion.DisclaimerData !== undefined) {
                $.each(dataRegion.DisclaimerData.TVDisclaimer, function() {
                    if ((!(this.ServiceID) && (this.DisclaimerID.substring(0, 2) !== '13')) || (this.ServiceID === null) ) {
                        tvTableDOM += buildFulltableRow('<p>' + this.Description + '</p>', 'disclaimer');
                    }
                });
            }

            $tvTable.html(tvTableDOM);

            // print Internet RegionServices
            $.each(dataRegion.RegionServices.InternetService, function() {

                //ServiceLineItem
                inetTableDOM += buildServiceDOM(this);

                // Static Data
                if (!this.ServiceLineItem) {;
                    inetTableDOM += buildFulltableRow('<p data-id="' + this.ServiceID + '"> ' + this.Description + '<span></span></p>', 'description');
                }
            });

            // print Internet Disclaimers
            if (dataRegion.DisclaimerData.InternetDisclaimer !== null) {
                Internet_Disclaimer += '<p>' + dataRegion.DisclaimerData.InternetDisclaimer.Description + '</p>';
                inetTableDOM += buildFulltableRow(Internet_Disclaimer, 'disclaimer');
            }

            $inetTable.html(inetTableDOM);

            // print communities served & geocodes
            communitiesServedDOM = buildFulltableRow('<br>Serving: ' + dataRegion.CommunitiesServed, 'note');
            communitiesServedDOM += buildFulltableRow(dataRegion.GeoCode, 'note');
            $rateInfoTable.find('.geocode').html(communitiesServedDOM);

            // show NPP toggle for houseref and existing cust
            if (queryString.houseRef && (queryString.existing == 'true')) {
                var beforeAfter = $sppLoad ? $sppLoad.data('beforeAfter') : '';// existing or not dialog fields rather than befor/after
                beforeAfter = beforeAfter ? beforeAfter : 'before';            // ask if it's static
                var SPPCutDate = dataRegion.SPPCutDate ? dataRegion.SPPCutDate : Default_SPP_Cut_Date;
                // SPPCutDate print from response
                //TODO: find a more consistent solution for the link text
                var linkText = 'Did you sign up for TV services '+beforeAfter+' ' + SPPCutDate + '? ';
                $sppLoad.find('.spp-msg').html(linkText);
                $sppLoad.show();

                // Legacy PDF URL print from response
                var isPDFurl = ".pdf";
                if (LegacyPDFUrl && (LegacyPDFUrl.indexOf(isPDFurl) !== -1) && (queryString.mso != 'CHTR')) {// TODO check based on client context when no longer using iframe
                    var legacyMSO = 'Time Warner Cable';
                    if (queryString.mso == 'BHN') {
                        legacyMSO = 'Brighthouse';
                    }
                    var linkText = '<span>For former ' + legacyMSO + ' Service Offerings & Rates <a target="_blank" href="' + LegacyPDFUrl + '">click here</a>.  For Spectrum Service Offerings & Rates see below.</span>';
                    $sppLoad.html(linkText).show();
                }
            }

            // Show Content
            $rateInfoTable.fadeIn(500);
        }
    }
})();

var Spectrum = Spectrum || {};
Spectrum.Residential = Spectrum.Residential || {};
Spectrum.Residential.Components = Spectrum.Residential.Components || {};
Spectrum.Residential.Components.RateCard = Spectrum.Residential.Components.RateCard || {};

Spectrum.Residential.Components.RateCard.Localization = (function() {
    "use strict";

    var dataMapp;

    return {
        setMapping : function() {
            if (dataMapp) return;
            $.ajax({
                url : '/content/dam/spectrum/residential/en/json/ratecard/RcMapping.json',// make a tech debt ticket to convert this to a service
                dataType : 'jsonp',
                cache : false,
                jsonpCallback : 'parseData'
            }).done(function (json) {
                dataMapp = json.RawCmsData;
                $(window).trigger('mappingReturned');
            });
        },

        getStates : function() {
            if (!dataMapp) return;
            var states = [];
            $.each(dataMapp.RCRegions.RCRegion, function() {
                if (this.State !== null) {
                    if (jQuery.inArray(this.State, states) == -1) {
                        states[states.length] = this.State;
                    }
                }
            });
            return states.sort();
        },

        getRegions : function(state) {
            if (!dataMapp) return;
            var regions = [];
            $.each(dataMapp.RCRegions.RCRegion, function() {
                if (state === this.State) {
                    regions[regions.length] = this;
                }
            });
            regions.sort(function(a, b){
                if(a.RateCardRegionServedName < b.RateCardRegionServedName) return -1;
                if(a.RateCardRegionServedName > b.RateCardRegionServedName) return 1;
                return 0;
            })
            return regions;
        },

        getMappSpa : function(regionId) {
            var spaNum = '';
            $.each(dataMapp.RCSysPrinAgents.RCSysPrinAgent, function() {
                if (regionId == this.RateCardRegionID) {
                    spaNum = this.System + '/' + this.Principal + '/' + this.Agent;
                    if (this.Site != null && this.Site != '') {
                        spaNum = this.Site + '/' + spaNum;
                    }
                    return false;
                }
            });
            return spaNum;
        }
    };
})();

;(function($) {
    "use strict";
    $(document).on('tap', function(event){
        $('.muiServiceability [data-toggle="popover"]').each(function () {
            var $popoverBox = $(this).siblings('.popover');
            //if the target of the click isn't the container nor a descendant of the container
            if (!$(this).is(event.target) && $(this).has(event.target).length === 0 && $popoverBox.length != 0
                && !$popoverBox.is(event.target) && $popoverBox.has(event.target).length === 0) {
                //then hide popover and set state of display as false
                (($(this).popover('hide').data('bs.popover')||{}).inState||{}).click = false;  // fix for BootStrap 3.3.7
            }
        });
    });
})(jQuery);

;(function($){
    "use strict";

    $.fn.motionPoint = function(opts) {
        var $motionPoint = $(this);

        function init() {
            var hostURL = window.location.host;
            var thisPage = window.location.pathname + window.location.search;
            var foreignUri = $motionPoint.attr('foreignUri');

            //Define language based on uri
            if (hostURL.indexOf(foreignUri) > -1) {
                $motionPoint.attr('href','https://www.spectrum.com'+thisPage);
                $motionPoint.text($motionPoint.attr('foreignTxt'));
                $motionPoint.attr('data-lang','en');
            } else {
                $motionPoint.attr('href','https://'+foreignUri+'.spectrum.com'+thisPage);
                $motionPoint.text($motionPoint.attr('englishTxt'));
                $motionPoint.attr('data-lang',$motionPoint.attr('foreignAbr'));
            }
            return false;
        }
        init();
    }
})(jQuery);

;(function($){
    "use strict";
    $.fn.buyflowEntrySingleLineAddressForm = function(opts) {

        var RESI_PARAM_WHITELIST = JSON.parse(opts.whitelistedParams);
        var $hideSmartyStreetGlyph = $(this).find('.hideSmartyStreetGlyph');
        var lastUsedAutocompleteSuggestion = '';
        var lastUsedSuggestionStreet = '';

        function handleSubmit(e, $buyflowEntrySingleLineAddressForm) {
            var $accountField = $buyflowEntrySingleLineAddressForm.find('input.localization__input-account')[0];
            var $addressField = $buyflowEntrySingleLineAddressForm.find('input.localization__input-address1')[0];
            var $accountError = $buyflowEntrySingleLineAddressForm.find('.localization__bubble-account--error');
            var $addressError = $buyflowEntrySingleLineAddressForm.find('.localization__bubble-address1--error');

            // Validate form fields
            var hasError = false;
            if ($accountField && (!$accountField.value || !$accountField.value.match(/^[0-9]{16}$/))) { // If not 16 digit account number, show error
                $accountError.removeClass("hidden");
                hasError = true;
            } else {
                $accountError.addClass("hidden");
            }

            if (!$addressField.value || !$addressField.value.match(/[a-zA-Z0-9]+/)) { // If no alphanumeric characters, show error
                $addressError.removeClass("hidden");
                hasError = true;
            } else {
                $addressError.addClass("hidden");
            }

            if (hasError == true) return false;

            // Get form fields
            var address = $addressField.value.trim();

            // Optional Field
            var account = $accountField ? {uacc:$accountField.value} : {};

            /*
                Reference: https://smartystreets.com/docs/cloud/us-autocomplete-api
                NOTE: Because the US Autocomplete API relies on the user to know their primary number,
                the returned suggestions do not necessarily represent valid addresses.
                These suggestions contain the house number provided as well as a valid street+city+state.
                Submitting those values to the US Street API will provide the fully validated address if one exists.

                Reference: https://smartystreets.com/docs/cloud/us-street-api
                Note: Because range and invalid are not compatible with freeform address input,
                the strict match output strategy will be employed in those cases regardless of the provided match output strategy value.
                Strict Match: The API will ONLY return candidates that are valid USPS addresses.
            */
            $.ajax({
                url : 'https://us-street.api.smartystreets.com/street-address?auth-id=' + encodeURIComponent(opts.authId),
                data : { street : address },
                contentType : 'jsonp',
                success : function(data) { submitAddress(data, account, $buyflowEntrySingleLineAddressForm, address); },
                error : function(error) { addressValidationError($buyflowEntrySingleLineAddressForm); }
            });
        }

        // Validate the address and then submit to buyflow landing page
        function submitAddress(addressData, account, $buyflowEntrySingleLineAddressForm, inputAddress) {
            var address = '', apt = '', zip = '';

            // If we found a valid address from SmartyStreets, use its data to build address parameters
            if (addressData.length > 0 && addressData[0].components) {
                var components = addressData[0].components;
                address = buildStreetAddressFromComponents(components);
                apt = buildApartmentNumberFromComponents(components);
                // All valid addresses will have a zip code (per SmartyStreets support email)
                if (components.zipcode) {
                    // Check if autosuggestion has valid zip code
                    zip = components.zipcode;
                }
                redirectToATG($buyflowEntrySingleLineAddressForm, address, apt, zip, account);
            } else if (lastUsedAutocompleteSuggestion.trim() === inputAddress) {
                // For an invalid address
                // Redirect to ATG for addr in case where user selects the address from autoSuggest and where zip is not in smarty street response
                address = lastUsedSuggestionStreet;
                window.location = getRedirectUrl($buyflowEntrySingleLineAddressForm.data('submission-urls-charter'), buildParams(address, apt, zip, account));
            } else {
                // when user enter address manually with any 5 digits (xyz 12345) at the end in the input then gets redirect to ATG page
                var zipRegex = /(^.*)(,|\s)[0-9]{5}$/; // Check if the last five characters are numbers
                if (zipRegex.test(inputAddress)) {
                    zip = inputAddress.substr(inputAddress.length - 5);
                    address = inputAddress.substr(0, inputAddress.length - 5).trim();
                    redirectToATG($buyflowEntrySingleLineAddressForm, address, apt, zip, account);
                } else {
                    // Otherwise, show an error message
                    addressValidationError($buyflowEntrySingleLineAddressForm);
                }
            }
        }

        function redirectToATG($buyflowEntrySingleLineAddressForm, address, apt, zip, account) {
            Spectrum.Residential.LocationService.getLocationDataPromise(zip).then(function (geolocation) {
                Spectrum.Residential.Profile.setGeolocation(geolocation, false);
                window.location = getRedirectUrl($buyflowEntrySingleLineAddressForm.data('submission-urls-charter'), buildParams(address, apt, zip, account));
            });
        }

        function buildStreetAddressFromComponents(components) {
            var address = [];
            if (components.primary_number)
                address.push(components.primary_number);
            if (components.street_predirection)
                address.push(components.street_predirection);
            if (components.street_name)
                address.push(components.street_name);
            if (components.street_postdirection)
                address.push(components.street_postdirection);
            if (components.street_suffix)
                address.push(components.street_suffix);

            return address.join(' ');
        }

        function buildApartmentNumberFromComponents(components) {
            var apt = [];
            if (components.extra_secondary_designator)
                apt.push(components.extra_secondary_designator);
            if (components.extra_secondary_number)
                apt.push(components.extra_secondary_number);
            if (components.secondary_designator)
                apt.push(components.secondary_designator);
            if (components.secondary_number)
                apt.push(components.secondary_number);

            return apt.join(' ');
        }

        // Display error message if no address could be parsed
        function addressValidationError($buyflowEntrySingleLineAddressForm) {
            console.error('Single-line BFEF address validation failed.');
            $buyflowEntrySingleLineAddressForm.find('.localization__bubble-address1--error').removeClass('hidden');
        }

        // Add address and clientcontext whitelist params
        function buildParams(address, apt, zip, optionalParams) {
            return filterParams(Object.assign (
                buildAddressParams(address, apt, zip),
                optionalParams,
                getParamsFromClientContext()
            ));
        }

        function buildAddressParams(address, apt, zip) {
            return {
                zip: zip || "",
                aptnum: apt || "",
                a: address || ""
            }
        }

        function getParamsFromClientContext() {
            var data = {};
            if (Spectrum && Spectrum.Util) {
                var userProfile = Spectrum.Util.getUserProfile() || { data: {} };
                var salesProfile = Spectrum.Util.getSalesProfile() || { data: {} };

                //noinspection JSUnresolvedVariable
                if (CQ_Analytics.ClientContext.get(userProfile.getName()).initializeValues) {
                    //noinspection JSUnresolvedVariable
                    CQ_Analytics.ClientContext.get(userProfile.getName()).initializeValues();
                }
                //noinspection JSUnresolvedVariable
                if (CQ_Analytics.ClientContext.get(salesProfile.getName()).initialize) {
                    //noinspection JSUnresolvedVariable
                    CQ_Analytics.ClientContext.get(salesProfile.getName()).initialize();
                }

                data = Object.assign(data, userProfile.data, salesProfile.data);
            }

            var filtered_props = _.keys(data)
                .filter(function(key) {
                    return key.indexOf("_xss") === -1 && data[key];
                });

            return _.pick(data, filtered_props);
        }

        function filterParams(paramsObj) {
            var filteredParams = _.keys(paramsObj).filter(function(key) {
                return paramsObj[key] !== "" && RESI_PARAM_WHITELIST.indexOf(key) !== -1;
            });
            return _.pick(paramsObj, filteredParams)
        }

        function getRedirectUrl(baseRedirectUrl, parameters) {
            if(!baseRedirectUrl){
                return "";
            }
            var paramString = baseRedirectUrl.split("?");
            var queryString = paramString.length>1 ? paramString[1] : "";

            var queryParamsFromURL =  Spectrum.Util.getParamsFromUrlQueryString(queryString);
            var queryParamsJSON = combineQueryParams(queryParamsFromURL, parameters);

            return paramString[0] + "?" + queryParamsJSON;
        }

        function combineQueryParams(queryParamsFromURLJSON , queryParamsFromParametersJSON ) {
            if($.isEmptyObject(queryParamsFromURLJSON)){
                return $.param(queryParamsFromParametersJSON);
            }
            for(var key in queryParamsFromURLJSON){
                if(queryParamsFromParametersJSON.hasOwnProperty(key)){

                    //returns true if sale profile params are not equal to the default value else returns false.
                    var isDefault = Spectrum.Residential.SalesProfile.isDefault(key);
                    if(isDefault){
                        delete queryParamsFromParametersJSON[key];
                    }else {
                        delete queryParamsFromURLJSON[key];
                    }
                }
            }
            if(!$.isEmptyObject(queryParamsFromURLJSON) && !$.isEmptyObject(queryParamsFromParametersJSON)){
                return ($.param(queryParamsFromURLJSON) + "&" + $.param(queryParamsFromParametersJSON));
            }else if($.isEmptyObject(queryParamsFromURLJSON)) {
                return $.param(queryParamsFromParametersJSON);
            }else {
                return $.param(queryParamsFromURLJSON);
            }
        }

        function hideSSAutocompleteOnMobile($autocompleteContainer){
            if(opts.hideSmartyStreetsAutocompleteOnMobile === "true" && $autocompleteContainer.length > 0){
                $autocompleteContainer.addClass('hideSmartyStreetsAutocompleteOnMobile');
            }
        }

        if(opts.hideSmartyStreetsAutocomplete === "false"){
            Spectrum.Common.SmartyStreets.AuthId = opts.authId;
            Spectrum.Common.SmartyStreets.LiveAddresses.push({
                id: opts.uuid,
                freeform: '#freeform-' + opts.uuid,
            });

            /*
                Wait for final initialization to attach event listeners
            */
            $(window).on('smartyStreetsInitialized', function(event, liveAddress) {
                liveAddress.on('AutocompleteReceived', function(event, data, previousHandler){
                    $hideSmartyStreetGlyph.removeClass('hidden');
                    previousHandler(event, data);
                });

                liveAddress.on('AutocompleteUsed', function(event, data, previousHandler){
                    // Skip over event if it didn't originate from this form
                    if (data.address.form.dom.id === 'form-' + opts.uuid) {
                        lastUsedAutocompleteSuggestion = data.address.getDomFields().freeform.value;
                        lastUsedSuggestionStreet = data.suggestion.street_line;
                    }
                    previousHandler(event, data);
                });

                $('#freeform-' + opts.uuid).on('focusout', function(event, data, previousHandler){
                    $hideSmartyStreetGlyph.addClass('hidden');
                });

                /*
                    After smarty-ui elements are added to DOM, hide autocomplete for mobile if enabled/true
                */
                var $autocompleteContainer = $('.smarty-autocomplete.smarty-addr-' + opts.uuid);
                if($autocompleteContainer.length > 0){
                    hideSSAutocompleteOnMobile($autocompleteContainer);
                }else{
                    //smarty-ui elements are not yet added to DOM, so we can listen for the 'MapInitialized' event
                    liveAddress.on('MapInitialized', function(event, data, previousHandler){
                        hideSSAutocompleteOnMobile($('.smarty-autocomplete.smarty-addr-' + opts.uuid));
                        previousHandler(event, data);
                    });
                }
            });
        }

        $(document).on('tap', function(event){
            var $autocompleteContainer = $('.smarty-autocomplete.smarty-addr-' + opts.uuid);
            var $inputContainer = $('#freeform-' + opts.uuid);
            //if the target of the click isn't the container nor a descendant of the container
            if((!$autocompleteContainer.is(event.target) && $autocompleteContainer.has(event.target).length === 0
                && !$inputContainer.is(event.target) && $inputContainer.has(event.target).length === 0)
                || $hideSmartyStreetGlyph.is(event.target)){
                if($('.smarty-autocomplete.smarty-addr-' + opts.uuid).is(":visible")){
                	$('.smarty-autocomplete.smarty-addr-' + opts.uuid).hide();
                }
                $hideSmartyStreetGlyph.addClass('hidden');
            } else {
                $('.smarty-autocomplete.smarty-addr-' + opts.uuid).show();
            }

            //handle bootstrap popovers
            $('#' + opts.uuid + ' [data-toggle="popover"]').each(function () {
                var $popoverBox = $(this).siblings('.popover');
                //if the target of the click isn't the container nor a descendant of the container
                if (!$(this).is(event.target) && $(this).has(event.target).length === 0 && $popoverBox.length != 0
                    && !$popoverBox.is(event.target) && $popoverBox.has(event.target).length === 0) {
                    //then hide popover and set state of display as false
                    (($(this).popover('hide').data('bs.popover')||{}).inState||{}).click = false;  // fix for BootStrap 3.3.7
                }
            });
        });

        return this.each(function() {
            var $buyflowEntrySingleLineAddressForm = $(this);
            var firstTap = true;

            $buyflowEntrySingleLineAddressForm.on('tap', function() {
                if (firstTap) {
                    $(window).trigger('resize.smarty');
                    firstTap = false;
                }
            });

            $buyflowEntrySingleLineAddressForm.find('input.localization__input-address1').on('focus change', function(e) {
                $buyflowEntrySingleLineAddressForm.find('.localization__bubble-address1--error').addClass("hidden");
            });

            $buyflowEntrySingleLineAddressForm.find('a.localization__tooltip-icon--address1').popover();
            $buyflowEntrySingleLineAddressForm.find('a.localization__info localization__tooltip-account').popover();

            $buyflowEntrySingleLineAddressForm.find('a.localization__tooltip-text-link').popover();

            $buyflowEntrySingleLineAddressForm.find('form').on('submit', function(e) {
                e.preventDefault();
            });

            $buyflowEntrySingleLineAddressForm.find('input.localization__input').on({
                keydown: function(e) {
                    // Listen for enter key...
                    var code = (e.keyCode ? e.keyCode : e.which);
                    if (code == 13) return handleSubmit(e, $buyflowEntrySingleLineAddressForm);
                }
            });

            $buyflowEntrySingleLineAddressForm.find('.localization__input-submit').on('tap', function(e) {
                e.preventDefault();
                handleSubmit(e, $buyflowEntrySingleLineAddressForm);
            });
        });
    };
})(jQuery);

;(function($){
    "use strict";
    $.fn.buyflowEntryForm = function(opts) {

        var RESI_PARAM_WHITELIST = JSON.parse(opts.whitelistedParams);
        var $hideSmartyStreetGlyph = $(this).find('.hideSmartyStreetGlyph');

        function handleSubmit(e, $buyflowEntryForm, $accountField, $addressField, $zipField, $accountError, $addressError, $zipError) {
            var $aptField = $buyflowEntryForm.find('input.localization__input-apt');

            // Validate form fields
            var hasError = false;
            if (($accountField.length > 0) && (!$accountField.val() || !$accountField.val().match(/^[0-9]{16}$/))) { // If not 16 digit account number, show error
                if(opts.errorsDisplayMode === 'errorAsBorder'){
                    $accountField.addClass('input-error-border');
                }else{
                    $accountError.removeClass('hidden');
                }
                hasError = true;
            } else {
                $accountError.addClass("hidden");
            }

            if (!$addressField.val() || !$addressField.val().match(/[a-zA-Z0-9]+/)) { // If no alphanumeric characters, show error
                if(opts.errorsDisplayMode === 'errorAsBorder'){
                    $addressField.addClass('input-error-border');
                }else{
                    $addressError.removeClass('hidden');
                }
                hasError = true;
            } else {
                $addressError.addClass('hidden');
            }

            if (!$zipField.val() || !$zipField.val().match(/^[0-9]{5}$/)) { // If not 5 digit zip, show error
                if(opts.errorsDisplayMode === 'errorAsBorder'){
                    $zipField.addClass('input-error-border');
                }else{
                    $zipError.removeClass('hidden');
                }
                hasError = true;
            } else {
                $zipError.addClass('hidden');
            }

            if (hasError == true) return false;

            // Get form fields
            var address = $addressField.val();
            // Check to see if Apt field exists
            var apt = ($aptField.length > 0) ? $aptField.val() : undefined;
            var zip = $zipField.val();
            if (!address || !zip) return false;

            // Optional Field
            var account = ($accountField.length > 0) ? {uacc:$accountField.val()} : {};

            // Validate zip field, entry form only reads 5-digit zip
            zip = zip.length === 5 ? zip : zip.substring(0, 5);

            Spectrum.Residential.LocationService.getLocationDataPromise(zip).then(function (geolocation) {
                Spectrum.Residential.Profile.setGeolocation(geolocation, false);
                window.location = getRedirectUrl($buyflowEntryForm.data('submission-urls-charter'), buildParams(address, apt, zip, account));
            });
        }

        // Add address and clientcontext whitelist params
        function buildParams(address, apt, zip, optionalParams) {
            return filterParams(Object.assign (
                buildAddressParams(address, apt, zip),
                optionalParams,
                getParamsFromClientContext()
            ));
        }

        function buildAddressParams(address, apt, zip) {
            return {
                zip: zip || "",
                aptnum: apt || "",
                a: address || ""
            }
        }

        function getParamsFromClientContext() {
            var data = {};
            if (Spectrum && Spectrum.Util) {
                var userProfile = Spectrum.Util.getUserProfile() || { data: {} };
                var salesProfile = Spectrum.Util.getSalesProfile() || { data: {} };

                //noinspection JSUnresolvedVariable
                if (CQ_Analytics.ClientContext.get(userProfile.getName()).initializeValues) {
                    //noinspection JSUnresolvedVariable
                    CQ_Analytics.ClientContext.get(userProfile.getName()).initializeValues();
                }
                //noinspection JSUnresolvedVariable
                if (CQ_Analytics.ClientContext.get(salesProfile.getName()).initialize) {
                    //noinspection JSUnresolvedVariable
                    CQ_Analytics.ClientContext.get(salesProfile.getName()).initialize();
                }

                data = Object.assign(data, userProfile.data, salesProfile.data);
            }

            var filtered_props = _.keys(data)
                .filter(function(key) {
                    return key.indexOf("_xss") === -1 && data[key];
                });

            return _.pick(data, filtered_props);
        }

        function filterParams(paramsObj) {
            var filteredParams = _.keys(paramsObj).filter(function(key) {
                return paramsObj[key] !== "" && RESI_PARAM_WHITELIST.indexOf(key) !== -1;
            });
            return _.pick(paramsObj, filteredParams)
        }

        function getRedirectUrl(baseRedirectUrl, parameters) {
            if(!baseRedirectUrl){
                return "";
            }
            var paramString = baseRedirectUrl.split("?");
            var queryString = paramString.length>1 ? paramString[1] : "";

            var queryParamsFromURL =  Spectrum.Util.getParamsFromUrlQueryString(queryString);
            var queryParamsJSON = combineQueryParams(queryParamsFromURL, parameters);

            return paramString[0] + "?" + queryParamsJSON;
        }

        function combineQueryParams(queryParamsFromURLJSON , queryParamsFromParametersJSON ) {
            if($.isEmptyObject(queryParamsFromURLJSON)){
                return $.param(queryParamsFromParametersJSON);
            }
            for(var key in queryParamsFromURLJSON){
                if(queryParamsFromParametersJSON.hasOwnProperty(key)){

                    //returns true if sale profile params are not equal to the default value else returns false.
                    var isDefault = Spectrum.Residential.SalesProfile.isDefault(key);
                    if(isDefault){
                        delete queryParamsFromParametersJSON[key];
                    }else {
                        delete queryParamsFromURLJSON[key];
                    }
                }
            }
            if(!$.isEmptyObject(queryParamsFromURLJSON) && !$.isEmptyObject(queryParamsFromParametersJSON)){
                return ($.param(queryParamsFromURLJSON) + "&" + $.param(queryParamsFromParametersJSON));
            }else if($.isEmptyObject(queryParamsFromURLJSON)) {
                return $.param(queryParamsFromParametersJSON);
            }else {
                return $.param(queryParamsFromURLJSON);
            }
        }

        if(opts.hideSmartyStreetsAutocomplete === "false"){
            Spectrum.Common.SmartyStreets.AuthId = opts.authId;
            Spectrum.Common.SmartyStreets.LiveAddresses.push({
                id: opts.uuid,
                address1: '#address1-'+opts.uuid,
                address2: '#apt-'+opts.uuid,
                postal_code: '#zip-'+opts.uuid
            });

            /*
                Wait for final initialization to attach event listeners
            */
            $(window).on('smartyStreetsInitialized', function(event, liveAddress) {
                /*
                    Retrieve zipcode for user selected auto-suggestion and auto-fill zipcode field
                    Reference: https://smartystreets.com/docs/cloud/us-street-api
                    Note: When we set field of 'match' as 'invalid', the API will return a single candidate for every properly submitted address, even if invalid or ambiguous.
                */
                liveAddress.on('AutocompleteUsed', function(event, data, previousHandler){
                    // Skip over event if it didn't originate from this form
                    if(data.address.form.dom.id === 'form-' + opts.uuid){
                        var zipField = data.address.getDomFields().postal_code;
                        var addrData = {
                            street: data.suggestion.street_line,
                            city: data.suggestion.city,
                            state: data.suggestion.state,
                            match: "invalid"
                        };
                        $.ajax({
                            url: "https://us-street.api.smartystreets.com/street-address?auth-id=" + encodeURIComponent(opts.authId),
                            data : addrData,
                            contentType: "jsonp"
                        })
                        .done(function (response, statusText, xhr) {
                            if(response.length > 0 && response[0].components && response[0].components.zipcode){
                                zipField.value = response[0].components.zipcode;
                            }else{
                                zipField.value = "";
                            }
                        })
                        .fail(function (xhr, statusText) {
                            zipField.value = "";
                        });
                    }
                    previousHandler(event, data);
                });

                liveAddress.on('AutocompleteReceived', function(event, data, previousHandler){
                    $hideSmartyStreetGlyph.removeClass('hidden');
                    previousHandler(event, data);
                });

                $('#address1-' + opts.uuid).on('focusout', function(event, data, previousHandler){
                    $hideSmartyStreetGlyph.addClass('hidden');
                });

                /*
                    After smarty-ui elements are added to DOM, hide autocomplete for mobile if enabled/true
                */
                liveAddress.on('MapInitialized', function(event, data, previousHandler){
                    if(opts.hideSmartyStreetsAutocompleteOnMobile === "true"){
                        $('.smarty-autocomplete.smarty-addr-' + opts.uuid).addClass('hideSmartyStreetsAutocompleteOnMobile');
                    }
                    previousHandler(event, data);
                });
            });
        }

        $(document).on('tap', function(event){
            var autocompleteContainer = $('.smarty-autocomplete.smarty-addr-' + opts.uuid);
            var inputContainer = $('#address1-' + opts.uuid);
            //if the target of the click isn't the container nor a descendant of the container
            if((!autocompleteContainer.is(event.target) && autocompleteContainer.has(event.target).length === 0
                && !inputContainer.is(event.target) && inputContainer.has(event.target).length === 0)
                || $hideSmartyStreetGlyph.is(event.target)){
                if($('.smarty-autocomplete.smarty-addr-' + opts.uuid).is(":visible")){
                	$('.smarty-autocomplete.smarty-addr-' + opts.uuid).hide();
                }
                $hideSmartyStreetGlyph.addClass('hidden');
            }

            //handle bootstrap popovers
            $('#' + opts.uuid + ' [data-toggle="popover"]').each(function () {
                var $popoverBox = $(this).siblings('.popover');
                //if the target of the click isn't the container nor a descendant of the container
                if (!$(this).is(event.target) && $(this).has(event.target).length === 0 && $popoverBox.length != 0
                    && !$popoverBox.is(event.target) && $popoverBox.has(event.target).length === 0) {
                    //then hide popover and set state of display as false
                    (($(this).popover('hide').data('bs.popover')||{}).inState||{}).click = false;  // fix for BootStrap 3.3.7
                }
            });
        });

        return this.each(function() {
            var $buyflowEntryForm = $(this);
            var $accountField = $buyflowEntryForm.find('input.localization__input-account');
            var $addressField = $buyflowEntryForm.find('input.localization__input-address1');
            var $zipField = $buyflowEntryForm.find('input.localization__input-zipCode');
            var $accountError = $buyflowEntryForm.find('.localization__bubble-account--error');
            var $addressError = $buyflowEntryForm.find('.localization__bubble-address1--error');
            var $zipError = $buyflowEntryForm.find('.localization__bubble-zip--error');

            var firstTap = true;

            $buyflowEntryForm.on('tap', function() {
                if (firstTap) {
                    $(window).trigger('resize.smarty');
                    firstTap = false;
                }
            });

            // Prevent non numeric characters in zip field
            $zipField.on('input', function() {
                var c = this.selectionStart,
                    r = /[^0-9]/gi,
                    v = $(this).val();
                if(r.test(v)) {
                    $(this).val(v.replace(r, ''));
                    c--;
                    this.setSelectionRange(c, c);
                }
            });

            $accountField.on('focus change', function(e) {
                $accountError.addClass("hidden");
                $accountField.removeClass('input-error-border');
            });

            $addressField.on('focus change', function(e) {
                $addressError.addClass("hidden");
                $addressField.removeClass('input-error-border');
            });

            $zipField.on('focus change', function(e) {
                $zipError.addClass("hidden");
                $zipField.removeClass('input-error-border');
            });

            $buyflowEntryForm.find('a.localization__tooltip-icon--address1').popover();
            $buyflowEntryForm.find('a.localization__info localization__tooltip-account').popover();

            $buyflowEntryForm.find('a.localization__tooltip-text-link').popover();

            $buyflowEntryForm.find('form').on('submit', function(e) {
                e.preventDefault();
            });

            $buyflowEntryForm.find('input.localization__input').on({
                keydown: function(e) {
                    // Listen for enter key...
                    var code = (e.keyCode ? e.keyCode : e.which);
                    if (code == 13) {
                        return handleSubmit(e, $buyflowEntryForm, $accountField, $addressField, $zipField, $accountError, $addressError, $zipError);
                    }
                }
            });

            $buyflowEntryForm.find('.localization__input-submit').on('tap', function(e) {
                e.preventDefault();
                handleSubmit(e, $buyflowEntryForm, $accountField, $addressField, $zipField, $accountError, $addressError, $zipError);
            });
        });
    };
})(jQuery);

/*
    Initialize Smarty Streets
    Should be added to end of clientlib includes to execute last
*/
;(function($){
    'use strict';

    $(window).on("load",function(){
        /*
        Initialize the SmartyStreets website plugin (jquery.liveaddress.js)
        Reference: https://smartystreets.com/docs/cloud/us-autocomplete-api
        Note: Setting 'autoVerify' and 'submitVerify' as 'false' prevents validating/verifying the address
        */

        var liveAddress = $.LiveAddress({
            key: Spectrum.Common.SmartyStreets.AuthId,
            autoVerify: false,
            submitVerify: false,
            addresses: Spectrum.Common.SmartyStreets.LiveAddresses
        });

        /*
        Smarty Street enabled components waiting to setup listeners need to
        listen to the custom event `smartyStreetsInitialized`.
        */
        $(window).trigger('smartyStreetsInitialized', liveAddress);

    });
})(jQuery);

//Appends the phone number to the site header in cases where it appears
if(window.location.search.indexOf('affpn=') > 0) {
    $('.site-header-aside').append($('.phone-main'));
}

